{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/avatar.jpeg","path":"uploads/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/Git commit 规范以及 emoji 列表/terminal.png","path":"uploads/Git commit 规范以及 emoji 列表/terminal.png","modified":0,"renderable":0},{"_id":"source/uploads/weex常见问题解析/rectangular.jpg","path":"uploads/weex常见问题解析/rectangular.jpg","modified":0,"renderable":0},{"_id":"source/uploads/weex常见问题解析/native.png","path":"uploads/weex常见问题解析/native.png","modified":0,"renderable":0},{"_id":"source/uploads/weex常见问题解析/web.png","path":"uploads/weex常见问题解析/web.png","modified":0,"renderable":0},{"_id":"source/uploads/weex常见问题解析/richtext.png","path":"uploads/weex常见问题解析/richtext.png","modified":0,"renderable":0},{"_id":"source/uploads/weex常见问题解析/triangle.jpg","path":"uploads/weex常见问题解析/triangle.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon1.ico","path":"images/favicon1.ico","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/uploads/git高级用法——git-cherry-pick/gitlog1.png","path":"uploads/git高级用法——git-cherry-pick/gitlog1.png","modified":1,"renderable":0},{"_id":"source/uploads/git高级用法——git-cherry-pick/gitlog2.png","path":"uploads/git高级用法——git-cherry-pick/gitlog2.png","modified":1,"renderable":0},{"_id":"source/uploads/git高级用法——git-cherry-pick/gitlog3.png","path":"uploads/git高级用法——git-cherry-pick/gitlog3.png","modified":1,"renderable":0},{"_id":"source/uploads/git高级用法——git-cherry-pick/gitreflog1.png","path":"uploads/git高级用法——git-cherry-pick/gitreflog1.png","modified":1,"renderable":0},{"_id":"source/uploads/git高级用法——git-cherry-pick/gitlog4.png","path":"uploads/git高级用法——git-cherry-pick/gitlog4.png","modified":1,"renderable":0},{"_id":"source/uploads/git高级用法——git-cherry-pick/gitlog5.png","path":"uploads/git高级用法——git-cherry-pick/gitlog5.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1542713662701},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1542713662699},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1542713662700},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1542713662701},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1542713662700},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1542713662701},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1542713662701},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1542713662701},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1542713662701},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1542713662701},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1542713662702},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1542713662703},{"_id":"themes/next/_config.yml","hash":"410f559940fdef83ba798422c33f36805fd59f48","modified":1555038415997},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1542713662703},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1542713662703},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1542713662736},{"_id":"source/_posts/Git commit 规范以及 emoji 列表.md","hash":"9d55da762ab1438d4cbce53c0d298df115a8355f","modified":1555747159234},{"_id":"source/_posts/git高级用法——git-cherry-pick.md","hash":"4421fac7663b220c368221cb4537dac2174399d2","modified":1555925119819},{"_id":"source/categories/index.md","hash":"ca1e4af5127e9c2f387261555869e95bf78823cc","modified":1542869140253},{"_id":"source/_posts/mini-program-met.md","hash":"b16eadd6835bc8310dd7017eeee52a9cda50b4f8","modified":1543485730395},{"_id":"source/_posts/weex常见问题解析.md","hash":"84519950bff5e7040f6889053ffe1553cd8b2357","modified":1555060933859},{"_id":"source/tags/index.md","hash":"c8d1c4b609e6467479ef69363bd57dbae4f289d5","modified":1542869746880},{"_id":"source/uploads/avatar.jpeg","hash":"b1f64621a0607275b2c3241f9e387263a1aa0883","modified":1542870833220},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1542713662704},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1542713662704},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1542713662704},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1542713662704},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1542713662704},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1542713662704},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1542713662704},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1542713662705},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1542713662705},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1542713662705},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1542713662705},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1542713662705},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1542713662705},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1542713662706},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1542713662705},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1542713662706},{"_id":"themes/next/layout/_layout.swig","hash":"7055c1035cc42efb16423f6e3ee5dbdb7045a313","modified":1554950268300},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1542713662730},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1542713662729},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1542713662730},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1542713662730},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1542713662730},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1542713662730},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1542713662731},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1542713662736},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1542713662738},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1542713662842},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1542713662843},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1542713662842},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662778},{"_id":"source/uploads/avatar.png","hash":"cbfb819c2faae31f509155a5c406519f9f4720cc","modified":1555055590653},{"_id":"source/_posts/转-你不知道的JavaScript上卷读书笔记.md","hash":"a160f9e3fc5831c5c6f31bc833c2e33c47666eb6","modified":1554284013837},{"_id":"source/uploads/Git commit 规范以及 emoji 列表/terminal.png","hash":"fd59f800a5883dcd1b9894ea4d63d2895eb09d4b","modified":1554896179733},{"_id":"source/uploads/weex常见问题解析/rectangular.jpg","hash":"00ef97fb6f10dcb212066c5c8e6154b74edf5738","modified":1554096770229},{"_id":"source/uploads/weex常见问题解析/native.png","hash":"654d1abf302cc54b18c68ce920a77799ac75d869","modified":1554281442235},{"_id":"source/uploads/weex常见问题解析/web.png","hash":"97ac97ae535dd006ac058ca12bbf7c8e1189cd60","modified":1554281438854},{"_id":"source/uploads/weex常见问题解析/richtext.png","hash":"76e73a0127b99b61da25cbc7bcb0d99bcef573de","modified":1554717776675},{"_id":"source/uploads/weex常见问题解析/triangle.jpg","hash":"69678ddc3e42ef7f173a3c53049dfc31b40252b3","modified":1554101938459},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542713662706},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1542713662706},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1542713662706},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1542713662707},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1542713662707},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9cd3150b9dff752918dbe8fef346899dc6b8e68b","modified":1555920166988},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1542713662707},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1542713662708},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1542713662708},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1542713662708},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1542713662709},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1542713662709},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1542713662709},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1542713662708},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1542713662709},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1542713662727},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1542713662726},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1542713662727},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1542713662727},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1542713662727},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1542713662728},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1542713662728},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1542713662717},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1542713662717},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1542713662720},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1542713662738},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1542713662739},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1542713662739},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1542713662740},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1542713662740},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1542713662740},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1542713662741},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1542713662741},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1542713662742},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1542713662778},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542713662779},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542713662779},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1542713662779},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1542713662778},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1542713662779},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1542713662780},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1542713662780},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1542713662780},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1542713662781},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1542713662781},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1542713662781},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1542713662781},{"_id":"themes/next/source/images/favicon.ico","hash":"95b4282ce05f1fa80abab28d75b8eb3583bd8e71","modified":1554976579998},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1542713662782},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1542713662782},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542713662782},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542713662782},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542713662783},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1542713662782},{"_id":"themes/next/source/images/favicon1.ico","hash":"29113b96515549c0ff795f7dcd4faebd07ac759b","modified":1554975530761},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662719},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662719},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662767},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662767},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662768},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662777},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542713662777},{"_id":"source/uploads/git高级用法——git-cherry-pick/git log.png","hash":"e89870264eec40e176cb54248ca6279300669544","modified":1555924968818},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1542713662710},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1542713662708},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1542713662709},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1542713662710},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1542713662711},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1542713662710},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1542713662710},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1542713662710},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1542713662711},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1542713662720},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1542713662720},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1542713662721},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1542713662722},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1542713662721},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1542713662721},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1542713662722},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1542713662723},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1542713662723},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1542713662724},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1542713662723},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1542713662724},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1542713662724},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1542713662724},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1542713662725},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1542713662725},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1542713662725},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1542713662725},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1542713662726},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1542713662726},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1542713662726},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1542713662726},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1542713662729},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1542713662729},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1542713662729},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1542713662729},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1542713662718},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1542713662719},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1542713662719},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c2bd200ec17062b3ec78c0a1d33da32fd3460116","modified":1554948890491},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1542713662767},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1542713662767},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1542713662768},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1542713662776},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1542713662777},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1542713662777},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1542713662777},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1542713662783},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1542713662784},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1542713662784},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1542713662784},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1542713662783},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542713662785},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1542713662785},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1542713662785},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1542713662786},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1542713662786},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1542713662786},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1542713662791},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1542713662795},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1542713662795},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1542713662795},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1542713662796},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1542713662800},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1542713662801},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1542713662801},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1542713662801},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1542713662803},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1542713662803},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1542713662803},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1542713662803},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1542713662803},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1542713662818},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1542713662820},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1542713662820},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1542713662820},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1542713662821},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1542713662821},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1542713662822},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1542713662824},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1542713662825},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1542713662823},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1542713662824},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1542713662826},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1542713662826},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1542713662827},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1542713662828},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1542713662827},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1542713662827},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1542713662826},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1542713662829},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1542713662829},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1542713662830},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1542713662830},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1542713662830},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1542713662831},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1542713662831},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1542713662832},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1542713662832},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1542713662837},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1542713662837},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542713662840},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542713662841},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542713662841},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542713662819},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1542713662728},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1542713662728},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1542713662742},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1542713662743},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1542713662743},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1542713662743},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1542713662744},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1542713662750},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1542713662758},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1542713662764},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1542713662765},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1542713662766},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1542713662766},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1542713662766},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1542713662765},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1542713662766},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1542713662769},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1542713662769},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1542713662769},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1542713662769},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1542713662768},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1542713662771},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542713662770},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1542713662770},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1542713662772},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1542713662772},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1542713662773},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1542713662773},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1542713662773},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1542713662774},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1542713662774},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1542713662774},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1542713662775},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1542713662775},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1542713662775},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1542713662786},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1542713662790},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1542713662789},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1542713662791},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542713662796},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542713662797},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542713662797},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542713662796},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542713662797},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542713662797},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542713662799},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542713662800},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542713662800},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1542713662802},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1542713662802},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542713662804},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542713662805},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1542713662805},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542713662837},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542713662836},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1542713662790},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542713662839},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542713662817},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542713662817},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1542713662744},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1542713662744},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1542713662745},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1542713662745},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1542713662745},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1542713662746},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1542713662747},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1542713662747},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1542713662748},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1542713662749},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1542871817059},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1542713662749},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1542713662749},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1542713662750},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1542713662750},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1542713662751},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1542713662751},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1542713662751},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1542713662752},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1542713662752},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1542713662752},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1542713662753},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1542713662753},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1542713662753},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1542713662754},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1542713662755},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1542713662754},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1542713662754},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1542713662754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1542713662756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1542713662755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1542713662756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1542713662756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1542713662756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1542713662757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1542713662757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1542713662757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1542713662757},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1542713662757},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1542713662758},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1542713662759},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1542713662759},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1542713662759},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1542713662759},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1542713662761},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1542713662760},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1542713662761},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1542713662761},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1542713662762},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1542713662762},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1542713662762},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1542713662763},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1542713662762},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1542713662763},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1542713662763},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1542713662763},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1542713662764},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1542713662764},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1542713662772},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1542713662772},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1542713662773},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1542713662787},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1542713662787},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1542713662788},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1542713662788},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1542713662788},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542713662798},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542713662798},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542713662798},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542713662798},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542713662799},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542713662799},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1542713662808},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1542713662816},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542713662811},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1542713662794},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1542713662836},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1542713662814},{"_id":"public/categories/index.html","hash":"1507704b7bb3ccf29740f5b7ffc3576d0a5d2399","modified":1555925137542},{"_id":"public/tags/index.html","hash":"f6b05a50b7964435c97d8cd25a8da008a595a099","modified":1555925137542},{"_id":"public/archives/2018/index.html","hash":"1f2d09def829036d8eeabd2cac860132da1a78ca","modified":1555925137542},{"_id":"public/archives/2018/11/index.html","hash":"ab8b47538d8857633326ce5cebd1881ac54ee222","modified":1555925137542},{"_id":"public/archives/2019/03/index.html","hash":"71e28c604b2963099bf4b254649fd6428598aba2","modified":1555925137542},{"_id":"public/archives/2019/04/index.html","hash":"62d8e10f667d56fa1a8e01fd56ad6fb5b8c16ac5","modified":1555925137542},{"_id":"public/tags/Weex/index.html","hash":"2af71d3424f9fb44e92510c33305eb772e8d2f49","modified":1555925137542},{"_id":"public/tags/学习笔记/index.html","hash":"9d9ac422aa0978384ef0663c43ffee04a4175a3d","modified":1555925137543},{"_id":"public/categories/git/index.html","hash":"52e20d497f6fe32c822afa1931447f4e7f8e8e56","modified":1555925137543},{"_id":"public/categories/小程序/index.html","hash":"f67feac356048c7802190ba1bf92b777be5dc435","modified":1555925137543},{"_id":"public/categories/Weex/index.html","hash":"62d30db12c1a01c92b22496917ce6ba7f372b176","modified":1555925137543},{"_id":"public/categories/学习笔记/index.html","hash":"2e863b72f738dbff2580e8c31a32670435d64146","modified":1555925137543},{"_id":"public/2019/04/20/git高级用法——git-cherry-pick/index.html","hash":"4ead66eb08974039fe4c0b966efff90aeb85204b","modified":1555925137543},{"_id":"public/2019/04/10/Git commit 规范以及 emoji 列表/index.html","hash":"954f2782f75a7774c632ae9e035752d3fdb820d2","modified":1555925137543},{"_id":"public/2019/03/29/weex常见问题解析/index.html","hash":"17d822c7aa28b02740461255601101fba916c0c6","modified":1555925137543},{"_id":"public/2018/11/29/转-你不知道的JavaScript上卷读书笔记/index.html","hash":"8fbf0e06ba60b166c24cbdec5c899fd5ef4e5f00","modified":1555925137543},{"_id":"public/2018/11/22/mini-program-met/index.html","hash":"5bf940ab4546866c35654965ab094c488177e481","modified":1555925137543},{"_id":"public/archives/index.html","hash":"697350a17a30b45635b40c96453360598df1762e","modified":1555925137544},{"_id":"public/archives/2019/index.html","hash":"3d952368a2640f5a0327c15e40a0cf29e21dd6e0","modified":1555925137544},{"_id":"public/tags/git/index.html","hash":"37bbbd9c431326e6a80f262b545fda6c805d874f","modified":1555925137544},{"_id":"public/tags/实战经验/index.html","hash":"102a6919e9fe8008948ec10eabb83398c5981653","modified":1555925137544},{"_id":"public/index.html","hash":"d6ca34ff0753f9d2a38f0d926f243137f69f013a","modified":1555925137544},{"_id":"public/uploads/avatar.jpeg","hash":"b1f64621a0607275b2c3241f9e387263a1aa0883","modified":1555925137602},{"_id":"public/uploads/Git commit 规范以及 emoji 列表/terminal.png","hash":"fd59f800a5883dcd1b9894ea4d63d2895eb09d4b","modified":1555925137602},{"_id":"public/uploads/weex常见问题解析/rectangular.jpg","hash":"00ef97fb6f10dcb212066c5c8e6154b74edf5738","modified":1555925137602},{"_id":"public/uploads/weex常见问题解析/native.png","hash":"654d1abf302cc54b18c68ce920a77799ac75d869","modified":1555925137602},{"_id":"public/uploads/weex常见问题解析/web.png","hash":"97ac97ae535dd006ac058ca12bbf7c8e1189cd60","modified":1555925137602},{"_id":"public/uploads/weex常见问题解析/richtext.png","hash":"76e73a0127b99b61da25cbc7bcb0d99bcef573de","modified":1555925137602},{"_id":"public/uploads/weex常见问题解析/triangle.jpg","hash":"69678ddc3e42ef7f173a3c53049dfc31b40252b3","modified":1555925137602},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555925137602},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1555925137602},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555925137602},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555925137602},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555925137602},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555925137602},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555925137602},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555925137602},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555925137602},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555925137602},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555925137602},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555925137602},{"_id":"public/images/favicon.ico","hash":"95b4282ce05f1fa80abab28d75b8eb3583bd8e71","modified":1555925137603},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555925137603},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555925137603},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555925137603},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555925137603},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1555925137603},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555925137603},{"_id":"public/images/favicon1.ico","hash":"29113b96515549c0ff795f7dcd4faebd07ac759b","modified":1555925137603},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1555925137603},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555925137603},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1555925137603},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1555925137603},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1555925137603},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1555925137603},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1555925137603},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1555925137603},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555925137603},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1555925137603},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1555925137603},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1555925137603},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1555925137603},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1555925137604},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1555925137604},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555925138104},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555925138113},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1555925138121},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1555925138121},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1555925138121},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1555925138121},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1555925138122},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1555925138122},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1555925138122},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1555925138122},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1555925138122},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1555925138122},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1555925138122},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1555925138122},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1555925138122},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1555925138122},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1555925138122},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555925138122},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1555925138122},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1555925138122},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1555925138122},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1555925138122},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1555925138123},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1555925138123},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1555925138123},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1555925138123},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1555925138123},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1555925138123},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1555925138123},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1555925138123},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1555925138123},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555925138123},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1555925138123},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1555925138123},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1555925138123},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1555925138123},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1555925138123},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1555925138123},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1555925138123},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1555925138123},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1555925138123},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1555925138123},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1555925138123},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1555925138123},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1555925138124},{"_id":"public/css/main.css","hash":"843f1d96ca1d1b73933d254fc74d2ebe4f90ab96","modified":1555925138124},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1555925138124},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1555925138124},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1555925138124},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1555925138124},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1555925138124},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555925138124},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555925138124},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555925138124},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1555925138124},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1555925138124},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1555925138124},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1555925138124},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1555925138124},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1555925138124},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555925138124},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555925138124},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555925138124},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1555925138125},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1555925138125},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1555925138125},{"_id":"public/uploads/avatar.png","hash":"cbfb819c2faae31f509155a5c406519f9f4720cc","modified":1555925138125},{"_id":"public/uploads/git高级用法——git-cherry-pick/git log.png","hash":"e89870264eec40e176cb54248ca6279300669544","modified":1555925138125},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1555925138125},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1555925138125},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555925138125},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1555925138142}],"Category":[{"name":"git","_id":"cjus5nha60004ed109aooda6y"},{"name":"小程序","_id":"cjus5nhad0008ed10qrvxnsjl"},{"name":"Weex","_id":"cjus5nhaj000fed10bn9lfk0o"},{"name":"学习笔记","_id":"cjus5nhhz000ted10sygufgl3"}],"Data":[],"Page":[{"date":"2018-11-22T06:43:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\n# title: categories\ndate: 2018-11-22 14:43:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-11-22T06:45:40.253Z","path":"categories/index.html","title":"","layout":"page","_id":"cjus5nha00001ed10b3clicfs","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2018-11-22T06:46:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\n# title: tag\ndate: 2018-11-22 14:46:19\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-11-22T06:55:46.880Z","path":"tags/index.html","title":"","layout":"page","_id":"cjus5nha40003ed10was2n6ah","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git Commit 规范以及 emoji 列表","date":"2019-04-10T08:19:42.000Z","_content":"<!-- # Git 版本规范 -->\n# 分支\n\n* **master**分支为主分支（保护分支），不能直接在master上进行修改代码或提交,通过**MR**(merge Request)或者**PR**(pull Request)的方式进行提交。\n* **preview**分支为预发分支， 所有测试完成需要上线的功能合并到该分支\n* **develop、 test**分支为测试分支，所有开发完成需要提交测试的功能合并到该分支\n* **feature/xxx**分支为功能开发分支，根据不同需求创建独立的功能分支，开发完成后合并到develop或test分支\n* **hotfix**分支为bug修复分支，需要根据实际情况对已发布的版本进行漏洞修复\n\n<!--more-->\n\n# Tag\n\n## 采用三段式，v版本.里程碑.序号，例如**v1.0.0**\n\n* 架构升级或架构重大调整，修改第1位\n* 新功能上线或者模块大的调整，修改第2位\n* bug修复上线，修改第3位\n\n\n# Commit message的格式\n每次提交，Commit message 都包括三个部分：header，body 和 footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n其中，Header 是必需的，Body 和 Footer 可以省略。\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。\n\n## Header\nHeader部分只有一行，包括三个字段：**type**（必需）、**scope**（可选）和**subject**（必需）。\n\n  1. type\n**type**用于说明 commit 的类别，只允许使用下面7个标识。\n* feat：新功能（feature）\n* fix：修补bug\n* docs：文档（documentation）\n* style： 格式（不影响代码运行的变动）\n* refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n* test：增加测试\n* chore：构建过程或辅助工具的变动\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n  2. scope\n  **scope**用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n  3. subject\n  **subject**是 commit 目的的简短描述，不超过50个字符。\n  * 以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n  * 第一个字母小写\n  * 结尾不加句号（.）\n\n## Body\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n```\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n有两个注意点。\n（1）使用第一人称现在时，比如使用**change**而不是**changed**或**changes**。\n（2）应该说明代码变动的动机，以及与以前行为的对比。\n\n## Footer\nFooter 部分只用于两种情况。\n 1. 不兼容变动\n  如果当前代码与上一个版本不兼容，则 Footer 部分以***BREAKING CHANGE***开头，后面是对变动的描述、以及变动理由和迁移方法。\n  ```\n  BREAKING CHANGE: isolate scope bindings definition has changed.\n      To migrate the code follow the example below:\n\n      Before:\n\n      scope: {\n        myAttr: 'attribute',\n      }\n\n      After:\n\n      scope: {\n        myAttr: '@',\n      }\n\n      The removed `inject` wasn't generaly useful for directives so there should be no code using it\n  ```\n 2. 关闭 Issue\n 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n ```\n Closes #234\n ```\n\n## Revert\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以**revert:**开头，后面跟着被撤销 Commit 的 Header。\n```\nrevert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\nBody部分的格式是固定的，必须写成**This reverts commit &lt;hash>.**，其中的**hash**是被撤销 commit 的 SHA 标识符。\n\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的**Reverts**小标题下面。\n\n# Commitizen\n\n[Commitizen](https://github.com/commitizen/cz-cli)是一个撰写合格 Commit message 的工具。\n\n安装命令如下。\n\n```\n$ npm install -g commitizen\n```\n\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\n```\n$ commitizen init cz-conventional-changelog --save --save-exact\n```\n\n以后，凡是用到**git commit**命令，一律改为使用**git cz**。这时，就会出现选项，用来生成符合格式的 Commit message。\n\n![terminal](/uploads/Git commit 规范以及 emoji 列表/terminal.png)\n\n\n# validate-commit-msg\n\n[validate-commit-msg](https://github.com/conventional-changelog-archived-repos/validate-commit-msg) 用于检查 Node 项目的 Commit message 是否符合格式。\n\n它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为**validate-commit-msg.js**。\n\n接着，把这个脚本加入 Git 的 hook。下面是在**package.json**里面使用 ghooks，把这个脚本加为**commit-msg**时运行。\n\n```\n  \"config\": {\n    \"ghooks\": {\n      \"commit-msg\": \"./validate-commit-msg.js\"\n    }\n  }\n```\n\n然后，每次**git commit**的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。\n\n```\n$ git add -A \n$ git commit -m \"edit markdown\" \nINVALID COMMIT MSG: does not match \"<type>(<scope>): <subject>\" ! was: edit markdown\n```\n\n# 生成 Change log\n\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成\n\n生成的文档包括以下三个部分。\n\n* New features\n* Bug fixes\n* Breaking changes.\n\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。\n\n[conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) 就是生成 Change log 的工具，运行下面的命令即可。\n\n```\n$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n```\n\n上面命令不会覆盖以前的 Change log，只会在**CHANGELOG.md**的头部加上自从上次发布以来的变动。\n\n如果你想生成所有发布的 Change log，要改为运行下面的命令。\n\n```\n$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n```\n\n为了方便使用，可以将其写入**package.json**的**scripts**字段。\n\n```\n{\n  \"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"\n  }\n}\n```\n以后，直接运行下面的命令即可。\n```\n$ npm run changelog\n```\n\n# git commit中使用emoji\n\n## emoji规范格式\n**git commit** 时，提交信息遵循以下格式：\n```\n:emoji1: :emoji2: 主题\n\n提交信息主体\n\nRef <###>\n```\n\n初次提交示例：\n```\ngit commit -m \":tada: Initialize Repo\"\n```\n## emoji指南\n\n| emoji | emoji代码 | Commit说明 |\n|---|---|---|\n| 🎨 (调色板)| :art: | 改进代码结构/代码格式 |\n| ⚡️ (闪电) | :zap: | 提升性能 |\n| 🐎 (赛马) | :racehorse: | 提升性能 |\n|🔥 (火焰) | :fire: | 移除代码或文件 |\n| 🐛 (bug) | :bug: | 修复 bug |\n| 🚑 (急救车) | :ambulance: | 重要补丁 |\n| ✨ (火花) | :sparkles: | 引入新功能 |\n| 📝 (铅笔) | :pencil: | 撰写文档 | \n| 🚀 (火箭) | :rocket: | 部署功能 |\n| 💄 (口红) | :lipstick: | 更新 UI 和样式文件 |\n| 🎉 (庆祝) | :tada: | 初次提交 |\n| ✅ (白色复选框) | :white_check_mark: | 增加测试 |\n| 🔒 (锁) | :lock: | 修复安全问题 |\n| 🍎 (苹果) | :apple: | 修复 macOS 下的问题 |\n| 🐧 (企鹅) | :penguin: | 修复 Linux 下的问题 |\n| 🏁 (旗帜) | :checked_flag: | 修复 Windows 下的问题|\n| 🔖 (书签) | :bookmark: | 发行/版本标签 |\n| 🚨 (警车灯) | :rotating_light: | 移除 linter警告 |\n| 🚧 (施工) | :construction: | 工作进行中 |\n| 💚 (绿心) | :green_heart: | 修复 CI 构建问题 |\n| ⬇️ (下降箭头) | :arrow_down: | 降级依赖 |\n| ⬆️ (上升箭头) | :arrow_up: | 升级依赖 |\n| 👷 (工人) | :construction_worker: | 添加 CI 构建系统 |\n| 📈 (上升趋势图) | :chart_with_upwards_trend: | 添加分析或跟踪代码 |\n| 🔨 (锤子) | :hammer: | 重大重构 |\n| ➖ (减号) | :heavy_minus_sign: | 减少一个依赖 |\n| 🐳 (鲸鱼) | :whale: |  Docker 相关工作 |\n| ➕ (加号) | :heavy_plus_sign: | 增加一个依赖 |\n| 🔧 (扳手) | :wrench: | 修改配置文件 |\n| 🌐 (地球) | :globe_with_meridians: | 国际化与本地化 |\n| ✏️ (铅笔) | :pencil2: | 修复 typo |\n\n\n# 参考文献\n\n* [Commit message 和 Change log 编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)","source":"_posts/Git commit 规范以及 emoji 列表.md","raw":"---\ntitle: Git Commit 规范以及 emoji 列表\ndate: 2019-04-10 16:19:42\ntags: [git,实战经验] \ncategories: git\n# description: \n---\n<!-- # Git 版本规范 -->\n# 分支\n\n* **master**分支为主分支（保护分支），不能直接在master上进行修改代码或提交,通过**MR**(merge Request)或者**PR**(pull Request)的方式进行提交。\n* **preview**分支为预发分支， 所有测试完成需要上线的功能合并到该分支\n* **develop、 test**分支为测试分支，所有开发完成需要提交测试的功能合并到该分支\n* **feature/xxx**分支为功能开发分支，根据不同需求创建独立的功能分支，开发完成后合并到develop或test分支\n* **hotfix**分支为bug修复分支，需要根据实际情况对已发布的版本进行漏洞修复\n\n<!--more-->\n\n# Tag\n\n## 采用三段式，v版本.里程碑.序号，例如**v1.0.0**\n\n* 架构升级或架构重大调整，修改第1位\n* 新功能上线或者模块大的调整，修改第2位\n* bug修复上线，修改第3位\n\n\n# Commit message的格式\n每次提交，Commit message 都包括三个部分：header，body 和 footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n其中，Header 是必需的，Body 和 Footer 可以省略。\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。\n\n## Header\nHeader部分只有一行，包括三个字段：**type**（必需）、**scope**（可选）和**subject**（必需）。\n\n  1. type\n**type**用于说明 commit 的类别，只允许使用下面7个标识。\n* feat：新功能（feature）\n* fix：修补bug\n* docs：文档（documentation）\n* style： 格式（不影响代码运行的变动）\n* refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n* test：增加测试\n* chore：构建过程或辅助工具的变动\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n  2. scope\n  **scope**用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n  3. subject\n  **subject**是 commit 目的的简短描述，不超过50个字符。\n  * 以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n  * 第一个字母小写\n  * 结尾不加句号（.）\n\n## Body\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n```\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n```\n有两个注意点。\n（1）使用第一人称现在时，比如使用**change**而不是**changed**或**changes**。\n（2）应该说明代码变动的动机，以及与以前行为的对比。\n\n## Footer\nFooter 部分只用于两种情况。\n 1. 不兼容变动\n  如果当前代码与上一个版本不兼容，则 Footer 部分以***BREAKING CHANGE***开头，后面是对变动的描述、以及变动理由和迁移方法。\n  ```\n  BREAKING CHANGE: isolate scope bindings definition has changed.\n      To migrate the code follow the example below:\n\n      Before:\n\n      scope: {\n        myAttr: 'attribute',\n      }\n\n      After:\n\n      scope: {\n        myAttr: '@',\n      }\n\n      The removed `inject` wasn't generaly useful for directives so there should be no code using it\n  ```\n 2. 关闭 Issue\n 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n ```\n Closes #234\n ```\n\n## Revert\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以**revert:**开头，后面跟着被撤销 Commit 的 Header。\n```\nrevert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\nBody部分的格式是固定的，必须写成**This reverts commit &lt;hash>.**，其中的**hash**是被撤销 commit 的 SHA 标识符。\n\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的**Reverts**小标题下面。\n\n# Commitizen\n\n[Commitizen](https://github.com/commitizen/cz-cli)是一个撰写合格 Commit message 的工具。\n\n安装命令如下。\n\n```\n$ npm install -g commitizen\n```\n\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。\n\n```\n$ commitizen init cz-conventional-changelog --save --save-exact\n```\n\n以后，凡是用到**git commit**命令，一律改为使用**git cz**。这时，就会出现选项，用来生成符合格式的 Commit message。\n\n![terminal](/uploads/Git commit 规范以及 emoji 列表/terminal.png)\n\n\n# validate-commit-msg\n\n[validate-commit-msg](https://github.com/conventional-changelog-archived-repos/validate-commit-msg) 用于检查 Node 项目的 Commit message 是否符合格式。\n\n它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为**validate-commit-msg.js**。\n\n接着，把这个脚本加入 Git 的 hook。下面是在**package.json**里面使用 ghooks，把这个脚本加为**commit-msg**时运行。\n\n```\n  \"config\": {\n    \"ghooks\": {\n      \"commit-msg\": \"./validate-commit-msg.js\"\n    }\n  }\n```\n\n然后，每次**git commit**的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。\n\n```\n$ git add -A \n$ git commit -m \"edit markdown\" \nINVALID COMMIT MSG: does not match \"<type>(<scope>): <subject>\" ! was: edit markdown\n```\n\n# 生成 Change log\n\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成\n\n生成的文档包括以下三个部分。\n\n* New features\n* Bug fixes\n* Breaking changes.\n\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。\n\n[conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) 就是生成 Change log 的工具，运行下面的命令即可。\n\n```\n$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n```\n\n上面命令不会覆盖以前的 Change log，只会在**CHANGELOG.md**的头部加上自从上次发布以来的变动。\n\n如果你想生成所有发布的 Change log，要改为运行下面的命令。\n\n```\n$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n```\n\n为了方便使用，可以将其写入**package.json**的**scripts**字段。\n\n```\n{\n  \"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -w -r 0\"\n  }\n}\n```\n以后，直接运行下面的命令即可。\n```\n$ npm run changelog\n```\n\n# git commit中使用emoji\n\n## emoji规范格式\n**git commit** 时，提交信息遵循以下格式：\n```\n:emoji1: :emoji2: 主题\n\n提交信息主体\n\nRef <###>\n```\n\n初次提交示例：\n```\ngit commit -m \":tada: Initialize Repo\"\n```\n## emoji指南\n\n| emoji | emoji代码 | Commit说明 |\n|---|---|---|\n| 🎨 (调色板)| :art: | 改进代码结构/代码格式 |\n| ⚡️ (闪电) | :zap: | 提升性能 |\n| 🐎 (赛马) | :racehorse: | 提升性能 |\n|🔥 (火焰) | :fire: | 移除代码或文件 |\n| 🐛 (bug) | :bug: | 修复 bug |\n| 🚑 (急救车) | :ambulance: | 重要补丁 |\n| ✨ (火花) | :sparkles: | 引入新功能 |\n| 📝 (铅笔) | :pencil: | 撰写文档 | \n| 🚀 (火箭) | :rocket: | 部署功能 |\n| 💄 (口红) | :lipstick: | 更新 UI 和样式文件 |\n| 🎉 (庆祝) | :tada: | 初次提交 |\n| ✅ (白色复选框) | :white_check_mark: | 增加测试 |\n| 🔒 (锁) | :lock: | 修复安全问题 |\n| 🍎 (苹果) | :apple: | 修复 macOS 下的问题 |\n| 🐧 (企鹅) | :penguin: | 修复 Linux 下的问题 |\n| 🏁 (旗帜) | :checked_flag: | 修复 Windows 下的问题|\n| 🔖 (书签) | :bookmark: | 发行/版本标签 |\n| 🚨 (警车灯) | :rotating_light: | 移除 linter警告 |\n| 🚧 (施工) | :construction: | 工作进行中 |\n| 💚 (绿心) | :green_heart: | 修复 CI 构建问题 |\n| ⬇️ (下降箭头) | :arrow_down: | 降级依赖 |\n| ⬆️ (上升箭头) | :arrow_up: | 升级依赖 |\n| 👷 (工人) | :construction_worker: | 添加 CI 构建系统 |\n| 📈 (上升趋势图) | :chart_with_upwards_trend: | 添加分析或跟踪代码 |\n| 🔨 (锤子) | :hammer: | 重大重构 |\n| ➖ (减号) | :heavy_minus_sign: | 减少一个依赖 |\n| 🐳 (鲸鱼) | :whale: |  Docker 相关工作 |\n| ➕ (加号) | :heavy_plus_sign: | 增加一个依赖 |\n| 🔧 (扳手) | :wrench: | 修改配置文件 |\n| 🌐 (地球) | :globe_with_meridians: | 国际化与本地化 |\n| ✏️ (铅笔) | :pencil2: | 修复 typo |\n\n\n# 参考文献\n\n* [Commit message 和 Change log 编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)","slug":"Git commit 规范以及 emoji 列表","published":1,"updated":"2019-04-20T07:59:19.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus5nh9u0000ed106hjqgi3x","content":"<!-- # Git 版本规范 -->\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><ul>\n<li><strong>master</strong>分支为主分支（保护分支），不能直接在master上进行修改代码或提交,通过<strong>MR</strong>(merge Request)或者<strong>PR</strong>(pull Request)的方式进行提交。</li>\n<li><strong>preview</strong>分支为预发分支， 所有测试完成需要上线的功能合并到该分支</li>\n<li><strong>develop、 test</strong>分支为测试分支，所有开发完成需要提交测试的功能合并到该分支</li>\n<li><strong>feature/xxx</strong>分支为功能开发分支，根据不同需求创建独立的功能分支，开发完成后合并到develop或test分支</li>\n<li><strong>hotfix</strong>分支为bug修复分支，需要根据实际情况对已发布的版本进行漏洞修复</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h1><h2 id=\"采用三段式，v版本-里程碑-序号，例如v1-0-0\"><a href=\"#采用三段式，v版本-里程碑-序号，例如v1-0-0\" class=\"headerlink\" title=\"采用三段式，v版本.里程碑.序号，例如v1.0.0\"></a>采用三段式，v版本.里程碑.序号，例如<strong>v1.0.0</strong></h2><ul>\n<li>架构升级或架构重大调整，修改第1位</li>\n<li>新功能上线或者模块大的调整，修改第2位</li>\n<li>bug修复上线，修改第3位</li>\n</ul>\n<h1 id=\"Commit-message的格式\"><a href=\"#Commit-message的格式\" class=\"headerlink\" title=\"Commit message的格式\"></a>Commit message的格式</h1><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n<p>其中，Header 是必需的，Body 和 Footer 可以省略。<br>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>Header部分只有一行，包括三个字段：<strong>type</strong>（必需）、<strong>scope</strong>（可选）和<strong>subject</strong>（必需）。</p>\n<ol>\n<li>type<br><strong>type</strong>用于说明 commit 的类别，只允许使用下面7个标识。<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动<br>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</li>\n</ul>\n</li>\n<li>scope<br><strong>scope</strong>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li>\n<li>subject<br><strong>subject</strong>是 commit 目的的简短描述，不超过50个字符。</li>\n</ol>\n<ul>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>\n<li>第一个字母小写</li>\n<li>结尾不加句号（.）</li>\n</ul>\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure></p>\n<p>有两个注意点。<br>（1）使用第一人称现在时，比如使用<strong>change</strong>而不是<strong>changed</strong>或<strong>changes</strong>。<br>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h2 id=\"Footer\"><a href=\"#Footer\" class=\"headerlink\" title=\"Footer\"></a>Footer</h2><p>Footer 部分只用于两种情况。</p>\n<ol>\n<li><p>不兼容变动<br>如果当前代码与上一个版本不兼容，则 Footer 部分以<strong><em>BREAKING CHANGE</em></strong>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;attribute&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;@&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭 Issue<br>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Revert\"><a href=\"#Revert\" class=\"headerlink\" title=\"Revert\"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<strong>revert:</strong>开头，后面跟着被撤销 Commit 的 Header。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure></p>\n<p>Body部分的格式是固定的，必须写成<strong>This reverts commit &lt;hash&gt;.</strong>，其中的<strong>hash</strong>是被撤销 commit 的 SHA 标识符。</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<strong>Reverts</strong>小标题下面。</p>\n<h1 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen\"></a>Commitizen</h1><p><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">Commitizen</a>是一个撰写合格 Commit message 的工具。</p>\n<p>安装命令如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g commitizen</span><br></pre></td></tr></table></figure>\n<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>\n<p>以后，凡是用到<strong>git commit</strong>命令，一律改为使用<strong>git cz</strong>。这时，就会出现选项，用来生成符合格式的 Commit message。</p>\n<p><img src=\"/uploads/Git commit 规范以及 emoji 列表/terminal.png\" alt=\"terminal\"></p>\n<h1 id=\"validate-commit-msg\"><a href=\"#validate-commit-msg\" class=\"headerlink\" title=\"validate-commit-msg\"></a>validate-commit-msg</h1><p><a href=\"https://github.com/conventional-changelog-archived-repos/validate-commit-msg\" target=\"_blank\" rel=\"noopener\">validate-commit-msg</a> 用于检查 Node 项目的 Commit message 是否符合格式。</p>\n<p>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为<strong>validate-commit-msg.js</strong>。</p>\n<p>接着，把这个脚本加入 Git 的 hook。下面是在<strong>package.json</strong>里面使用 ghooks，把这个脚本加为<strong>commit-msg</strong>时运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;config&quot;: &#123;</span><br><span class=\"line\">  &quot;ghooks&quot;: &#123;</span><br><span class=\"line\">    &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，每次<strong>git commit</strong>的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -A </span><br><span class=\"line\">$ git commit -m &quot;edit markdown&quot; </span><br><span class=\"line\">INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成-Change-log\"><a href=\"#生成-Change-log\" class=\"headerlink\" title=\"生成 Change log\"></a>生成 Change log</h1><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成</p>\n<p>生成的文档包括以下三个部分。</p>\n<ul>\n<li>New features</li>\n<li>Bug fixes</li>\n<li>Breaking changes.</li>\n</ul>\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>\n<p><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener\">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g conventional-changelog</span><br><span class=\"line\">$ cd my-project</span><br><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>\n<p>上面命令不会覆盖以前的 Change log，只会在<strong>CHANGELOG.md</strong>的头部加上自从上次发布以来的变动。</p>\n<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>\n<p>为了方便使用，可以将其写入<strong>package.json</strong>的<strong>scripts</strong>字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后，直接运行下面的命令即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run changelog</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"git-commit中使用emoji\"><a href=\"#git-commit中使用emoji\" class=\"headerlink\" title=\"git commit中使用emoji\"></a>git commit中使用emoji</h1><h2 id=\"emoji规范格式\"><a href=\"#emoji规范格式\" class=\"headerlink\" title=\"emoji规范格式\"></a>emoji规范格式</h2><p><strong>git commit</strong> 时，提交信息遵循以下格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:emoji1: :emoji2: 主题</span><br><span class=\"line\"></span><br><span class=\"line\">提交信息主体</span><br><span class=\"line\"></span><br><span class=\"line\">Ref &lt;###&gt;</span><br></pre></td></tr></table></figure></p>\n<p>初次提交示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;:tada: Initialize Repo&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"emoji指南\"><a href=\"#emoji指南\" class=\"headerlink\" title=\"emoji指南\"></a>emoji指南</h2><table>\n<thead>\n<tr>\n<th>emoji</th>\n<th>emoji代码</th>\n<th>Commit说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🎨 (调色板)</td>\n<td>:art:</td>\n<td>改进代码结构/代码格式</td>\n</tr>\n<tr>\n<td>⚡️ (闪电)</td>\n<td>:zap:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🐎 (赛马)</td>\n<td>:racehorse:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🔥 (火焰)</td>\n<td>:fire:</td>\n<td>移除代码或文件</td>\n</tr>\n<tr>\n<td>🐛 (bug)</td>\n<td>:bug:</td>\n<td>修复 bug</td>\n</tr>\n<tr>\n<td>🚑 (急救车)</td>\n<td>:ambulance:</td>\n<td>重要补丁</td>\n</tr>\n<tr>\n<td>✨ (火花)</td>\n<td>:sparkles:</td>\n<td>引入新功能</td>\n</tr>\n<tr>\n<td>📝 (铅笔)</td>\n<td>:pencil:</td>\n<td>撰写文档</td>\n</tr>\n<tr>\n<td>🚀 (火箭)</td>\n<td>:rocket:</td>\n<td>部署功能</td>\n</tr>\n<tr>\n<td>💄 (口红)</td>\n<td>:lipstick:</td>\n<td>更新 UI 和样式文件</td>\n</tr>\n<tr>\n<td>🎉 (庆祝)</td>\n<td>:tada:</td>\n<td>初次提交</td>\n</tr>\n<tr>\n<td>✅ (白色复选框)</td>\n<td>:white_check_mark:</td>\n<td>增加测试</td>\n</tr>\n<tr>\n<td>🔒 (锁)</td>\n<td>:lock:</td>\n<td>修复安全问题</td>\n</tr>\n<tr>\n<td>🍎 (苹果)</td>\n<td>:apple:</td>\n<td>修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td>🐧 (企鹅)</td>\n<td>:penguin:</td>\n<td>修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td>🏁 (旗帜)</td>\n<td>:checked_flag:</td>\n<td>修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td>🔖 (书签)</td>\n<td>:bookmark:</td>\n<td>发行/版本标签</td>\n</tr>\n<tr>\n<td>🚨 (警车灯)</td>\n<td>:rotating_light:</td>\n<td>移除 linter警告</td>\n</tr>\n<tr>\n<td>🚧 (施工)</td>\n<td>:construction:</td>\n<td>工作进行中</td>\n</tr>\n<tr>\n<td>💚 (绿心)</td>\n<td>:green_heart:</td>\n<td>修复 CI 构建问题</td>\n</tr>\n<tr>\n<td>⬇️ (下降箭头)</td>\n<td>:arrow_down:</td>\n<td>降级依赖</td>\n</tr>\n<tr>\n<td>⬆️ (上升箭头)</td>\n<td>:arrow_up:</td>\n<td>升级依赖</td>\n</tr>\n<tr>\n<td>👷 (工人)</td>\n<td>:construction_worker:</td>\n<td>添加 CI 构建系统</td>\n</tr>\n<tr>\n<td>📈 (上升趋势图)</td>\n<td>:chart_with_upwards_trend:</td>\n<td>添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td>🔨 (锤子)</td>\n<td>:hammer:</td>\n<td>重大重构</td>\n</tr>\n<tr>\n<td>➖ (减号)</td>\n<td>:heavy_minus_sign:</td>\n<td>减少一个依赖</td>\n</tr>\n<tr>\n<td>🐳 (鲸鱼)</td>\n<td>:whale:</td>\n<td>Docker 相关工作</td>\n</tr>\n<tr>\n<td>➕ (加号)</td>\n<td>:heavy_plus_sign:</td>\n<td>增加一个依赖</td>\n</tr>\n<tr>\n<td>🔧 (扳手)</td>\n<td>:wrench:</td>\n<td>修改配置文件</td>\n</tr>\n<tr>\n<td>🌐 (地球)</td>\n<td>:globe_with_meridians:</td>\n<td>国际化与本地化</td>\n</tr>\n<tr>\n<td>✏️ (铅笔)</td>\n<td>:pencil2:</td>\n<td>修复 typo</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">Commit message 和 Change log 编写指南</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<!-- # Git 版本规范 -->\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><ul>\n<li><strong>master</strong>分支为主分支（保护分支），不能直接在master上进行修改代码或提交,通过<strong>MR</strong>(merge Request)或者<strong>PR</strong>(pull Request)的方式进行提交。</li>\n<li><strong>preview</strong>分支为预发分支， 所有测试完成需要上线的功能合并到该分支</li>\n<li><strong>develop、 test</strong>分支为测试分支，所有开发完成需要提交测试的功能合并到该分支</li>\n<li><strong>feature/xxx</strong>分支为功能开发分支，根据不同需求创建独立的功能分支，开发完成后合并到develop或test分支</li>\n<li><strong>hotfix</strong>分支为bug修复分支，需要根据实际情况对已发布的版本进行漏洞修复</li>\n</ul>","more":"<h1 id=\"Tag\"><a href=\"#Tag\" class=\"headerlink\" title=\"Tag\"></a>Tag</h1><h2 id=\"采用三段式，v版本-里程碑-序号，例如v1-0-0\"><a href=\"#采用三段式，v版本-里程碑-序号，例如v1-0-0\" class=\"headerlink\" title=\"采用三段式，v版本.里程碑.序号，例如v1.0.0\"></a>采用三段式，v版本.里程碑.序号，例如<strong>v1.0.0</strong></h2><ul>\n<li>架构升级或架构重大调整，修改第1位</li>\n<li>新功能上线或者模块大的调整，修改第2位</li>\n<li>bug修复上线，修改第3位</li>\n</ul>\n<h1 id=\"Commit-message的格式\"><a href=\"#Commit-message的格式\" class=\"headerlink\" title=\"Commit message的格式\"></a>Commit message的格式</h1><p>每次提交，Commit message 都包括三个部分：header，body 和 footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n<p>其中，Header 是必需的，Body 和 Footer 可以省略。<br>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>Header部分只有一行，包括三个字段：<strong>type</strong>（必需）、<strong>scope</strong>（可选）和<strong>subject</strong>（必需）。</p>\n<ol>\n<li>type<br><strong>type</strong>用于说明 commit 的类别，只允许使用下面7个标识。<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动<br>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</li>\n</ul>\n</li>\n<li>scope<br><strong>scope</strong>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li>\n<li>subject<br><strong>subject</strong>是 commit 目的的简短描述，不超过50个字符。</li>\n</ol>\n<ul>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>\n<li>第一个字母小写</li>\n<li>结尾不加句号（.）</li>\n</ul>\n<h2 id=\"Body\"><a href=\"#Body\" class=\"headerlink\" title=\"Body\"></a>Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class=\"line\">about 72 characters or so. </span><br><span class=\"line\"></span><br><span class=\"line\">Further paragraphs come after blank lines.</span><br><span class=\"line\"></span><br><span class=\"line\">- Bullet points are okay, too</span><br><span class=\"line\">- Use a hanging indent</span><br></pre></td></tr></table></figure></p>\n<p>有两个注意点。<br>（1）使用第一人称现在时，比如使用<strong>change</strong>而不是<strong>changed</strong>或<strong>changes</strong>。<br>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h2 id=\"Footer\"><a href=\"#Footer\" class=\"headerlink\" title=\"Footer\"></a>Footer</h2><p>Footer 部分只用于两种情况。</p>\n<ol>\n<li><p>不兼容变动<br>如果当前代码与上一个版本不兼容，则 Footer 部分以<strong><em>BREAKING CHANGE</em></strong>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class=\"line\">    To migrate the code follow the example below:</span><br><span class=\"line\"></span><br><span class=\"line\">    Before:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;attribute&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    After:</span><br><span class=\"line\"></span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      myAttr: &apos;@&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭 Issue<br>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Closes #234</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Revert\"><a href=\"#Revert\" class=\"headerlink\" title=\"Revert\"></a>Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<strong>revert:</strong>开头，后面跟着被撤销 Commit 的 Header。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure></p>\n<p>Body部分的格式是固定的，必须写成<strong>This reverts commit &lt;hash&gt;.</strong>，其中的<strong>hash</strong>是被撤销 commit 的 SHA 标识符。</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<strong>Reverts</strong>小标题下面。</p>\n<h1 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen\"></a>Commitizen</h1><p><a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"noopener\">Commitizen</a>是一个撰写合格 Commit message 的工具。</p>\n<p>安装命令如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g commitizen</span><br></pre></td></tr></table></figure>\n<p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ commitizen init cz-conventional-changelog --save --save-exact</span><br></pre></td></tr></table></figure>\n<p>以后，凡是用到<strong>git commit</strong>命令，一律改为使用<strong>git cz</strong>。这时，就会出现选项，用来生成符合格式的 Commit message。</p>\n<p><img src=\"/uploads/Git commit 规范以及 emoji 列表/terminal.png\" alt=\"terminal\"></p>\n<h1 id=\"validate-commit-msg\"><a href=\"#validate-commit-msg\" class=\"headerlink\" title=\"validate-commit-msg\"></a>validate-commit-msg</h1><p><a href=\"https://github.com/conventional-changelog-archived-repos/validate-commit-msg\" target=\"_blank\" rel=\"noopener\">validate-commit-msg</a> 用于检查 Node 项目的 Commit message 是否符合格式。</p>\n<p>它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为<strong>validate-commit-msg.js</strong>。</p>\n<p>接着，把这个脚本加入 Git 的 hook。下面是在<strong>package.json</strong>里面使用 ghooks，把这个脚本加为<strong>commit-msg</strong>时运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;config&quot;: &#123;</span><br><span class=\"line\">  &quot;ghooks&quot;: &#123;</span><br><span class=\"line\">    &quot;commit-msg&quot;: &quot;./validate-commit-msg.js&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，每次<strong>git commit</strong>的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -A </span><br><span class=\"line\">$ git commit -m &quot;edit markdown&quot; </span><br><span class=\"line\">INVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; ! was: edit markdown</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成-Change-log\"><a href=\"#生成-Change-log\" class=\"headerlink\" title=\"生成 Change log\"></a>生成 Change log</h1><p>如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成</p>\n<p>生成的文档包括以下三个部分。</p>\n<ul>\n<li>New features</li>\n<li>Bug fixes</li>\n<li>Breaking changes.</li>\n</ul>\n<p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p>\n<p><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener\">conventional-changelog</a> 就是生成 Change log 的工具，运行下面的命令即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g conventional-changelog</span><br><span class=\"line\">$ cd my-project</span><br><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w</span><br></pre></td></tr></table></figure>\n<p>上面命令不会覆盖以前的 Change log，只会在<strong>CHANGELOG.md</strong>的头部加上自从上次发布以来的变动。</p>\n<p>如果你想生成所有发布的 Change log，要改为运行下面的命令。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0</span><br></pre></td></tr></table></figure>\n<p>为了方便使用，可以将其写入<strong>package.json</strong>的<strong>scripts</strong>字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以后，直接运行下面的命令即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm run changelog</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"git-commit中使用emoji\"><a href=\"#git-commit中使用emoji\" class=\"headerlink\" title=\"git commit中使用emoji\"></a>git commit中使用emoji</h1><h2 id=\"emoji规范格式\"><a href=\"#emoji规范格式\" class=\"headerlink\" title=\"emoji规范格式\"></a>emoji规范格式</h2><p><strong>git commit</strong> 时，提交信息遵循以下格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:emoji1: :emoji2: 主题</span><br><span class=\"line\"></span><br><span class=\"line\">提交信息主体</span><br><span class=\"line\"></span><br><span class=\"line\">Ref &lt;###&gt;</span><br></pre></td></tr></table></figure></p>\n<p>初次提交示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;:tada: Initialize Repo&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"emoji指南\"><a href=\"#emoji指南\" class=\"headerlink\" title=\"emoji指南\"></a>emoji指南</h2><table>\n<thead>\n<tr>\n<th>emoji</th>\n<th>emoji代码</th>\n<th>Commit说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🎨 (调色板)</td>\n<td>:art:</td>\n<td>改进代码结构/代码格式</td>\n</tr>\n<tr>\n<td>⚡️ (闪电)</td>\n<td>:zap:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🐎 (赛马)</td>\n<td>:racehorse:</td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🔥 (火焰)</td>\n<td>:fire:</td>\n<td>移除代码或文件</td>\n</tr>\n<tr>\n<td>🐛 (bug)</td>\n<td>:bug:</td>\n<td>修复 bug</td>\n</tr>\n<tr>\n<td>🚑 (急救车)</td>\n<td>:ambulance:</td>\n<td>重要补丁</td>\n</tr>\n<tr>\n<td>✨ (火花)</td>\n<td>:sparkles:</td>\n<td>引入新功能</td>\n</tr>\n<tr>\n<td>📝 (铅笔)</td>\n<td>:pencil:</td>\n<td>撰写文档</td>\n</tr>\n<tr>\n<td>🚀 (火箭)</td>\n<td>:rocket:</td>\n<td>部署功能</td>\n</tr>\n<tr>\n<td>💄 (口红)</td>\n<td>:lipstick:</td>\n<td>更新 UI 和样式文件</td>\n</tr>\n<tr>\n<td>🎉 (庆祝)</td>\n<td>:tada:</td>\n<td>初次提交</td>\n</tr>\n<tr>\n<td>✅ (白色复选框)</td>\n<td>:white_check_mark:</td>\n<td>增加测试</td>\n</tr>\n<tr>\n<td>🔒 (锁)</td>\n<td>:lock:</td>\n<td>修复安全问题</td>\n</tr>\n<tr>\n<td>🍎 (苹果)</td>\n<td>:apple:</td>\n<td>修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td>🐧 (企鹅)</td>\n<td>:penguin:</td>\n<td>修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td>🏁 (旗帜)</td>\n<td>:checked_flag:</td>\n<td>修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td>🔖 (书签)</td>\n<td>:bookmark:</td>\n<td>发行/版本标签</td>\n</tr>\n<tr>\n<td>🚨 (警车灯)</td>\n<td>:rotating_light:</td>\n<td>移除 linter警告</td>\n</tr>\n<tr>\n<td>🚧 (施工)</td>\n<td>:construction:</td>\n<td>工作进行中</td>\n</tr>\n<tr>\n<td>💚 (绿心)</td>\n<td>:green_heart:</td>\n<td>修复 CI 构建问题</td>\n</tr>\n<tr>\n<td>⬇️ (下降箭头)</td>\n<td>:arrow_down:</td>\n<td>降级依赖</td>\n</tr>\n<tr>\n<td>⬆️ (上升箭头)</td>\n<td>:arrow_up:</td>\n<td>升级依赖</td>\n</tr>\n<tr>\n<td>👷 (工人)</td>\n<td>:construction_worker:</td>\n<td>添加 CI 构建系统</td>\n</tr>\n<tr>\n<td>📈 (上升趋势图)</td>\n<td>:chart_with_upwards_trend:</td>\n<td>添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td>🔨 (锤子)</td>\n<td>:hammer:</td>\n<td>重大重构</td>\n</tr>\n<tr>\n<td>➖ (减号)</td>\n<td>:heavy_minus_sign:</td>\n<td>减少一个依赖</td>\n</tr>\n<tr>\n<td>🐳 (鲸鱼)</td>\n<td>:whale:</td>\n<td>Docker 相关工作</td>\n</tr>\n<tr>\n<td>➕ (加号)</td>\n<td>:heavy_plus_sign:</td>\n<td>增加一个依赖</td>\n</tr>\n<tr>\n<td>🔧 (扳手)</td>\n<td>:wrench:</td>\n<td>修改配置文件</td>\n</tr>\n<tr>\n<td>🌐 (地球)</td>\n<td>:globe_with_meridians:</td>\n<td>国际化与本地化</td>\n</tr>\n<tr>\n<td>✏️ (铅笔)</td>\n<td>:pencil2:</td>\n<td>修复 typo</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">Commit message 和 Change log 编写指南</a></li>\n</ul>"},{"title":"mini-program-met","date":"2018-11-22T06:32:37.000Z","_content":"","source":"_posts/mini-program-met.md","raw":"---\ntitle: mini-program-met\ndate: 2018-11-22 14:32:37\ntags: [git,实战经验] \ncategories: 小程序\n---\n","slug":"mini-program-met","published":1,"updated":"2018-11-29T10:02:10.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus5nha10002ed10necrew5e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"git高级用法——git cherry-pick","date":"2019-04-20T07:47:12.000Z","_content":"\n# 前言\n\n最近正巧看了一些面试题，其中有一道令我比较好奇，也就是我们今天要说到的**git cherry-pick**;我们在简历当中都会写上精通或者熟练掌握git工作技巧。但绝大多数人也许只掌握一些简单的类似**git status | pull | push | log**等操作,又或是使用**sourcetree**等一些辅助工具来支持我们日常的工作需求，这篇博客主要记录和**git cherry-pick**与之相关的git操作。\n\n<!-- more -->\n\n# 使用场景及其作用\n\ngit cherry-pick可以选择某一个分支的一个或几个commit(s)来进行操作（操作的对象就是commit）。假设这样一个场景，产品提出某个功能需求，你开发完毕，然后commit了；第二天，产品通知你那个功能可能不要了，于是你把代码reset回去；又过了几天，产品告诉你说，之前reset的功能我们要重新加回来；这时候应该怎么办？代码在reset之后又进行开发了其他的功能，已经修改过并且有了新的commit，你是应该重新开发还是回退呢？\n\n这种时候就是git cherry-pick发挥效果的时候了。\n\n## git log\n\n查询commit id 的查询可以使用git log查询（查询版本的历史），最简单的语法就是\n```\ngit log\n```\n\n详细的git log语法如下: \n```\n  git log [<options>] [<since>..<until>] [[--] <path>...]\n    主要参数选项如下：\n      -p：按补丁显示每个更新间的差异\n      --stat：显示每次更新的修改文件的统计信息\n      --shortstat：只显示--stat中最后的行数添加修改删除统计\n      --name-only：尽在已修改的提交信息后显示文件清单\n      --name-status：显示新增、修改和删除的文件清单\n      --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符\n      --relative-date：使用较短的相对时间显示（例如：\"two weeks ago\"）\n      --graph：显示ASCII图形表示的分支合并历史\n      --pretty：使用其他格式显示历史提交信息\n```\n\n## git reflog\n\ngit reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）\n\n## 场景\n首先我们通过**git log**查看所有的commit信息。\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog1.png)\n\ncommit的信息很简单，就是做了3个功能开发，每个功能对应一个commit的提交，分别是feature-1 => feature-4。假设这时候可能产品说功能2、3、4不需要上线了。我们需要将代码回滚到1上面。\n\n```\ngit reset --hard dbe570bf1bf9c5f5777b39b242f90e3eb16a1aec\n```\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog2.png)\n\n现在我们看到我们的commit信息只剩下了最开始的feature-1功能还保留在上面了；此时产品需要我们上线一个称之为功能5的commit,一个星期后产品需要我们把之前的2、3、4重新合并到代码里头上线；这时候我们需要怎么做呢？\n\n首先我们可以看到现在的git log打印出来的信息是只有feature-1和feature-5提交的代码\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog3.png)\n\n这时候我们首先通过**git reflog**命令查看分支上的所有操作记录\n\n![](/uploads/git高级用法——git-cherry-pick/gitreflog1.png)\n\n这时候要记好两个值：c8f4403和45ec9b1，他们分别是feature-5和feature-4的hash码。然后执行回滚，回到feature-4上。\n\n```\ngit reset --hard 45ec9b1\n```\n现在我们回到了feature-4上，如下图\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog4.png)\n\n但是我们现在feature-5的代码丢失了，如何将它找回来呢？这时候就需要我们的git cherry-pick。刚刚我们知道git cherry-pick的hash码为c8f4403\n\n```\ngit cherry-pick c8f4403\n```\n输入好了之后feature-5的代码就找回来了。 期间可能会产生一些代码的冲突，只需要按正在的步骤解决就好了。 最后的结果如下图\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog4.png)\n\n到这里feature-1到feature-5的代码就找回来了。这就是git cherry-pick的用法。\n\n\n# 参考链接\n* [女神的侧颜---git时光穿梭机](https://github.com/airuikun/blog/issues/5)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/git高级用法——git-cherry-pick.md","raw":"---\ntitle: git高级用法——git cherry-pick\ndate: 2019-04-20 15:47:12\ntags: [git,实战经验] \ncategories: git\n---\n\n# 前言\n\n最近正巧看了一些面试题，其中有一道令我比较好奇，也就是我们今天要说到的**git cherry-pick**;我们在简历当中都会写上精通或者熟练掌握git工作技巧。但绝大多数人也许只掌握一些简单的类似**git status | pull | push | log**等操作,又或是使用**sourcetree**等一些辅助工具来支持我们日常的工作需求，这篇博客主要记录和**git cherry-pick**与之相关的git操作。\n\n<!-- more -->\n\n# 使用场景及其作用\n\ngit cherry-pick可以选择某一个分支的一个或几个commit(s)来进行操作（操作的对象就是commit）。假设这样一个场景，产品提出某个功能需求，你开发完毕，然后commit了；第二天，产品通知你那个功能可能不要了，于是你把代码reset回去；又过了几天，产品告诉你说，之前reset的功能我们要重新加回来；这时候应该怎么办？代码在reset之后又进行开发了其他的功能，已经修改过并且有了新的commit，你是应该重新开发还是回退呢？\n\n这种时候就是git cherry-pick发挥效果的时候了。\n\n## git log\n\n查询commit id 的查询可以使用git log查询（查询版本的历史），最简单的语法就是\n```\ngit log\n```\n\n详细的git log语法如下: \n```\n  git log [<options>] [<since>..<until>] [[--] <path>...]\n    主要参数选项如下：\n      -p：按补丁显示每个更新间的差异\n      --stat：显示每次更新的修改文件的统计信息\n      --shortstat：只显示--stat中最后的行数添加修改删除统计\n      --name-only：尽在已修改的提交信息后显示文件清单\n      --name-status：显示新增、修改和删除的文件清单\n      --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符\n      --relative-date：使用较短的相对时间显示（例如：\"two weeks ago\"）\n      --graph：显示ASCII图形表示的分支合并历史\n      --pretty：使用其他格式显示历史提交信息\n```\n\n## git reflog\n\ngit reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）\n\n## 场景\n首先我们通过**git log**查看所有的commit信息。\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog1.png)\n\ncommit的信息很简单，就是做了3个功能开发，每个功能对应一个commit的提交，分别是feature-1 => feature-4。假设这时候可能产品说功能2、3、4不需要上线了。我们需要将代码回滚到1上面。\n\n```\ngit reset --hard dbe570bf1bf9c5f5777b39b242f90e3eb16a1aec\n```\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog2.png)\n\n现在我们看到我们的commit信息只剩下了最开始的feature-1功能还保留在上面了；此时产品需要我们上线一个称之为功能5的commit,一个星期后产品需要我们把之前的2、3、4重新合并到代码里头上线；这时候我们需要怎么做呢？\n\n首先我们可以看到现在的git log打印出来的信息是只有feature-1和feature-5提交的代码\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog3.png)\n\n这时候我们首先通过**git reflog**命令查看分支上的所有操作记录\n\n![](/uploads/git高级用法——git-cherry-pick/gitreflog1.png)\n\n这时候要记好两个值：c8f4403和45ec9b1，他们分别是feature-5和feature-4的hash码。然后执行回滚，回到feature-4上。\n\n```\ngit reset --hard 45ec9b1\n```\n现在我们回到了feature-4上，如下图\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog4.png)\n\n但是我们现在feature-5的代码丢失了，如何将它找回来呢？这时候就需要我们的git cherry-pick。刚刚我们知道git cherry-pick的hash码为c8f4403\n\n```\ngit cherry-pick c8f4403\n```\n输入好了之后feature-5的代码就找回来了。 期间可能会产生一些代码的冲突，只需要按正在的步骤解决就好了。 最后的结果如下图\n\n![](/uploads/git高级用法——git-cherry-pick/gitlog4.png)\n\n到这里feature-1到feature-5的代码就找回来了。这就是git cherry-pick的用法。\n\n\n# 参考链接\n* [女神的侧颜---git时光穿梭机](https://github.com/airuikun/blog/issues/5)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"git高级用法——git-cherry-pick","published":1,"updated":"2019-04-22T10:56:55.472Z","_id":"cjus5nhaa0006ed1000t2itv0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近正巧看了一些面试题，其中有一道令我比较好奇，也就是我们今天要说到的<strong>git cherry-pick</strong>;我们在简历当中都会写上精通或者熟练掌握git工作技巧。但绝大多数人也许只掌握一些简单的类似<strong>git status | pull | push | log</strong>等操作,又或是使用<strong>sourcetree</strong>等一些辅助工具来支持我们日常的工作需求，这篇博客主要记录和<strong>git cherry-pick</strong>与之相关的git操作。</p>\n<a id=\"more\"></a>\n<h1 id=\"使用场景及其作用\"><a href=\"#使用场景及其作用\" class=\"headerlink\" title=\"使用场景及其作用\"></a>使用场景及其作用</h1><p>git cherry-pick可以选择某一个分支的一个或几个commit(s)来进行操作（操作的对象就是commit）。假设这样一个场景，产品提出某个功能需求，你开发完毕，然后commit了；第二天，产品通知你那个功能可能不要了，于是你把代码reset回去；又过了几天，产品告诉你说，之前reset的功能我们要重新加回来；这时候应该怎么办？代码在reset之后又进行开发了其他的功能，已经修改过并且有了新的commit，你是应该重新开发还是回退呢？</p>\n<p>这种时候就是git cherry-pick发挥效果的时候了。</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p>查询commit id 的查询可以使用git log查询（查询版本的历史），最简单的语法就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure></p>\n<p>详细的git log语法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log [&lt;options&gt;] [&lt;since&gt;..&lt;until&gt;] [[--] &lt;path&gt;...]</span><br><span class=\"line\">  主要参数选项如下：</span><br><span class=\"line\">    -p：按补丁显示每个更新间的差异</span><br><span class=\"line\">    --stat：显示每次更新的修改文件的统计信息</span><br><span class=\"line\">    --shortstat：只显示--stat中最后的行数添加修改删除统计</span><br><span class=\"line\">    --name-only：尽在已修改的提交信息后显示文件清单</span><br><span class=\"line\">    --name-status：显示新增、修改和删除的文件清单</span><br><span class=\"line\">    --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符</span><br><span class=\"line\">    --relative-date：使用较短的相对时间显示（例如：&quot;two weeks ago&quot;）</span><br><span class=\"line\">    --graph：显示ASCII图形表示的分支合并历史</span><br><span class=\"line\">    --pretty：使用其他格式显示历史提交信息</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>首先我们通过<strong>git log</strong>查看所有的commit信息。</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog1.png\" alt=\"\"></p>\n<p>commit的信息很简单，就是做了3个功能开发，每个功能对应一个commit的提交，分别是feature-1 =&gt; feature-4。假设这时候可能产品说功能2、3、4不需要上线了。我们需要将代码回滚到1上面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard dbe570bf1bf9c5f5777b39b242f90e3eb16a1aec</span><br></pre></td></tr></table></figure>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog2.png\" alt=\"\"></p>\n<p>现在我们看到我们的commit信息只剩下了最开始的feature-1功能还保留在上面了；此时产品需要我们上线一个称之为功能5的commit,一个星期后产品需要我们把之前的2、3、4重新合并到代码里头上线；这时候我们需要怎么做呢？</p>\n<p>首先我们可以看到现在的git log打印出来的信息是只有feature-1和feature-5提交的代码</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog3.png\" alt=\"\"></p>\n<p>这时候我们首先通过<strong>git reflog</strong>命令查看分支上的所有操作记录</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitreflog1.png\" alt=\"\"></p>\n<p>这时候要记好两个值：c8f4403和45ec9b1，他们分别是feature-5和feature-4的hash码。然后执行回滚，回到feature-4上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 45ec9b1</span><br></pre></td></tr></table></figure>\n<p>现在我们回到了feature-4上，如下图</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog4.png\" alt=\"\"></p>\n<p>但是我们现在feature-5的代码丢失了，如何将它找回来呢？这时候就需要我们的git cherry-pick。刚刚我们知道git cherry-pick的hash码为c8f4403</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick c8f4403</span><br></pre></td></tr></table></figure>\n<p>输入好了之后feature-5的代码就找回来了。 期间可能会产生一些代码的冲突，只需要按正在的步骤解决就好了。 最后的结果如下图</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog4.png\" alt=\"\"></p>\n<p>到这里feature-1到feature-5的代码就找回来了。这就是git cherry-pick的用法。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://github.com/airuikun/blog/issues/5\" target=\"_blank\" rel=\"noopener\">女神的侧颜—git时光穿梭机</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近正巧看了一些面试题，其中有一道令我比较好奇，也就是我们今天要说到的<strong>git cherry-pick</strong>;我们在简历当中都会写上精通或者熟练掌握git工作技巧。但绝大多数人也许只掌握一些简单的类似<strong>git status | pull | push | log</strong>等操作,又或是使用<strong>sourcetree</strong>等一些辅助工具来支持我们日常的工作需求，这篇博客主要记录和<strong>git cherry-pick</strong>与之相关的git操作。</p>","more":"<h1 id=\"使用场景及其作用\"><a href=\"#使用场景及其作用\" class=\"headerlink\" title=\"使用场景及其作用\"></a>使用场景及其作用</h1><p>git cherry-pick可以选择某一个分支的一个或几个commit(s)来进行操作（操作的对象就是commit）。假设这样一个场景，产品提出某个功能需求，你开发完毕，然后commit了；第二天，产品通知你那个功能可能不要了，于是你把代码reset回去；又过了几天，产品告诉你说，之前reset的功能我们要重新加回来；这时候应该怎么办？代码在reset之后又进行开发了其他的功能，已经修改过并且有了新的commit，你是应该重新开发还是回退呢？</p>\n<p>这种时候就是git cherry-pick发挥效果的时候了。</p>\n<h2 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h2><p>查询commit id 的查询可以使用git log查询（查询版本的历史），最简单的语法就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure></p>\n<p>详细的git log语法如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log [&lt;options&gt;] [&lt;since&gt;..&lt;until&gt;] [[--] &lt;path&gt;...]</span><br><span class=\"line\">  主要参数选项如下：</span><br><span class=\"line\">    -p：按补丁显示每个更新间的差异</span><br><span class=\"line\">    --stat：显示每次更新的修改文件的统计信息</span><br><span class=\"line\">    --shortstat：只显示--stat中最后的行数添加修改删除统计</span><br><span class=\"line\">    --name-only：尽在已修改的提交信息后显示文件清单</span><br><span class=\"line\">    --name-status：显示新增、修改和删除的文件清单</span><br><span class=\"line\">    --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符</span><br><span class=\"line\">    --relative-date：使用较短的相对时间显示（例如：&quot;two weeks ago&quot;）</span><br><span class=\"line\">    --graph：显示ASCII图形表示的分支合并历史</span><br><span class=\"line\">    --pretty：使用其他格式显示历史提交信息</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"git reflog\"></a>git reflog</h2><p>git reflog 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>首先我们通过<strong>git log</strong>查看所有的commit信息。</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog1.png\" alt=\"\"></p>\n<p>commit的信息很简单，就是做了3个功能开发，每个功能对应一个commit的提交，分别是feature-1 =&gt; feature-4。假设这时候可能产品说功能2、3、4不需要上线了。我们需要将代码回滚到1上面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard dbe570bf1bf9c5f5777b39b242f90e3eb16a1aec</span><br></pre></td></tr></table></figure>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog2.png\" alt=\"\"></p>\n<p>现在我们看到我们的commit信息只剩下了最开始的feature-1功能还保留在上面了；此时产品需要我们上线一个称之为功能5的commit,一个星期后产品需要我们把之前的2、3、4重新合并到代码里头上线；这时候我们需要怎么做呢？</p>\n<p>首先我们可以看到现在的git log打印出来的信息是只有feature-1和feature-5提交的代码</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog3.png\" alt=\"\"></p>\n<p>这时候我们首先通过<strong>git reflog</strong>命令查看分支上的所有操作记录</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitreflog1.png\" alt=\"\"></p>\n<p>这时候要记好两个值：c8f4403和45ec9b1，他们分别是feature-5和feature-4的hash码。然后执行回滚，回到feature-4上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 45ec9b1</span><br></pre></td></tr></table></figure>\n<p>现在我们回到了feature-4上，如下图</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog4.png\" alt=\"\"></p>\n<p>但是我们现在feature-5的代码丢失了，如何将它找回来呢？这时候就需要我们的git cherry-pick。刚刚我们知道git cherry-pick的hash码为c8f4403</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick c8f4403</span><br></pre></td></tr></table></figure>\n<p>输入好了之后feature-5的代码就找回来了。 期间可能会产生一些代码的冲突，只需要按正在的步骤解决就好了。 最后的结果如下图</p>\n<p><img src=\"/uploads/git高级用法——git-cherry-pick/gitlog4.png\" alt=\"\"></p>\n<p>到这里feature-1到feature-5的代码就找回来了。这就是git cherry-pick的用法。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://github.com/airuikun/blog/issues/5\" target=\"_blank\" rel=\"noopener\">女神的侧颜—git时光穿梭机</a></li>\n</ul>"},{"title":"Weex常见问题解析","date":"2019-03-29T05:56:07.000Z","_content":"\n# 什么是 Weex？\n>Weex 是使用流行的 Web 开发体验来开发高性能原生应用的框架。\n\n<!-- more -->\n\nWeex 致力于使开发者能基于通用跨平台的 Web 开发语言和开发经验，来构建 Android、ios 和 Web 应用。简单来说，在集成了 WeexSDK 之后，你可以使用 JavaScript 语言和前端开发经验来开发移动应用。\n\nWeex 渲染引擎与 DSL 语法层是分开的，Weex 并不强依赖任何特定的前端框架。目前 Vue.js 和 Rax 这两个前端框架被广泛应用于 Weex 页面开发，同时 Weex 也对这两个前端框架提供了最完善的支持。Weex 的另一个主要目标是跟进流行的 Web 开发技术并将其和原生开发的技术结合，实现开发效率和运行性能的高度统一。在开发阶段，一个 Weex 页面就像开发普通网页一样；在运行时，Weex 页面又充分利用了各种操作系统的原生组件和能力。\n\n# 为什么选择 Weex？\n\n## Weex带给我们的收益\n* 迭代速度快，快速上线\n* Weex环境下完全Native体验\n* Bundle资源大小对比H5小很多\n* 富交互体验，长列表性能好\n* 上手快且简单、一次编写三段兼容\n\n||H5|WEEX|Native|\n|---|---|---|---|\n|开发成本|低|中|高|\n|维护更新|简单|简单|复杂|\n|用户体验|差|优|优|\n|发版审核|不需要|不需要|需要|\n|跨平台性|优|优|差|\n\n# Weex开发踩坑\n\n## 通用样式\n\n### 1、图片\n1、Weex提供了image组件,但只支持远程图片链接(在新weex sdk 已经解决)。图片必须添加宽、高属性否则会不显示出来。\n2、避免在image标签上使用v-for，否则会导致安卓上图片渲染异常（如slider中的图片）\n```\n  <slider class=\"activity\" :autoPlay=\"true\" interval=\"4000\" @change=\"sliderChange\">\n    <div class=\"activity-cell\"\n      v-for=\"(item, index) in bannerList\" :key=\"index\"\n      @click=\"clickInBanner(item)\">\n      <image class=\"activity-wrap-bg\" resize=\"cover\" :src=\"imageRes.bannerBgImg\"></image>\n      <image class=\"activity-wrap-image\" :src=\"item.pictureUrl\"></image>\n    </div>\n  </slider>\n```\n### 2、border\nWeex不支持使用border创建三角形，web可以正常显示，而ios和android上显示的是矩形，建议使用图片代替\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/triangle.jpg\" width=\"100\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/rectangular.jpg\" width=\"100\">ios、android</center></td></tr></table>\n\n### 3、scale设置为0问题\ntransform: scale(0)会导致文档流内所有事件扩散到整个html结构，导致文档流事件全部无效。只有脱离文档流的元素（absolute等）可以点击；常用可以设置transform: scale(0,1)，并使元素隐藏起来。\n\n### 4、input标签高度问题\n安卓环境中，当input高度设置小于60px时，会导致输入框光标不会显示出来。（ios、web正常）\n\n### 5、v-if问题\n在做一些操作切换状态时（如按钮点击置灰），应尽量避免使用v-if，使用v-if会闪，且部分安卓机子会发生不可描述的事情（如部分三星机型会出现按钮文字居顶），可采用添加class的方式\n\n### 6、透明度\n目前仅ios支持box-shadow属性，android暂不支持，可以使用图片代替。每个元素只支持设置一个阴影效果，不支持多个阴影同时作用于一个元素。and在日常开发中阴影最好使用图片来代替，避免出现未知的问题。以下是涉及到颜色的相关属性对透明度的支持度列表\n\n|属性|IOS|Android|H5|\n|---|---|---|---|\n|color|支持|支持|支持|\n|opacity|支持|支持|支持|\n|border-color|支持|支持|支持|\n|box-shadow|支持|不支持|支持|\n|background-color|支持|支持|支持|\n|background-image|不支持|支持|支持|\n\n### 7、Weex不支持样式简写\n```\n  .border {\n    margin: 0 10px; // 错误\n    margin-right: 10px;\n    margin-left: 10px; // 正确\n    border: 1px solid #000; // 错误\n    border-width: 1px;\n    border-style: solid;\n    border-color: #000; // 正确\n  }\n```\n### 8、 点击态\n项目比较常见的点击态多半是透明度的变化，如按钮、列表、链接等，css的做法是添加伪类 (:active)，Weex中也同样支持，但是Weex需要在原样式中添加 opacity:1,否则点击后回不到初始状态；此外，:active使用时,background-image在ios下会失效。\n```\n<template>\n  <div class=\"btn\">\n    <text>下载</text>\n  </div>\n</template>\n<style scoped>\n  .btn {\n    opacity: 1; // 必须添加\n  }\n  .btn:active {\n    opacity: 0.5;\n  }\n</style>\n```\n\n### 9、 文本截断\n文本从限制一行到不限制可以使用lines:0来控制;\n```\n<template>\n  <text class=\"text\" @click=\"onClickText\" :style=\"textStyle\">\n    这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，\n  </text>\n</template>\n<style scoped>\n.text {\n  text-overflow: ellipsis;\n  lines: 1;\n}\n</style>\n<script>\n export default {\n   data () {\n     return {\n       textStyle: {},\n     };\n   },\n   methods: {\n     onClickText() {\n       this.textStyle = {\n         lines: 0,\n       };\n     },\n   },\n }\n</script>\n```\n\n### 10、html顺序在不同设备上的显示\n例如有a、b、c、d 四层结构，其中a、b、c均为absolute定位,z-index由大到小，d为普通结构，我们知道在css中a层应该是处于最上方，d在最下方，那么在weex中表现如何呢？\n```\n<template>\n  <div>\n    <div>A(绿)</div> \n    <div>B(蓝)</div>\n    <div>C(紫)</div>\n    <div>D(红)</div>\n  </div>\n</template>\n```\n\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/web.png\" width=\"200\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/native.png\" width=\"200\">ios、android</center></td></tr></table>\n\n可以看到web和ios、android的表现不一致，ios、android中是以代码中dom顺序来依次添加的，和z-index无关，后面加载的视图会覆盖前面的视图。\n所以要保证web、ios、android三端表现一致，改变dom书写顺序即可。\n\n```\n<template>\n  <div>\n    <div>D(红)</div>\n    <div>C(紫)</div>\n    <div>B(蓝)</div>\n    <div>A(绿)</div> \n  </div>\n</template>\n```\n\n### 11、安卓下遮挡问题\n安卓下容器如果设置了宽高，那么子元素不能超出容器范围\n\n### 12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\n微信环境输入框收起会改变页面dom结构布局，可以采取捕获失去焦点事件， 执行window.scrollTo(0, 0);\n\n### 13、微信环境下超过一屏的长图在加载时渲染不出来\n可以对图片的父容器（scroller、 list）设置一个背景颜色，即可成功加载。\n\n### 14、渐变\nweex不支持径向渐变radial-gradient,只支持创建线性渐变。并且只支持两种颜色的渐变，渐变方向如下：\n* to right: 从左向右渐变\n* to left: 从右向左渐变\n* to bottom: 从上向下渐变\n* to top: 从下向上渐变\n* to bottom right: 从左上角向右下角渐变\n* to top left: 从右下角向左上角渐变\n\n> **注意**\n> * background-image优先级高于background-color，这意味着同时设置background-image和background-color,后者会被覆盖。\n> * background不支持简写。\n\n### 15、富文本\nweex在0.20版本添加一个新的标签richtext即富文本标签。但在之前的版本内weex是不支持富文本功能的，基本富文本功能都是使用图片来代表，因为weex的字体标签只有text，并且都是weex所有的标签结构都是弹性布局；但是weex也提供了一个方案，即在weex中空格也是占据一定空间的，所以可以支持一些特定的富文本功能。\n\n\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/richtext.png\" width=\"400\">富文本</center></td><td style=\"border:0;\"></td></tr></table>\n\n```\n<template>\n  <div>\n    <image class=\"tag-image\" :src=\"data.userType | typeImg\" :style=\"{ top: `${getEnvValue(17,18,13)}px`}\"></image>\n    <text class=\"item-title\">{{'      ' + getEnvValue('  ','',' ')+ data.title}}</text>\n  </div>\n</template>\n<script>\nexport default {\n  methods: {\n    // 根据环境不同返回不同的三个值\n    getEnvValue(webValue, iOSValue, androidValue) {\n      if (this.isWeb) {\n        return webValue;\n      } else if (this.isIos) {\n        return iOSValue;\n      } else if (this.isAndroid) {\n        return androidValue;\n      }\n      return iOSValue;\n    },\n  }\n}\n</script>\n```\n\n## 输入事件\n\n### 1、输入框不能清空内容\n需要清空输入框内已经输入的内容时，不能直接将绑定的值置为空，而是应该先隐藏输入框内显示的值，在一次渲染之后将在将值置为空。\n```\n<template>\n  <div class=\"input-wrap\">\n    <wxs-icon name=\"search\" size='40px' color='#b2b2b2'></wxs-icon>\n    <input\n      :value=\"searchKeyWord\"\n      returnKeyType=\"search\"\n      @focus=\"onInputFocus\"\n      @blur=\"onInputBlur\"\n      @input=\"onInputInput\"\n      @return=\"onInputReturn\"\n      class=\"input-hint\"\n      ref=\"input\"\n      placeholder-color=\"#cccccc\"\n      :singleline=\"true\"\n      :lines=\"1\" />\n    <div class=\"erase\" @click=\"onClickErase\">\n      <wxs-icon v-if=\"isInputFocus || isWeb\" name=\"erase\" size='36px' color='#b2b2b2' ></wxs-icon>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      searchKeyWord: '',\n    };\n  },\n  methods: {\n    onClickErase() {\n      this.searchKeyWord = ' ';\n      this.$nextTick(() => {\n        this.searchKeyWord = '';\n      });\n    },\n  }\n}\n</script>\n```\n\n### 2、Weex input输入框组件 在安卓下input事件BUG\n\n当使用v-model绑定值时，还原到绑定值原始状态时，无法触发input事件，此时还影响到v-model的绑定。在android上的表现为对输入框的input事件进行监听；打开页面选中输入框，对输入框输入一串文字，此时成功的触发了input事件。按键盘上的删除，最初也是成功的触发input事件，当最后一个字符被删除时，input事件并不会触发。如果不使用value来设置值，改使用v-model，也会出现这样的情况。通过查阅资料，发现这个是weex android sdk存在的一个坑点（作者没太接触过安卓开发）[https://segmentfault.com/q/1010000010238162/a-1020000010276364](https://segmentfault.com/q/1010000010238162/a-1020000010276364)里面给出了一张修改源码的方式来解决该BUG。主要问题是在WXInput的父类AbstractEditComponent类中, mIgnoreNextOnInputEvent 这个变量在组件初始化的时候被设置为了TRUE，导致了第一次输入input内容显示不出来。使用上一个问题的方法也可以成功的解决该问题，也可以将searchKeyWord的初始值置为undefined也可以很好的规避该问题。\n\n## 组件\n\n### 命令\n组件命名应避免使用JS关键字和保留字，以及weex提供的组件名称，如用loading作为组件名称，在ios与android中将呈现空白。\n\n```\n<template>\n  <div>\n    <Loading></Loading> /* 改用其他名称 */\n  </div>\n</template>\n```\n\n### 自定义slider组件\nweex本身提供了slider组件，但轮播图指示器（indicator）只能修改颜色与位置，大小却无法更改，所以需要自定义slider组件\n```\n<template>\n  <!-- 首页banner区块 -->\n  <div class=\"activity-wrap\" :style=\"{ top: (topSafeAreaHeight + 123) + 'px' }\">\n    <slider class=\"activity\" :autoPlay=\"true\" interval=\"4000\" @change=\"sliderChange\">\n      <div class=\"activity-cell\"\n        v-for=\"(item, index) in bannerList\" :key=\"index\"\n        @click=\"clickInBanner(item)\">\n        <image class=\"activity-wrap-bg\" resize=\"cover\" :src=\"imageRes.bannerBgImg\"></image>\n        <image class=\"activity-wrap-image\" :src=\"item.pictureUrl\"></image>\n      </div>\n    </slider>\n    <div class=\"slider-indicator-wrap\" v-if=\"bannerList && bannerList.length > 1\">\n      <div\n        v-for=\"(icon, index) in bannerList\"\n        :key=\"index\"\n        ref=\"activeSliderKey\"\n        class=\"slider-indicator\"\n        :class=\"[index === 0 ? 'slider-indicator-left' : '']\"\n      ></div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  ...,\n  methods: {\n    // 首页banner切换回调\n    sliderChange({ index }) {\n      const self = this;\n      if (self.bannerList.length > 0) {\n        for (let i = 0; i < self.bannerList.length; i += 1) {\n          animation.transition(self.$refs.activeSliderKey[i], {\n            styles: {\n              backgroundColor: 'rgba(255, 255, 255, 0.3)',\n            },\n            delay: 0,\n          });\n        }\n        animation.transition(self.$refs.activeSliderKey[index], {\n          styles: {\n            backgroundColor: 'rgba(255, 255, 255)',\n          },\n          delay: 0,\n        });\n      }\n    },\n  },\n}\n</script>\n```\n\n## 动画\nweex不支持帧动画，但本身自带的transition可以传入对应的style，并通过setInterval来控制动画循环播放\n\n**animation.js**\n```\nconst animation = weex.requireModule('animation');\n\nexport function transition(el, opts, dd) {\n  const duration = dd || 400;\n  if (!el) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    animation.transition(el, {\n      duration,\n      timingFunction: 'linear',\n      delay: 0,\n      ...opts,\n    }, resolve);\n  });\n}\n\nexport function run(el) {\n  transition(el, {\n    styles: {\n      transform: 'scale(1.02)',\n    },\n  }, 100).then(() => {\n    transition(el, {\n      styles: {\n        transform: 'scale(1.08)',\n      },\n    }, 200);\n  }).then(() => {\n    transition(el, {\n      styles: {\n        transition: 'scale(1)',\n      },\n    }, 300);\n  });\n}\n```\n\n**page.vue**\n```\n<template>\n  <div ref=\"btn\"></btn>\n</template>\n<script>\nexport default {\n  ...\n  mounted() {\n    setTimeout(() => {\n      setInterval(() => {\n        animation.run(this.$refs.btn);\n      }, 600);\n    }, 300);\n  },\n}\n</script>\n```\n\n# 参考链接\n* [企鹅电竞weex实践——UI开发篇](https://juejin.im/post/5bed1477e51d456c57127b30)\n* [weex 中Android的v-model双向绑定 输入第一个字符时无响应](https://segmentfault.com/q/1010000010238162/a-1020000010276364n)\n\n\n\n\n\n","source":"_posts/weex常见问题解析.md","raw":"---\ntitle: Weex常见问题解析\ndate: 2019-03-29 13:56:07\ntags: Weex\ncategories: Weex\n# description: \n---\n\n# 什么是 Weex？\n>Weex 是使用流行的 Web 开发体验来开发高性能原生应用的框架。\n\n<!-- more -->\n\nWeex 致力于使开发者能基于通用跨平台的 Web 开发语言和开发经验，来构建 Android、ios 和 Web 应用。简单来说，在集成了 WeexSDK 之后，你可以使用 JavaScript 语言和前端开发经验来开发移动应用。\n\nWeex 渲染引擎与 DSL 语法层是分开的，Weex 并不强依赖任何特定的前端框架。目前 Vue.js 和 Rax 这两个前端框架被广泛应用于 Weex 页面开发，同时 Weex 也对这两个前端框架提供了最完善的支持。Weex 的另一个主要目标是跟进流行的 Web 开发技术并将其和原生开发的技术结合，实现开发效率和运行性能的高度统一。在开发阶段，一个 Weex 页面就像开发普通网页一样；在运行时，Weex 页面又充分利用了各种操作系统的原生组件和能力。\n\n# 为什么选择 Weex？\n\n## Weex带给我们的收益\n* 迭代速度快，快速上线\n* Weex环境下完全Native体验\n* Bundle资源大小对比H5小很多\n* 富交互体验，长列表性能好\n* 上手快且简单、一次编写三段兼容\n\n||H5|WEEX|Native|\n|---|---|---|---|\n|开发成本|低|中|高|\n|维护更新|简单|简单|复杂|\n|用户体验|差|优|优|\n|发版审核|不需要|不需要|需要|\n|跨平台性|优|优|差|\n\n# Weex开发踩坑\n\n## 通用样式\n\n### 1、图片\n1、Weex提供了image组件,但只支持远程图片链接(在新weex sdk 已经解决)。图片必须添加宽、高属性否则会不显示出来。\n2、避免在image标签上使用v-for，否则会导致安卓上图片渲染异常（如slider中的图片）\n```\n  <slider class=\"activity\" :autoPlay=\"true\" interval=\"4000\" @change=\"sliderChange\">\n    <div class=\"activity-cell\"\n      v-for=\"(item, index) in bannerList\" :key=\"index\"\n      @click=\"clickInBanner(item)\">\n      <image class=\"activity-wrap-bg\" resize=\"cover\" :src=\"imageRes.bannerBgImg\"></image>\n      <image class=\"activity-wrap-image\" :src=\"item.pictureUrl\"></image>\n    </div>\n  </slider>\n```\n### 2、border\nWeex不支持使用border创建三角形，web可以正常显示，而ios和android上显示的是矩形，建议使用图片代替\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/triangle.jpg\" width=\"100\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/rectangular.jpg\" width=\"100\">ios、android</center></td></tr></table>\n\n### 3、scale设置为0问题\ntransform: scale(0)会导致文档流内所有事件扩散到整个html结构，导致文档流事件全部无效。只有脱离文档流的元素（absolute等）可以点击；常用可以设置transform: scale(0,1)，并使元素隐藏起来。\n\n### 4、input标签高度问题\n安卓环境中，当input高度设置小于60px时，会导致输入框光标不会显示出来。（ios、web正常）\n\n### 5、v-if问题\n在做一些操作切换状态时（如按钮点击置灰），应尽量避免使用v-if，使用v-if会闪，且部分安卓机子会发生不可描述的事情（如部分三星机型会出现按钮文字居顶），可采用添加class的方式\n\n### 6、透明度\n目前仅ios支持box-shadow属性，android暂不支持，可以使用图片代替。每个元素只支持设置一个阴影效果，不支持多个阴影同时作用于一个元素。and在日常开发中阴影最好使用图片来代替，避免出现未知的问题。以下是涉及到颜色的相关属性对透明度的支持度列表\n\n|属性|IOS|Android|H5|\n|---|---|---|---|\n|color|支持|支持|支持|\n|opacity|支持|支持|支持|\n|border-color|支持|支持|支持|\n|box-shadow|支持|不支持|支持|\n|background-color|支持|支持|支持|\n|background-image|不支持|支持|支持|\n\n### 7、Weex不支持样式简写\n```\n  .border {\n    margin: 0 10px; // 错误\n    margin-right: 10px;\n    margin-left: 10px; // 正确\n    border: 1px solid #000; // 错误\n    border-width: 1px;\n    border-style: solid;\n    border-color: #000; // 正确\n  }\n```\n### 8、 点击态\n项目比较常见的点击态多半是透明度的变化，如按钮、列表、链接等，css的做法是添加伪类 (:active)，Weex中也同样支持，但是Weex需要在原样式中添加 opacity:1,否则点击后回不到初始状态；此外，:active使用时,background-image在ios下会失效。\n```\n<template>\n  <div class=\"btn\">\n    <text>下载</text>\n  </div>\n</template>\n<style scoped>\n  .btn {\n    opacity: 1; // 必须添加\n  }\n  .btn:active {\n    opacity: 0.5;\n  }\n</style>\n```\n\n### 9、 文本截断\n文本从限制一行到不限制可以使用lines:0来控制;\n```\n<template>\n  <text class=\"text\" @click=\"onClickText\" :style=\"textStyle\">\n    这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，\n  </text>\n</template>\n<style scoped>\n.text {\n  text-overflow: ellipsis;\n  lines: 1;\n}\n</style>\n<script>\n export default {\n   data () {\n     return {\n       textStyle: {},\n     };\n   },\n   methods: {\n     onClickText() {\n       this.textStyle = {\n         lines: 0,\n       };\n     },\n   },\n }\n</script>\n```\n\n### 10、html顺序在不同设备上的显示\n例如有a、b、c、d 四层结构，其中a、b、c均为absolute定位,z-index由大到小，d为普通结构，我们知道在css中a层应该是处于最上方，d在最下方，那么在weex中表现如何呢？\n```\n<template>\n  <div>\n    <div>A(绿)</div> \n    <div>B(蓝)</div>\n    <div>C(紫)</div>\n    <div>D(红)</div>\n  </div>\n</template>\n```\n\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/web.png\" width=\"200\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/native.png\" width=\"200\">ios、android</center></td></tr></table>\n\n可以看到web和ios、android的表现不一致，ios、android中是以代码中dom顺序来依次添加的，和z-index无关，后面加载的视图会覆盖前面的视图。\n所以要保证web、ios、android三端表现一致，改变dom书写顺序即可。\n\n```\n<template>\n  <div>\n    <div>D(红)</div>\n    <div>C(紫)</div>\n    <div>B(蓝)</div>\n    <div>A(绿)</div> \n  </div>\n</template>\n```\n\n### 11、安卓下遮挡问题\n安卓下容器如果设置了宽高，那么子元素不能超出容器范围\n\n### 12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\n微信环境输入框收起会改变页面dom结构布局，可以采取捕获失去焦点事件， 执行window.scrollTo(0, 0);\n\n### 13、微信环境下超过一屏的长图在加载时渲染不出来\n可以对图片的父容器（scroller、 list）设置一个背景颜色，即可成功加载。\n\n### 14、渐变\nweex不支持径向渐变radial-gradient,只支持创建线性渐变。并且只支持两种颜色的渐变，渐变方向如下：\n* to right: 从左向右渐变\n* to left: 从右向左渐变\n* to bottom: 从上向下渐变\n* to top: 从下向上渐变\n* to bottom right: 从左上角向右下角渐变\n* to top left: 从右下角向左上角渐变\n\n> **注意**\n> * background-image优先级高于background-color，这意味着同时设置background-image和background-color,后者会被覆盖。\n> * background不支持简写。\n\n### 15、富文本\nweex在0.20版本添加一个新的标签richtext即富文本标签。但在之前的版本内weex是不支持富文本功能的，基本富文本功能都是使用图片来代表，因为weex的字体标签只有text，并且都是weex所有的标签结构都是弹性布局；但是weex也提供了一个方案，即在weex中空格也是占据一定空间的，所以可以支持一些特定的富文本功能。\n\n\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/richtext.png\" width=\"400\">富文本</center></td><td style=\"border:0;\"></td></tr></table>\n\n```\n<template>\n  <div>\n    <image class=\"tag-image\" :src=\"data.userType | typeImg\" :style=\"{ top: `${getEnvValue(17,18,13)}px`}\"></image>\n    <text class=\"item-title\">{{'      ' + getEnvValue('  ','',' ')+ data.title}}</text>\n  </div>\n</template>\n<script>\nexport default {\n  methods: {\n    // 根据环境不同返回不同的三个值\n    getEnvValue(webValue, iOSValue, androidValue) {\n      if (this.isWeb) {\n        return webValue;\n      } else if (this.isIos) {\n        return iOSValue;\n      } else if (this.isAndroid) {\n        return androidValue;\n      }\n      return iOSValue;\n    },\n  }\n}\n</script>\n```\n\n## 输入事件\n\n### 1、输入框不能清空内容\n需要清空输入框内已经输入的内容时，不能直接将绑定的值置为空，而是应该先隐藏输入框内显示的值，在一次渲染之后将在将值置为空。\n```\n<template>\n  <div class=\"input-wrap\">\n    <wxs-icon name=\"search\" size='40px' color='#b2b2b2'></wxs-icon>\n    <input\n      :value=\"searchKeyWord\"\n      returnKeyType=\"search\"\n      @focus=\"onInputFocus\"\n      @blur=\"onInputBlur\"\n      @input=\"onInputInput\"\n      @return=\"onInputReturn\"\n      class=\"input-hint\"\n      ref=\"input\"\n      placeholder-color=\"#cccccc\"\n      :singleline=\"true\"\n      :lines=\"1\" />\n    <div class=\"erase\" @click=\"onClickErase\">\n      <wxs-icon v-if=\"isInputFocus || isWeb\" name=\"erase\" size='36px' color='#b2b2b2' ></wxs-icon>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      searchKeyWord: '',\n    };\n  },\n  methods: {\n    onClickErase() {\n      this.searchKeyWord = ' ';\n      this.$nextTick(() => {\n        this.searchKeyWord = '';\n      });\n    },\n  }\n}\n</script>\n```\n\n### 2、Weex input输入框组件 在安卓下input事件BUG\n\n当使用v-model绑定值时，还原到绑定值原始状态时，无法触发input事件，此时还影响到v-model的绑定。在android上的表现为对输入框的input事件进行监听；打开页面选中输入框，对输入框输入一串文字，此时成功的触发了input事件。按键盘上的删除，最初也是成功的触发input事件，当最后一个字符被删除时，input事件并不会触发。如果不使用value来设置值，改使用v-model，也会出现这样的情况。通过查阅资料，发现这个是weex android sdk存在的一个坑点（作者没太接触过安卓开发）[https://segmentfault.com/q/1010000010238162/a-1020000010276364](https://segmentfault.com/q/1010000010238162/a-1020000010276364)里面给出了一张修改源码的方式来解决该BUG。主要问题是在WXInput的父类AbstractEditComponent类中, mIgnoreNextOnInputEvent 这个变量在组件初始化的时候被设置为了TRUE，导致了第一次输入input内容显示不出来。使用上一个问题的方法也可以成功的解决该问题，也可以将searchKeyWord的初始值置为undefined也可以很好的规避该问题。\n\n## 组件\n\n### 命令\n组件命名应避免使用JS关键字和保留字，以及weex提供的组件名称，如用loading作为组件名称，在ios与android中将呈现空白。\n\n```\n<template>\n  <div>\n    <Loading></Loading> /* 改用其他名称 */\n  </div>\n</template>\n```\n\n### 自定义slider组件\nweex本身提供了slider组件，但轮播图指示器（indicator）只能修改颜色与位置，大小却无法更改，所以需要自定义slider组件\n```\n<template>\n  <!-- 首页banner区块 -->\n  <div class=\"activity-wrap\" :style=\"{ top: (topSafeAreaHeight + 123) + 'px' }\">\n    <slider class=\"activity\" :autoPlay=\"true\" interval=\"4000\" @change=\"sliderChange\">\n      <div class=\"activity-cell\"\n        v-for=\"(item, index) in bannerList\" :key=\"index\"\n        @click=\"clickInBanner(item)\">\n        <image class=\"activity-wrap-bg\" resize=\"cover\" :src=\"imageRes.bannerBgImg\"></image>\n        <image class=\"activity-wrap-image\" :src=\"item.pictureUrl\"></image>\n      </div>\n    </slider>\n    <div class=\"slider-indicator-wrap\" v-if=\"bannerList && bannerList.length > 1\">\n      <div\n        v-for=\"(icon, index) in bannerList\"\n        :key=\"index\"\n        ref=\"activeSliderKey\"\n        class=\"slider-indicator\"\n        :class=\"[index === 0 ? 'slider-indicator-left' : '']\"\n      ></div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  ...,\n  methods: {\n    // 首页banner切换回调\n    sliderChange({ index }) {\n      const self = this;\n      if (self.bannerList.length > 0) {\n        for (let i = 0; i < self.bannerList.length; i += 1) {\n          animation.transition(self.$refs.activeSliderKey[i], {\n            styles: {\n              backgroundColor: 'rgba(255, 255, 255, 0.3)',\n            },\n            delay: 0,\n          });\n        }\n        animation.transition(self.$refs.activeSliderKey[index], {\n          styles: {\n            backgroundColor: 'rgba(255, 255, 255)',\n          },\n          delay: 0,\n        });\n      }\n    },\n  },\n}\n</script>\n```\n\n## 动画\nweex不支持帧动画，但本身自带的transition可以传入对应的style，并通过setInterval来控制动画循环播放\n\n**animation.js**\n```\nconst animation = weex.requireModule('animation');\n\nexport function transition(el, opts, dd) {\n  const duration = dd || 400;\n  if (!el) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    animation.transition(el, {\n      duration,\n      timingFunction: 'linear',\n      delay: 0,\n      ...opts,\n    }, resolve);\n  });\n}\n\nexport function run(el) {\n  transition(el, {\n    styles: {\n      transform: 'scale(1.02)',\n    },\n  }, 100).then(() => {\n    transition(el, {\n      styles: {\n        transform: 'scale(1.08)',\n      },\n    }, 200);\n  }).then(() => {\n    transition(el, {\n      styles: {\n        transition: 'scale(1)',\n      },\n    }, 300);\n  });\n}\n```\n\n**page.vue**\n```\n<template>\n  <div ref=\"btn\"></btn>\n</template>\n<script>\nexport default {\n  ...\n  mounted() {\n    setTimeout(() => {\n      setInterval(() => {\n        animation.run(this.$refs.btn);\n      }, 600);\n    }, 300);\n  },\n}\n</script>\n```\n\n# 参考链接\n* [企鹅电竞weex实践——UI开发篇](https://juejin.im/post/5bed1477e51d456c57127b30)\n* [weex 中Android的v-model双向绑定 输入第一个字符时无响应](https://segmentfault.com/q/1010000010238162/a-1020000010276364n)\n\n\n\n\n\n","slug":"weex常见问题解析","published":1,"updated":"2019-04-12T09:22:13.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus5nhac0007ed106tpcc318","content":"<h1 id=\"什么是-Weex？\"><a href=\"#什么是-Weex？\" class=\"headerlink\" title=\"什么是 Weex？\"></a>什么是 Weex？</h1><blockquote>\n<p>Weex 是使用流行的 Web 开发体验来开发高性能原生应用的框架。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>Weex 致力于使开发者能基于通用跨平台的 Web 开发语言和开发经验，来构建 Android、ios 和 Web 应用。简单来说，在集成了 WeexSDK 之后，你可以使用 JavaScript 语言和前端开发经验来开发移动应用。</p>\n<p>Weex 渲染引擎与 DSL 语法层是分开的，Weex 并不强依赖任何特定的前端框架。目前 Vue.js 和 Rax 这两个前端框架被广泛应用于 Weex 页面开发，同时 Weex 也对这两个前端框架提供了最完善的支持。Weex 的另一个主要目标是跟进流行的 Web 开发技术并将其和原生开发的技术结合，实现开发效率和运行性能的高度统一。在开发阶段，一个 Weex 页面就像开发普通网页一样；在运行时，Weex 页面又充分利用了各种操作系统的原生组件和能力。</p>\n<h1 id=\"为什么选择-Weex？\"><a href=\"#为什么选择-Weex？\" class=\"headerlink\" title=\"为什么选择 Weex？\"></a>为什么选择 Weex？</h1><h2 id=\"Weex带给我们的收益\"><a href=\"#Weex带给我们的收益\" class=\"headerlink\" title=\"Weex带给我们的收益\"></a>Weex带给我们的收益</h2><ul>\n<li>迭代速度快，快速上线</li>\n<li>Weex环境下完全Native体验</li>\n<li>Bundle资源大小对比H5小很多</li>\n<li>富交互体验，长列表性能好</li>\n<li>上手快且简单、一次编写三段兼容</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>H5</th>\n<th>WEEX</th>\n<th>Native</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发成本</td>\n<td>低</td>\n<td>中</td>\n<td>高</td>\n</tr>\n<tr>\n<td>维护更新</td>\n<td>简单</td>\n<td>简单</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>用户体验</td>\n<td>差</td>\n<td>优</td>\n<td>优</td>\n</tr>\n<tr>\n<td>发版审核</td>\n<td>不需要</td>\n<td>不需要</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>跨平台性</td>\n<td>优</td>\n<td>优</td>\n<td>差</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Weex开发踩坑\"><a href=\"#Weex开发踩坑\" class=\"headerlink\" title=\"Weex开发踩坑\"></a>Weex开发踩坑</h1><h2 id=\"通用样式\"><a href=\"#通用样式\" class=\"headerlink\" title=\"通用样式\"></a>通用样式</h2><h3 id=\"1、图片\"><a href=\"#1、图片\" class=\"headerlink\" title=\"1、图片\"></a>1、图片</h3><p>1、Weex提供了image组件,但只支持远程图片链接(在新weex sdk 已经解决)。图片必须添加宽、高属性否则会不显示出来。<br>2、避免在image标签上使用v-for，否则会导致安卓上图片渲染异常（如slider中的图片）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slider class=&quot;activity&quot; :autoPlay=&quot;true&quot; interval=&quot;4000&quot; @change=&quot;sliderChange&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;activity-cell&quot;</span><br><span class=\"line\">    v-for=&quot;(item, index) in bannerList&quot; :key=&quot;index&quot;</span><br><span class=\"line\">    @click=&quot;clickInBanner(item)&quot;&gt;</span><br><span class=\"line\">    &lt;image class=&quot;activity-wrap-bg&quot; resize=&quot;cover&quot; :src=&quot;imageRes.bannerBgImg&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">    &lt;image class=&quot;activity-wrap-image&quot; :src=&quot;item.pictureUrl&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/slider&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、border\"><a href=\"#2、border\" class=\"headerlink\" title=\"2、border\"></a>2、border</h3><p>Weex不支持使用border创建三角形，web可以正常显示，而ios和android上显示的是矩形，建议使用图片代替</p>\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/triangle.jpg\" width=\"100\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/rectangular.jpg\" width=\"100\">ios、android</center></td></tr></table>\n\n<h3 id=\"3、scale设置为0问题\"><a href=\"#3、scale设置为0问题\" class=\"headerlink\" title=\"3、scale设置为0问题\"></a>3、scale设置为0问题</h3><p>transform: scale(0)会导致文档流内所有事件扩散到整个html结构，导致文档流事件全部无效。只有脱离文档流的元素（absolute等）可以点击；常用可以设置transform: scale(0,1)，并使元素隐藏起来。</p>\n<h3 id=\"4、input标签高度问题\"><a href=\"#4、input标签高度问题\" class=\"headerlink\" title=\"4、input标签高度问题\"></a>4、input标签高度问题</h3><p>安卓环境中，当input高度设置小于60px时，会导致输入框光标不会显示出来。（ios、web正常）</p>\n<h3 id=\"5、v-if问题\"><a href=\"#5、v-if问题\" class=\"headerlink\" title=\"5、v-if问题\"></a>5、v-if问题</h3><p>在做一些操作切换状态时（如按钮点击置灰），应尽量避免使用v-if，使用v-if会闪，且部分安卓机子会发生不可描述的事情（如部分三星机型会出现按钮文字居顶），可采用添加class的方式</p>\n<h3 id=\"6、透明度\"><a href=\"#6、透明度\" class=\"headerlink\" title=\"6、透明度\"></a>6、透明度</h3><p>目前仅ios支持box-shadow属性，android暂不支持，可以使用图片代替。每个元素只支持设置一个阴影效果，不支持多个阴影同时作用于一个元素。and在日常开发中阴影最好使用图片来代替，避免出现未知的问题。以下是涉及到颜色的相关属性对透明度的支持度列表</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>IOS</th>\n<th>Android</th>\n<th>H5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>color</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>opacity</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>border-color</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>box-shadow</td>\n<td>支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>background-color</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>background-image</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7、Weex不支持样式简写\"><a href=\"#7、Weex不支持样式简写\" class=\"headerlink\" title=\"7、Weex不支持样式简写\"></a>7、Weex不支持样式简写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.border &#123;</span><br><span class=\"line\">  margin: 0 10px; // 错误</span><br><span class=\"line\">  margin-right: 10px;</span><br><span class=\"line\">  margin-left: 10px; // 正确</span><br><span class=\"line\">  border: 1px solid #000; // 错误</span><br><span class=\"line\">  border-width: 1px;</span><br><span class=\"line\">  border-style: solid;</span><br><span class=\"line\">  border-color: #000; // 正确</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8、-点击态\"><a href=\"#8、-点击态\" class=\"headerlink\" title=\"8、 点击态\"></a>8、 点击态</h3><p>项目比较常见的点击态多半是透明度的变化，如按钮、列表、链接等，css的做法是添加伪类 (:active)，Weex中也同样支持，但是Weex需要在原样式中添加 opacity:1,否则点击后回不到初始状态；此外，:active使用时,background-image在ios下会失效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;btn&quot;&gt;</span><br><span class=\"line\">    &lt;text&gt;下载&lt;/text&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .btn &#123;</span><br><span class=\"line\">    opacity: 1; // 必须添加</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .btn:active &#123;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9、-文本截断\"><a href=\"#9、-文本截断\" class=\"headerlink\" title=\"9、 文本截断\"></a>9、 文本截断</h3><p>文本从限制一行到不限制可以使用lines:0来控制;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;text class=&quot;text&quot; @click=&quot;onClickText&quot; :style=&quot;textStyle&quot;&gt;</span><br><span class=\"line\">    这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，</span><br><span class=\"line\">  &lt;/text&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.text &#123;</span><br><span class=\"line\">  text-overflow: ellipsis;</span><br><span class=\"line\">  lines: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> export default &#123;</span><br><span class=\"line\">   data () &#123;</span><br><span class=\"line\">     return &#123;</span><br><span class=\"line\">       textStyle: &#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     onClickText() &#123;</span><br><span class=\"line\">       this.textStyle = &#123;</span><br><span class=\"line\">         lines: 0,</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10、html顺序在不同设备上的显示\"><a href=\"#10、html顺序在不同设备上的显示\" class=\"headerlink\" title=\"10、html顺序在不同设备上的显示\"></a>10、html顺序在不同设备上的显示</h3><p>例如有a、b、c、d 四层结构，其中a、b、c均为absolute定位,z-index由大到小，d为普通结构，我们知道在css中a层应该是处于最上方，d在最下方，那么在weex中表现如何呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div&gt;A(绿)&lt;/div&gt; </span><br><span class=\"line\">    &lt;div&gt;B(蓝)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;C(紫)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;D(红)&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/web.png\" width=\"200\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/native.png\" width=\"200\">ios、android</center></td></tr></table>\n\n<p>可以看到web和ios、android的表现不一致，ios、android中是以代码中dom顺序来依次添加的，和z-index无关，后面加载的视图会覆盖前面的视图。<br>所以要保证web、ios、android三端表现一致，改变dom书写顺序即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div&gt;D(红)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;C(紫)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;B(蓝)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;A(绿)&lt;/div&gt; </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11、安卓下遮挡问题\"><a href=\"#11、安卓下遮挡问题\" class=\"headerlink\" title=\"11、安卓下遮挡问题\"></a>11、安卓下遮挡问题</h3><p>安卓下容器如果设置了宽高，那么子元素不能超出容器范围</p>\n<h3 id=\"12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\"><a href=\"#12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\" class=\"headerlink\" title=\"12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\"></a>12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。</h3><p>微信环境输入框收起会改变页面dom结构布局，可以采取捕获失去焦点事件， 执行window.scrollTo(0, 0);</p>\n<h3 id=\"13、微信环境下超过一屏的长图在加载时渲染不出来\"><a href=\"#13、微信环境下超过一屏的长图在加载时渲染不出来\" class=\"headerlink\" title=\"13、微信环境下超过一屏的长图在加载时渲染不出来\"></a>13、微信环境下超过一屏的长图在加载时渲染不出来</h3><p>可以对图片的父容器（scroller、 list）设置一个背景颜色，即可成功加载。</p>\n<h3 id=\"14、渐变\"><a href=\"#14、渐变\" class=\"headerlink\" title=\"14、渐变\"></a>14、渐变</h3><p>weex不支持径向渐变radial-gradient,只支持创建线性渐变。并且只支持两种颜色的渐变，渐变方向如下：</p>\n<ul>\n<li>to right: 从左向右渐变</li>\n<li>to left: 从右向左渐变</li>\n<li>to bottom: 从上向下渐变</li>\n<li>to top: 从下向上渐变</li>\n<li>to bottom right: 从左上角向右下角渐变</li>\n<li>to top left: 从右下角向左上角渐变</li>\n</ul>\n<blockquote>\n<p><strong>注意</strong></p>\n<ul>\n<li>background-image优先级高于background-color，这意味着同时设置background-image和background-color,后者会被覆盖。</li>\n<li>background不支持简写。</li>\n</ul>\n</blockquote>\n<h3 id=\"15、富文本\"><a href=\"#15、富文本\" class=\"headerlink\" title=\"15、富文本\"></a>15、富文本</h3><p>weex在0.20版本添加一个新的标签richtext即富文本标签。但在之前的版本内weex是不支持富文本功能的，基本富文本功能都是使用图片来代表，因为weex的字体标签只有text，并且都是weex所有的标签结构都是弹性布局；但是weex也提供了一个方案，即在weex中空格也是占据一定空间的，所以可以支持一些特定的富文本功能。</p>\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/richtext.png\" width=\"400\">富文本</center></td><td style=\"border:0;\"></td></tr></table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;image class=&quot;tag-image&quot; :src=&quot;data.userType | typeImg&quot; :style=&quot;&#123; top: `$&#123;getEnvValue(17,18,13)&#125;px`&#125;&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">    &lt;text class=&quot;item-title&quot;&gt;&#123;&#123;&apos;      &apos; + getEnvValue(&apos;  &apos;,&apos;&apos;,&apos; &apos;)+ data.title&#125;&#125;&lt;/text&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    // 根据环境不同返回不同的三个值</span><br><span class=\"line\">    getEnvValue(webValue, iOSValue, androidValue) &#123;</span><br><span class=\"line\">      if (this.isWeb) &#123;</span><br><span class=\"line\">        return webValue;</span><br><span class=\"line\">      &#125; else if (this.isIos) &#123;</span><br><span class=\"line\">        return iOSValue;</span><br><span class=\"line\">      &#125; else if (this.isAndroid) &#123;</span><br><span class=\"line\">        return androidValue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return iOSValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输入事件\"><a href=\"#输入事件\" class=\"headerlink\" title=\"输入事件\"></a>输入事件</h2><h3 id=\"1、输入框不能清空内容\"><a href=\"#1、输入框不能清空内容\" class=\"headerlink\" title=\"1、输入框不能清空内容\"></a>1、输入框不能清空内容</h3><p>需要清空输入框内已经输入的内容时，不能直接将绑定的值置为空，而是应该先隐藏输入框内显示的值，在一次渲染之后将在将值置为空。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;input-wrap&quot;&gt;</span><br><span class=\"line\">    &lt;wxs-icon name=&quot;search&quot; size=&apos;40px&apos; color=&apos;#b2b2b2&apos;&gt;&lt;/wxs-icon&gt;</span><br><span class=\"line\">    &lt;input</span><br><span class=\"line\">      :value=&quot;searchKeyWord&quot;</span><br><span class=\"line\">      returnKeyType=&quot;search&quot;</span><br><span class=\"line\">      @focus=&quot;onInputFocus&quot;</span><br><span class=\"line\">      @blur=&quot;onInputBlur&quot;</span><br><span class=\"line\">      @input=&quot;onInputInput&quot;</span><br><span class=\"line\">      @return=&quot;onInputReturn&quot;</span><br><span class=\"line\">      class=&quot;input-hint&quot;</span><br><span class=\"line\">      ref=&quot;input&quot;</span><br><span class=\"line\">      placeholder-color=&quot;#cccccc&quot;</span><br><span class=\"line\">      :singleline=&quot;true&quot;</span><br><span class=\"line\">      :lines=&quot;1&quot; /&gt;</span><br><span class=\"line\">    &lt;div class=&quot;erase&quot; @click=&quot;onClickErase&quot;&gt;</span><br><span class=\"line\">      &lt;wxs-icon v-if=&quot;isInputFocus || isWeb&quot; name=&quot;erase&quot; size=&apos;36px&apos; color=&apos;#b2b2b2&apos; &gt;&lt;/wxs-icon&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      searchKeyWord: &apos;&apos;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onClickErase() &#123;</span><br><span class=\"line\">      this.searchKeyWord = &apos; &apos;;</span><br><span class=\"line\">      this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.searchKeyWord = &apos;&apos;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、Weex-input输入框组件-在安卓下input事件BUG\"><a href=\"#2、Weex-input输入框组件-在安卓下input事件BUG\" class=\"headerlink\" title=\"2、Weex input输入框组件 在安卓下input事件BUG\"></a>2、Weex input输入框组件 在安卓下input事件BUG</h3><p>当使用v-model绑定值时，还原到绑定值原始状态时，无法触发input事件，此时还影响到v-model的绑定。在android上的表现为对输入框的input事件进行监听；打开页面选中输入框，对输入框输入一串文字，此时成功的触发了input事件。按键盘上的删除，最初也是成功的触发input事件，当最后一个字符被删除时，input事件并不会触发。如果不使用value来设置值，改使用v-model，也会出现这样的情况。通过查阅资料，发现这个是weex android sdk存在的一个坑点（作者没太接触过安卓开发）<a href=\"https://segmentfault.com/q/1010000010238162/a-1020000010276364\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000010238162/a-1020000010276364</a>里面给出了一张修改源码的方式来解决该BUG。主要问题是在WXInput的父类AbstractEditComponent类中, mIgnoreNextOnInputEvent 这个变量在组件初始化的时候被设置为了TRUE，导致了第一次输入input内容显示不出来。使用上一个问题的方法也可以成功的解决该问题，也可以将searchKeyWord的初始值置为undefined也可以很好的规避该问题。</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>组件命名应避免使用JS关键字和保留字，以及weex提供的组件名称，如用loading作为组件名称，在ios与android中将呈现空白。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Loading&gt;&lt;/Loading&gt; /* 改用其他名称 */</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义slider组件\"><a href=\"#自定义slider组件\" class=\"headerlink\" title=\"自定义slider组件\"></a>自定义slider组件</h3><p>weex本身提供了slider组件，但轮播图指示器（indicator）只能修改颜色与位置，大小却无法更改，所以需要自定义slider组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 首页banner区块 --&gt;</span><br><span class=\"line\">  &lt;div class=&quot;activity-wrap&quot; :style=&quot;&#123; top: (topSafeAreaHeight + 123) + &apos;px&apos; &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;slider class=&quot;activity&quot; :autoPlay=&quot;true&quot; interval=&quot;4000&quot; @change=&quot;sliderChange&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;activity-cell&quot;</span><br><span class=\"line\">        v-for=&quot;(item, index) in bannerList&quot; :key=&quot;index&quot;</span><br><span class=\"line\">        @click=&quot;clickInBanner(item)&quot;&gt;</span><br><span class=\"line\">        &lt;image class=&quot;activity-wrap-bg&quot; resize=&quot;cover&quot; :src=&quot;imageRes.bannerBgImg&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">        &lt;image class=&quot;activity-wrap-image&quot; :src=&quot;item.pictureUrl&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/slider&gt;</span><br><span class=\"line\">    &lt;div class=&quot;slider-indicator-wrap&quot; v-if=&quot;bannerList &amp;&amp; bannerList.length &gt; 1&quot;&gt;</span><br><span class=\"line\">      &lt;div</span><br><span class=\"line\">        v-for=&quot;(icon, index) in bannerList&quot;</span><br><span class=\"line\">        :key=&quot;index&quot;</span><br><span class=\"line\">        ref=&quot;activeSliderKey&quot;</span><br><span class=\"line\">        class=&quot;slider-indicator&quot;</span><br><span class=\"line\">        :class=&quot;[index === 0 ? &apos;slider-indicator-left&apos; : &apos;&apos;]&quot;</span><br><span class=\"line\">      &gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    // 首页banner切换回调</span><br><span class=\"line\">    sliderChange(&#123; index &#125;) &#123;</span><br><span class=\"line\">      const self = this;</span><br><span class=\"line\">      if (self.bannerList.length &gt; 0) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; self.bannerList.length; i += 1) &#123;</span><br><span class=\"line\">          animation.transition(self.$refs.activeSliderKey[i], &#123;</span><br><span class=\"line\">            styles: &#123;</span><br><span class=\"line\">              backgroundColor: &apos;rgba(255, 255, 255, 0.3)&apos;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            delay: 0,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        animation.transition(self.$refs.activeSliderKey[index], &#123;</span><br><span class=\"line\">          styles: &#123;</span><br><span class=\"line\">            backgroundColor: &apos;rgba(255, 255, 255)&apos;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          delay: 0,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>weex不支持帧动画，但本身自带的transition可以传入对应的style，并通过setInterval来控制动画循环播放</p>\n<p><strong>animation.js</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const animation = weex.requireModule(&apos;animation&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">export function transition(el, opts, dd) &#123;</span><br><span class=\"line\">  const duration = dd || 400;</span><br><span class=\"line\">  if (!el) &#123;</span><br><span class=\"line\">    return Promise.resolve();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    animation.transition(el, &#123;</span><br><span class=\"line\">      duration,</span><br><span class=\"line\">      timingFunction: &apos;linear&apos;,</span><br><span class=\"line\">      delay: 0,</span><br><span class=\"line\">      ...opts,</span><br><span class=\"line\">    &#125;, resolve);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function run(el) &#123;</span><br><span class=\"line\">  transition(el, &#123;</span><br><span class=\"line\">    styles: &#123;</span><br><span class=\"line\">      transform: &apos;scale(1.02)&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;, 100).then(() =&gt; &#123;</span><br><span class=\"line\">    transition(el, &#123;</span><br><span class=\"line\">      styles: &#123;</span><br><span class=\"line\">        transform: &apos;scale(1.08)&apos;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;, 200);</span><br><span class=\"line\">  &#125;).then(() =&gt; &#123;</span><br><span class=\"line\">    transition(el, &#123;</span><br><span class=\"line\">      styles: &#123;</span><br><span class=\"line\">        transition: &apos;scale(1)&apos;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;, 300);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>page.vue</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;btn&quot;&gt;&lt;/btn&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      setInterval(() =&gt; &#123;</span><br><span class=\"line\">        animation.run(this.$refs.btn);</span><br><span class=\"line\">      &#125;, 600);</span><br><span class=\"line\">    &#125;, 300);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://juejin.im/post/5bed1477e51d456c57127b30\" target=\"_blank\" rel=\"noopener\">企鹅电竞weex实践——UI开发篇</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000010238162/a-1020000010276364n\" target=\"_blank\" rel=\"noopener\">weex 中Android的v-model双向绑定 输入第一个字符时无响应</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是-Weex？\"><a href=\"#什么是-Weex？\" class=\"headerlink\" title=\"什么是 Weex？\"></a>什么是 Weex？</h1><blockquote>\n<p>Weex 是使用流行的 Web 开发体验来开发高性能原生应用的框架。</p>\n</blockquote>","more":"<p>Weex 致力于使开发者能基于通用跨平台的 Web 开发语言和开发经验，来构建 Android、ios 和 Web 应用。简单来说，在集成了 WeexSDK 之后，你可以使用 JavaScript 语言和前端开发经验来开发移动应用。</p>\n<p>Weex 渲染引擎与 DSL 语法层是分开的，Weex 并不强依赖任何特定的前端框架。目前 Vue.js 和 Rax 这两个前端框架被广泛应用于 Weex 页面开发，同时 Weex 也对这两个前端框架提供了最完善的支持。Weex 的另一个主要目标是跟进流行的 Web 开发技术并将其和原生开发的技术结合，实现开发效率和运行性能的高度统一。在开发阶段，一个 Weex 页面就像开发普通网页一样；在运行时，Weex 页面又充分利用了各种操作系统的原生组件和能力。</p>\n<h1 id=\"为什么选择-Weex？\"><a href=\"#为什么选择-Weex？\" class=\"headerlink\" title=\"为什么选择 Weex？\"></a>为什么选择 Weex？</h1><h2 id=\"Weex带给我们的收益\"><a href=\"#Weex带给我们的收益\" class=\"headerlink\" title=\"Weex带给我们的收益\"></a>Weex带给我们的收益</h2><ul>\n<li>迭代速度快，快速上线</li>\n<li>Weex环境下完全Native体验</li>\n<li>Bundle资源大小对比H5小很多</li>\n<li>富交互体验，长列表性能好</li>\n<li>上手快且简单、一次编写三段兼容</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>H5</th>\n<th>WEEX</th>\n<th>Native</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发成本</td>\n<td>低</td>\n<td>中</td>\n<td>高</td>\n</tr>\n<tr>\n<td>维护更新</td>\n<td>简单</td>\n<td>简单</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>用户体验</td>\n<td>差</td>\n<td>优</td>\n<td>优</td>\n</tr>\n<tr>\n<td>发版审核</td>\n<td>不需要</td>\n<td>不需要</td>\n<td>需要</td>\n</tr>\n<tr>\n<td>跨平台性</td>\n<td>优</td>\n<td>优</td>\n<td>差</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Weex开发踩坑\"><a href=\"#Weex开发踩坑\" class=\"headerlink\" title=\"Weex开发踩坑\"></a>Weex开发踩坑</h1><h2 id=\"通用样式\"><a href=\"#通用样式\" class=\"headerlink\" title=\"通用样式\"></a>通用样式</h2><h3 id=\"1、图片\"><a href=\"#1、图片\" class=\"headerlink\" title=\"1、图片\"></a>1、图片</h3><p>1、Weex提供了image组件,但只支持远程图片链接(在新weex sdk 已经解决)。图片必须添加宽、高属性否则会不显示出来。<br>2、避免在image标签上使用v-for，否则会导致安卓上图片渲染异常（如slider中的图片）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;slider class=&quot;activity&quot; :autoPlay=&quot;true&quot; interval=&quot;4000&quot; @change=&quot;sliderChange&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;activity-cell&quot;</span><br><span class=\"line\">    v-for=&quot;(item, index) in bannerList&quot; :key=&quot;index&quot;</span><br><span class=\"line\">    @click=&quot;clickInBanner(item)&quot;&gt;</span><br><span class=\"line\">    &lt;image class=&quot;activity-wrap-bg&quot; resize=&quot;cover&quot; :src=&quot;imageRes.bannerBgImg&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">    &lt;image class=&quot;activity-wrap-image&quot; :src=&quot;item.pictureUrl&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/slider&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、border\"><a href=\"#2、border\" class=\"headerlink\" title=\"2、border\"></a>2、border</h3><p>Weex不支持使用border创建三角形，web可以正常显示，而ios和android上显示的是矩形，建议使用图片代替</p>\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/triangle.jpg\" width=\"100\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/rectangular.jpg\" width=\"100\">ios、android</center></td></tr></table>\n\n<h3 id=\"3、scale设置为0问题\"><a href=\"#3、scale设置为0问题\" class=\"headerlink\" title=\"3、scale设置为0问题\"></a>3、scale设置为0问题</h3><p>transform: scale(0)会导致文档流内所有事件扩散到整个html结构，导致文档流事件全部无效。只有脱离文档流的元素（absolute等）可以点击；常用可以设置transform: scale(0,1)，并使元素隐藏起来。</p>\n<h3 id=\"4、input标签高度问题\"><a href=\"#4、input标签高度问题\" class=\"headerlink\" title=\"4、input标签高度问题\"></a>4、input标签高度问题</h3><p>安卓环境中，当input高度设置小于60px时，会导致输入框光标不会显示出来。（ios、web正常）</p>\n<h3 id=\"5、v-if问题\"><a href=\"#5、v-if问题\" class=\"headerlink\" title=\"5、v-if问题\"></a>5、v-if问题</h3><p>在做一些操作切换状态时（如按钮点击置灰），应尽量避免使用v-if，使用v-if会闪，且部分安卓机子会发生不可描述的事情（如部分三星机型会出现按钮文字居顶），可采用添加class的方式</p>\n<h3 id=\"6、透明度\"><a href=\"#6、透明度\" class=\"headerlink\" title=\"6、透明度\"></a>6、透明度</h3><p>目前仅ios支持box-shadow属性，android暂不支持，可以使用图片代替。每个元素只支持设置一个阴影效果，不支持多个阴影同时作用于一个元素。and在日常开发中阴影最好使用图片来代替，避免出现未知的问题。以下是涉及到颜色的相关属性对透明度的支持度列表</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>IOS</th>\n<th>Android</th>\n<th>H5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>color</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>opacity</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>border-color</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>box-shadow</td>\n<td>支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>background-color</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>background-image</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7、Weex不支持样式简写\"><a href=\"#7、Weex不支持样式简写\" class=\"headerlink\" title=\"7、Weex不支持样式简写\"></a>7、Weex不支持样式简写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.border &#123;</span><br><span class=\"line\">  margin: 0 10px; // 错误</span><br><span class=\"line\">  margin-right: 10px;</span><br><span class=\"line\">  margin-left: 10px; // 正确</span><br><span class=\"line\">  border: 1px solid #000; // 错误</span><br><span class=\"line\">  border-width: 1px;</span><br><span class=\"line\">  border-style: solid;</span><br><span class=\"line\">  border-color: #000; // 正确</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8、-点击态\"><a href=\"#8、-点击态\" class=\"headerlink\" title=\"8、 点击态\"></a>8、 点击态</h3><p>项目比较常见的点击态多半是透明度的变化，如按钮、列表、链接等，css的做法是添加伪类 (:active)，Weex中也同样支持，但是Weex需要在原样式中添加 opacity:1,否则点击后回不到初始状态；此外，:active使用时,background-image在ios下会失效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;btn&quot;&gt;</span><br><span class=\"line\">    &lt;text&gt;下载&lt;/text&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .btn &#123;</span><br><span class=\"line\">    opacity: 1; // 必须添加</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .btn:active &#123;</span><br><span class=\"line\">    opacity: 0.5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9、-文本截断\"><a href=\"#9、-文本截断\" class=\"headerlink\" title=\"9、 文本截断\"></a>9、 文本截断</h3><p>文本从限制一行到不限制可以使用lines:0来控制;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;text class=&quot;text&quot; @click=&quot;onClickText&quot; :style=&quot;textStyle&quot;&gt;</span><br><span class=\"line\">    这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，这是一段测试文本，</span><br><span class=\"line\">  &lt;/text&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">.text &#123;</span><br><span class=\"line\">  text-overflow: ellipsis;</span><br><span class=\"line\">  lines: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> export default &#123;</span><br><span class=\"line\">   data () &#123;</span><br><span class=\"line\">     return &#123;</span><br><span class=\"line\">       textStyle: &#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     onClickText() &#123;</span><br><span class=\"line\">       this.textStyle = &#123;</span><br><span class=\"line\">         lines: 0,</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10、html顺序在不同设备上的显示\"><a href=\"#10、html顺序在不同设备上的显示\" class=\"headerlink\" title=\"10、html顺序在不同设备上的显示\"></a>10、html顺序在不同设备上的显示</h3><p>例如有a、b、c、d 四层结构，其中a、b、c均为absolute定位,z-index由大到小，d为普通结构，我们知道在css中a层应该是处于最上方，d在最下方，那么在weex中表现如何呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div&gt;A(绿)&lt;/div&gt; </span><br><span class=\"line\">    &lt;div&gt;B(蓝)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;C(紫)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;D(红)&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/web.png\" width=\"200\">web</center></td><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/native.png\" width=\"200\">ios、android</center></td></tr></table>\n\n<p>可以看到web和ios、android的表现不一致，ios、android中是以代码中dom顺序来依次添加的，和z-index无关，后面加载的视图会覆盖前面的视图。<br>所以要保证web、ios、android三端表现一致，改变dom书写顺序即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;div&gt;D(红)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;C(紫)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;B(蓝)&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;A(绿)&lt;/div&gt; </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11、安卓下遮挡问题\"><a href=\"#11、安卓下遮挡问题\" class=\"headerlink\" title=\"11、安卓下遮挡问题\"></a>11、安卓下遮挡问题</h3><p>安卓下容器如果设置了宽高，那么子元素不能超出容器范围</p>\n<h3 id=\"12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\"><a href=\"#12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\" class=\"headerlink\" title=\"12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。\"></a>12、微信环境输入框失焦时，当前页面的视图偏移量未回复到初始位置。</h3><p>微信环境输入框收起会改变页面dom结构布局，可以采取捕获失去焦点事件， 执行window.scrollTo(0, 0);</p>\n<h3 id=\"13、微信环境下超过一屏的长图在加载时渲染不出来\"><a href=\"#13、微信环境下超过一屏的长图在加载时渲染不出来\" class=\"headerlink\" title=\"13、微信环境下超过一屏的长图在加载时渲染不出来\"></a>13、微信环境下超过一屏的长图在加载时渲染不出来</h3><p>可以对图片的父容器（scroller、 list）设置一个背景颜色，即可成功加载。</p>\n<h3 id=\"14、渐变\"><a href=\"#14、渐变\" class=\"headerlink\" title=\"14、渐变\"></a>14、渐变</h3><p>weex不支持径向渐变radial-gradient,只支持创建线性渐变。并且只支持两种颜色的渐变，渐变方向如下：</p>\n<ul>\n<li>to right: 从左向右渐变</li>\n<li>to left: 从右向左渐变</li>\n<li>to bottom: 从上向下渐变</li>\n<li>to top: 从下向上渐变</li>\n<li>to bottom right: 从左上角向右下角渐变</li>\n<li>to top left: 从右下角向左上角渐变</li>\n</ul>\n<blockquote>\n<p><strong>注意</strong></p>\n<ul>\n<li>background-image优先级高于background-color，这意味着同时设置background-image和background-color,后者会被覆盖。</li>\n<li>background不支持简写。</li>\n</ul>\n</blockquote>\n<h3 id=\"15、富文本\"><a href=\"#15、富文本\" class=\"headerlink\" title=\"15、富文本\"></a>15、富文本</h3><p>weex在0.20版本添加一个新的标签richtext即富文本标签。但在之前的版本内weex是不支持富文本功能的，基本富文本功能都是使用图片来代表，因为weex的字体标签只有text，并且都是weex所有的标签结构都是弹性布局；但是weex也提供了一个方案，即在weex中空格也是占据一定空间的，所以可以支持一些特定的富文本功能。</p>\n<table style=\"border:0;\"><tr style=\"background-color:transparent;\"><td style=\"border:0;\"><center><img style=\"border:0;\" src=\"/uploads/weex常见问题解析/richtext.png\" width=\"400\">富文本</center></td><td style=\"border:0;\"></td></tr></table>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;image class=&quot;tag-image&quot; :src=&quot;data.userType | typeImg&quot; :style=&quot;&#123; top: `$&#123;getEnvValue(17,18,13)&#125;px`&#125;&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">    &lt;text class=&quot;item-title&quot;&gt;&#123;&#123;&apos;      &apos; + getEnvValue(&apos;  &apos;,&apos;&apos;,&apos; &apos;)+ data.title&#125;&#125;&lt;/text&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    // 根据环境不同返回不同的三个值</span><br><span class=\"line\">    getEnvValue(webValue, iOSValue, androidValue) &#123;</span><br><span class=\"line\">      if (this.isWeb) &#123;</span><br><span class=\"line\">        return webValue;</span><br><span class=\"line\">      &#125; else if (this.isIos) &#123;</span><br><span class=\"line\">        return iOSValue;</span><br><span class=\"line\">      &#125; else if (this.isAndroid) &#123;</span><br><span class=\"line\">        return androidValue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return iOSValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输入事件\"><a href=\"#输入事件\" class=\"headerlink\" title=\"输入事件\"></a>输入事件</h2><h3 id=\"1、输入框不能清空内容\"><a href=\"#1、输入框不能清空内容\" class=\"headerlink\" title=\"1、输入框不能清空内容\"></a>1、输入框不能清空内容</h3><p>需要清空输入框内已经输入的内容时，不能直接将绑定的值置为空，而是应该先隐藏输入框内显示的值，在一次渲染之后将在将值置为空。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class=&quot;input-wrap&quot;&gt;</span><br><span class=\"line\">    &lt;wxs-icon name=&quot;search&quot; size=&apos;40px&apos; color=&apos;#b2b2b2&apos;&gt;&lt;/wxs-icon&gt;</span><br><span class=\"line\">    &lt;input</span><br><span class=\"line\">      :value=&quot;searchKeyWord&quot;</span><br><span class=\"line\">      returnKeyType=&quot;search&quot;</span><br><span class=\"line\">      @focus=&quot;onInputFocus&quot;</span><br><span class=\"line\">      @blur=&quot;onInputBlur&quot;</span><br><span class=\"line\">      @input=&quot;onInputInput&quot;</span><br><span class=\"line\">      @return=&quot;onInputReturn&quot;</span><br><span class=\"line\">      class=&quot;input-hint&quot;</span><br><span class=\"line\">      ref=&quot;input&quot;</span><br><span class=\"line\">      placeholder-color=&quot;#cccccc&quot;</span><br><span class=\"line\">      :singleline=&quot;true&quot;</span><br><span class=\"line\">      :lines=&quot;1&quot; /&gt;</span><br><span class=\"line\">    &lt;div class=&quot;erase&quot; @click=&quot;onClickErase&quot;&gt;</span><br><span class=\"line\">      &lt;wxs-icon v-if=&quot;isInputFocus || isWeb&quot; name=&quot;erase&quot; size=&apos;36px&apos; color=&apos;#b2b2b2&apos; &gt;&lt;/wxs-icon&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      searchKeyWord: &apos;&apos;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    onClickErase() &#123;</span><br><span class=\"line\">      this.searchKeyWord = &apos; &apos;;</span><br><span class=\"line\">      this.$nextTick(() =&gt; &#123;</span><br><span class=\"line\">        this.searchKeyWord = &apos;&apos;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、Weex-input输入框组件-在安卓下input事件BUG\"><a href=\"#2、Weex-input输入框组件-在安卓下input事件BUG\" class=\"headerlink\" title=\"2、Weex input输入框组件 在安卓下input事件BUG\"></a>2、Weex input输入框组件 在安卓下input事件BUG</h3><p>当使用v-model绑定值时，还原到绑定值原始状态时，无法触发input事件，此时还影响到v-model的绑定。在android上的表现为对输入框的input事件进行监听；打开页面选中输入框，对输入框输入一串文字，此时成功的触发了input事件。按键盘上的删除，最初也是成功的触发input事件，当最后一个字符被删除时，input事件并不会触发。如果不使用value来设置值，改使用v-model，也会出现这样的情况。通过查阅资料，发现这个是weex android sdk存在的一个坑点（作者没太接触过安卓开发）<a href=\"https://segmentfault.com/q/1010000010238162/a-1020000010276364\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000010238162/a-1020000010276364</a>里面给出了一张修改源码的方式来解决该BUG。主要问题是在WXInput的父类AbstractEditComponent类中, mIgnoreNextOnInputEvent 这个变量在组件初始化的时候被设置为了TRUE，导致了第一次输入input内容显示不出来。使用上一个问题的方法也可以成功的解决该问题，也可以将searchKeyWord的初始值置为undefined也可以很好的规避该问题。</p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p>组件命名应避免使用JS关键字和保留字，以及weex提供的组件名称，如用loading作为组件名称，在ios与android中将呈现空白。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Loading&gt;&lt;/Loading&gt; /* 改用其他名称 */</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义slider组件\"><a href=\"#自定义slider组件\" class=\"headerlink\" title=\"自定义slider组件\"></a>自定义slider组件</h3><p>weex本身提供了slider组件，但轮播图指示器（indicator）只能修改颜色与位置，大小却无法更改，所以需要自定义slider组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;!-- 首页banner区块 --&gt;</span><br><span class=\"line\">  &lt;div class=&quot;activity-wrap&quot; :style=&quot;&#123; top: (topSafeAreaHeight + 123) + &apos;px&apos; &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;slider class=&quot;activity&quot; :autoPlay=&quot;true&quot; interval=&quot;4000&quot; @change=&quot;sliderChange&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;activity-cell&quot;</span><br><span class=\"line\">        v-for=&quot;(item, index) in bannerList&quot; :key=&quot;index&quot;</span><br><span class=\"line\">        @click=&quot;clickInBanner(item)&quot;&gt;</span><br><span class=\"line\">        &lt;image class=&quot;activity-wrap-bg&quot; resize=&quot;cover&quot; :src=&quot;imageRes.bannerBgImg&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">        &lt;image class=&quot;activity-wrap-image&quot; :src=&quot;item.pictureUrl&quot;&gt;&lt;/image&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/slider&gt;</span><br><span class=\"line\">    &lt;div class=&quot;slider-indicator-wrap&quot; v-if=&quot;bannerList &amp;&amp; bannerList.length &gt; 1&quot;&gt;</span><br><span class=\"line\">      &lt;div</span><br><span class=\"line\">        v-for=&quot;(icon, index) in bannerList&quot;</span><br><span class=\"line\">        :key=&quot;index&quot;</span><br><span class=\"line\">        ref=&quot;activeSliderKey&quot;</span><br><span class=\"line\">        class=&quot;slider-indicator&quot;</span><br><span class=\"line\">        :class=&quot;[index === 0 ? &apos;slider-indicator-left&apos; : &apos;&apos;]&quot;</span><br><span class=\"line\">      &gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  ...,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    // 首页banner切换回调</span><br><span class=\"line\">    sliderChange(&#123; index &#125;) &#123;</span><br><span class=\"line\">      const self = this;</span><br><span class=\"line\">      if (self.bannerList.length &gt; 0) &#123;</span><br><span class=\"line\">        for (let i = 0; i &lt; self.bannerList.length; i += 1) &#123;</span><br><span class=\"line\">          animation.transition(self.$refs.activeSliderKey[i], &#123;</span><br><span class=\"line\">            styles: &#123;</span><br><span class=\"line\">              backgroundColor: &apos;rgba(255, 255, 255, 0.3)&apos;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            delay: 0,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        animation.transition(self.$refs.activeSliderKey[index], &#123;</span><br><span class=\"line\">          styles: &#123;</span><br><span class=\"line\">            backgroundColor: &apos;rgba(255, 255, 255)&apos;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          delay: 0,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>weex不支持帧动画，但本身自带的transition可以传入对应的style，并通过setInterval来控制动画循环播放</p>\n<p><strong>animation.js</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const animation = weex.requireModule(&apos;animation&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">export function transition(el, opts, dd) &#123;</span><br><span class=\"line\">  const duration = dd || 400;</span><br><span class=\"line\">  if (!el) &#123;</span><br><span class=\"line\">    return Promise.resolve();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return new Promise((resolve) =&gt; &#123;</span><br><span class=\"line\">    animation.transition(el, &#123;</span><br><span class=\"line\">      duration,</span><br><span class=\"line\">      timingFunction: &apos;linear&apos;,</span><br><span class=\"line\">      delay: 0,</span><br><span class=\"line\">      ...opts,</span><br><span class=\"line\">    &#125;, resolve);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function run(el) &#123;</span><br><span class=\"line\">  transition(el, &#123;</span><br><span class=\"line\">    styles: &#123;</span><br><span class=\"line\">      transform: &apos;scale(1.02)&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;, 100).then(() =&gt; &#123;</span><br><span class=\"line\">    transition(el, &#123;</span><br><span class=\"line\">      styles: &#123;</span><br><span class=\"line\">        transform: &apos;scale(1.08)&apos;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;, 200);</span><br><span class=\"line\">  &#125;).then(() =&gt; &#123;</span><br><span class=\"line\">    transition(el, &#123;</span><br><span class=\"line\">      styles: &#123;</span><br><span class=\"line\">        transition: &apos;scale(1)&apos;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;, 300);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>page.vue</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;btn&quot;&gt;&lt;/btn&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      setInterval(() =&gt; &#123;</span><br><span class=\"line\">        animation.run(this.$refs.btn);</span><br><span class=\"line\">      &#125;, 600);</span><br><span class=\"line\">    &#125;, 300);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://juejin.im/post/5bed1477e51d456c57127b30\" target=\"_blank\" rel=\"noopener\">企鹅电竞weex实践——UI开发篇</a></li>\n<li><a href=\"https://segmentfault.com/q/1010000010238162/a-1020000010276364n\" target=\"_blank\" rel=\"noopener\">weex 中Android的v-model双向绑定 输入第一个字符时无响应</a></li>\n</ul>"},{"title":"[转]你不知道的JavaScript上卷读书笔记","date":"2018-11-29T10:05:24.000Z","_content":"链接：https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4\n来源：掘金\n# 第一部分 作用域和闭包\n## 第一章 作用域是什么\n<!-- more -->\n\n### 1.1 编译原理\n\n\n**传统编译的三个步骤**\n - **1,分词/词法分析(Tokenizing/Lexing) :** 这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。例如，考虑程序var a = 2;。这段程序通常会被分解成 为下面这些词法单元:var、a、=、2、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。\n - **2,解析/语法分析(Parsing):** 这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“**抽象语法树**”(Abstract Syntax Tree，AST)。var a = 2; 的抽象语法树中可能会有一个叫作 VariableDeclaration 的顶级节点，接下来是一个叫作Identifier(它的值是a)的子节点，以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral(它的值是 2)的子节点。\n - **3,代码生成:** 将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指令，用来创建一个叫作 a 的变量(包括分配内存等)，并将一个值储存在 a 中。\n\n***说明:*** 此处只需记住第一步:分词/词法分析.第二步:解析/语法分析,得到抽象语法树(AST).第三步:代码生成,将抽象语法树转换为机器指令.\n\n**JavaScript与传统编译的不同点:**\n\n - 1,JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化.\n - 2,JavaScript与传统的编译语言不同，它不是在构建之前提前编译的，大部分情况下,它是在代码执行前的几微秒(甚至更短)进行编译.\n - 3,JavaScript 引擎用尽了各种办法(比如 JIT，可以延 迟编译甚至实施重编译)来保证性能最佳。\n - 4,JavaScript的编译结果不能在分布式系统中进行移植。\n\n### 1.2 理解作用域\n\n#### 1.2.1 演员表(代码编译到执行的参与者)\n首先介绍将要参与到对程序 var a = 2; 进行处理的过程中的演员们，这样才能理解接下来将要听到的对话。\n\n - 引擎\n从头到尾负责整个 JavaScript 程序的编译及执行过程。\n - 编译器\n引擎的好朋友之一，负责语法分析及代码生成等脏活累活(详见前一节的内容)。\n - 作用域\n引擎的另一位好朋友，负责收集并维护由所有声明的标识符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。\n#### 1.2.2 对话(代码编译执行过程)\n![JavaScript对var a =2;的处理过程](https://user-gold-cdn.xitu.io/2018/11/25/1674b0e35937a479?w=1186&h=1292&f=png&s=105617)\n\n#### 1.2.3 作用域的LHS查询和RHS查询\n由上图可知,引擎在获得编译器给的代码后,还会对作用域进行询问**变量**.\n\n现在将例子改为var a = b;此时引擎会对变量a和变量b都向**作用域**进行查询.查询分为两种:LHS和RHS.其中L代表左.R代表右.即对变量a进行LHS查询.对变量b进行RHS查询.\n\n单单从表象上看.LHS就是作用域对`=`左边变量的查询.RHS就是作用域对`=`右边变量的查询.但实际上并不是这么简单,首先LHS和RHS都是对变量进行查询,这也是我为什么要将例子从var a=2;改为var a=b;两者的区别是两者最终要查询到的东西并不一致.LHS是要查询到变量的声明(而不是变量的值),从而后面可以为其赋值.RHS是要查询到变量最终的值.还有一点,LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“= 赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最 好将其理解为“赋值操作的目标是谁(LHS)”以及“谁是赋值操作的源头(RHS)”.或者这样理解如果这段代码需要得到该变量的'源值',则会进行RHS查询.\n\n#### 1.2.4 引擎和作用域的对话\n这部分比较简单就是通过拟人方式比喻引擎和作用域的合作过程.一句话概括就是,引擎进行LHS和RHS查询时都会找作用域要.\n```js\nfunction foo(a) { \n  console.log( a ); // 2\n}\nfoo( 2 );\n```\n让我们把上面这段代码的处理过程想象成一段对话，这段对话可能是下面这样的。\n\n引擎:我说作用域，我需要为 foo 进行 RHS 引用。你见过它吗?        \n作用域:别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。       \n引擎:哥们太够意思了!好吧，我来执行一下 foo。         \n引擎:作用域，还有个事儿。我需要为 a 进行 LHS 引用，这个你见过吗?       \n作用域:这个也见过，编译器最近把它声名为 foo 的一个形式参数了，拿去吧。       \n引擎:大恩不言谢，你总是这么棒。现在我要把 2 赋值给 a。 \t       \n引擎:哥们，不好意思又来打扰你。我要为 console 进行 RHS 引用，你见过它吗?       \n作用域:咱俩谁跟谁啊，再说我就是干这个。这个我也有，console 是个内置对象。 给你。       \n引擎:么么哒。我得看看这里面是不是有 log(..)。太好了，找到了，是一个函数。       \n引擎:哥们，能帮我再找一下对 a 的 RHS 引用吗?虽然我记得它，但想再确认一次。       \n作用域:放心吧，这个变量没有变动过，拿走，不谢。\t       \n引擎:真棒。我来把 a 的值，也就是 2，传递进 log(..)。\n\n### 1.3作用域嵌套\n当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。进而形成了一条作用域链.因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。\n\n当引擎需要对作用域进行查询时.引擎会从当前的执行作用域开始查找变量，如果找不到， 就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都 会停止。\n### 1.4 异常\n例子:\n```js\nfunction foo(a) { \n  console.log( a + b ); \n  b = a;\n}\nfoo( 2 );\n```\n\n - 如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 **ReferenceError** 异常。例如上面例子中`console.log(a+b)`由于RHS此时是找不到b的值.故会抛出ReferenceError.\n - 如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 **TypeError**。\n - 当引擎执行 LHS 查询时，**如果在顶层(全局作用域)中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量**，并将其返还给引擎，前提是程序运行**在非 “严格模式”下**。例如上面例子中的`b=a;`.\n - 在严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。\n\n### 1.5 LHS与RHS小结\n - LHS和RHS查询都是引擎对作用域的查询\n - LHS和RHS查询都是只对变量进行查询\n - LHS和RHS都会沿着作用域链进行查询,直到最上层的全局作用域.如果没找到的话,在非严格模式下,LHS则会在全局创建一个相同名称的变量.RHS则会抛出ReferenceError的异常.\n - 如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。\n - LHS只是找到变量的容器而已,方便进行赋值\n - `=`操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。此时都会进行LHS查询\n - RHS查询则需要找到变量的值.\n\n## 第二章 词法作用域\n作用域分为两种工作模式:\n\n - 1,**词法作用域**.是目前最为普遍的，被大多数编程语言所采用的模式.当然JavaScript也是使用的词法作用域.\n - 2,动态作用域.使用较少,比如 Bash 脚本、Perl 中的一些模式等.\n\n### 2.1 词法阶段\n**词法阶段:** 大部分标准语言编译器的第一个工作阶段叫作词法化(也叫单词化)。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。\n\n**词法作用域:** 词法作用域就是定义在词法阶段的作用域也被称为静态作用域。即在JavaScript里作用域的产生是在编译器出来的第一阶段词法阶段产生的,并且是你在书写完代码时就已经确定了的.\n\n**词法作用域位置:** 词法作用域位置范围完全由写代码期间函数所声明的位置来决定.\n\n\n**理解词法作用域及嵌套:**\n看下例子:\n```js \nfunction foo(a) { \n  var b = a * 2;\n  \n  function bar(c) { \n    console.log( a, b, c );\n  }\n\n  bar( b * 3 ); \n}\nfoo( 2 ); // 2, 4, 12\n\n```\n在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们分成3个逐级包含的\"气泡作用域\"。\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b17a466f8fb0?w=2020&h=814&f=png&s=173375)\n\n - 1:包含着整个全局作用域，其中只有一个标识符:foo。\n - 2:包含着 foo 所创建的作用域，其中有三个标识符:a、bar 和 b。\n - 3:包含着 bar 所创建的作用域，其中只有一个标识符:c。\n\n**注意:** 没有任何函数的气泡可以(部分地)同时出现在两个外部作用域的气泡中，就如同没有任何函数可以部分地同时出现在两个父级函数中一样。\n\n**引擎对作用域的查找:**       \n这一部分在上一节中已经说过,就是从当前作用域逐级向上,直到最上层的全局作用域.这里再进一步进行讲解.**作用域查找会在找到第一个匹配的标识符时停止**。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。抛开遮蔽效应， 作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。\n\n**注意:**\n\n - 全局变量会自动成为全局对象(比如浏览器中的 window对象)的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引 用来对其进行访问。例如:`window.a`  通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。\n - 词法作用域查找只会查找一级标识符，比如 a、b 和 c。**如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符**，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。\n\n### 2.2 欺骗词法\n**欺骗词法:** 引擎在运行时来“修改”(也可以说欺骗)词法作用域.或者说就是在引擎运行时动态地修改词法作用域(本来在编译词法化就已经确定的).\n\n**欺骗词法的两种机制:**(下面这两种机制理解了解即可,不推荐实际开发使用)\n\n#### 2.2.1 eval\nJavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。即将eval放在该词法作用域,然后eval携带的代码就会动态加入到该词法作用域.\n\n通过下面的例子加深理解:\n```js \nfunction foo(str, a) { \n  eval( str ); // 欺骗! \n  console.log( a, b );\n}\nvar b = 2;\nfoo( \"var b = 3;\", 1 ); // 1, 3\n\n```\neval(..) 调用中的 \"var b = 3;\" 这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量 b，因此它对已经存在的 foo(..) 的词法作用域进行了修改。当 console.log(..) 被执行时，会在 foo(..) 的内部同时找到 a 和 b，但是永远也无法找到外部的 b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。\n\n**注意:** \n\n - eval(..) 通常被用来执行动态创建的代码.可以据程序逻辑动态地将变量和函数以字符形式拼接在一起之后传递进去。\n - 在严格模式下,eval(...)无法修改所在的作用域。\n - 与eval(...)类似,setTimeout(..)和 setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。\n - new Function(..) 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数(前面的参数是这个新生成的函数的形参)。这种构建函数的语法比 eval(..) 略微安全一些，但也要尽量避免使用。\n```js \nvar sum = new Function(\"a\", \"b\", \"return a + b;\");\nconsole.log(sum(1, 1111));  //1112\n\n```\n\n#### 2.2.2 with(不推荐实际使用)\n例子:\n```js \nfunction foo(obj) { \n  with (obj) {\n    a = 2; \n  }\n}\n\nvar o1 = {\n  a: 3\n};\n\nvar o2 = { \n  b: 3\n};\nfoo( o1 );\nconsole.log( o1.a ); // 2\n\nfoo( o2 );\nconsole.log( o2.a ); // undefined\nconsole.log( a ); // 2——不好，a 被泄漏到全局作用域上了!\n```\n起初你会觉得o1的a属性被with里的a进行了词法引用被遮蔽了成为了2.而o2没有a属性,此时with不能进行词法引用,所以此时o2.a就会变成undefined.但是,为什么最后console.log(a)会为2?因为在执行foo(o2)时,with会对其中的a=2进行LHS查询,但它在o2作用域,foo()作用域,全局作用域都没找到,因此就创建了一个全局变量a并随后赋值2.\n\n总的来说,with就是将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。\n\n**注意:** 使用 eval(..) 和 with 的原因是会被严格模式所影响(限制)。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval(..) 也被禁止了。\n\n#### 2.2.3 性能\nJavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行**静态分析**，并**预先确定**所有变量和函数的定义位置，才能在执行过程中快速找到标识符。但是eval(..) 和 with会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词法作用域。这么做就会导致引擎无法知道eval和with它们对词法作用域进行什么样的改动.只能对部分不进行处理和优化!因此如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢!。\n\n### 2.3 小结\n\n - 词法作用域是在你书写代码时就已经决定了的.在编译的第一阶段词法分析阶段产生词法作用域.此时词法作用域基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。\n - eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域(在运行时)。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域(同样是在运行时)。\n - 一般不要在实际代码中使用eval(...)和with,因为不仅危险,而且会造成性能问题!\n\n## 第三章 函数作用域和块作用域\n\n### 3.1 函数中的作用域\n\n - JavaScript 具有基于函数的作用域，一般情况下每声明 一个函数都会创建一个函数作用域.\n - 函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。这样的好处是JavaScript 变量可以根据需要改变值类型。\n\n\n\n### 3.2 隐藏内部实现\n因为\n - 子级函数作用域可以直接访问父级函数作用域里的标识符;\n - 父级函数作用域不能直接访问子级函数作用域里的标识符.\n\n所以用函数声明对代码进行包装，实际上就是把这些代码“隐藏”起来了。\n\n为什么要将代码进行\"隐藏\"?\t\n因为最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必 要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\t\n**隐藏的好处:**\n\n - 实现代码私有化,减少外部对内部代码的干扰,保持其稳定性.\n - **规避冲突:** 可以避免同名标识符之间的冲突， 两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致 变量的值被意外覆盖。那么一般规避冲突的手段有哪些?\n\t - 1. **全局命名空间:** 变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象(命名空间)的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。 \n\t - 2.**模块管理:** 另外一种避免冲突的办法和现代的模块机制很接近，就是从众多模块管理器中挑选一个来 使用。实际上就是我们常用的amd,commonjs,import模块机制.\n\n### 3.3 函数作用域\n**函数声明与函数表达式:**\n```js \nfunction foo() {\n\t...\n}\n```\n我们知道函数foo内的变量和函数被隐藏起来了,是不会对全局作用域造成污染.但是变量名foo仍然存在于全局作用域中,会造成污染.那有什么方法能避免函数名的污染呢?那就是作为函数表达式,而不是一个标准的函数声明.这样函数名只存在于它自己的函数作用域内,而不会存在于其父作用域,这样就没有了污染.举个函数声明的例子:\n```js \nvar a = 2;\n(function foo(){ \n  var a = 3;\n  console.log( a ); // 3 \n})(); \n  console.log( a ); // 2\n```\n当我们用()包裹一个函数,并立即执行.此时这个包装函数声明是从`(function`开始的而不是从function关键字开始.这样foo就会被当做一个函数表达式,而不是一个函数声明(即foo不会存在于父级作用域中).回到上面的例子中,全局作用域是访问不到foo的,foo只存在于它自己的函数作用域中.\n\n**补充: 什么是函数声明和函数表达式**\n首先我们得了解JS声明函数的三种方式:\n - **函数表达式(Function Expression):** 将函数定义为表达式语句（通常是变量赋值,也可以是自调用形式）的一部分。通过函数表达式定义的函数可以是命名的，也可以是匿名的。因为它可以没有函数名,因此常被用作匿名函数.如果有,其函数名也只存在自身的函数作用域.并且函数表达式不能以“function”开头.函数表达式可以存储在变量或者对象属性里. (在函数声明前加上运算符是可以将其转化为函数表达式的.例如`!`,`+`,`-`,`()`.举个例子:`!function(){console.log(1)}()`的结果是1,并不会报错)\n - **函数声明(Function Declaration):**  函数声明是一种独立的结构,它会声明一个具名函数,并必须以function开头. 且函数声明会进行函数提升.使它能在其所在作用域的任意位置被调用,即后面的代码中可以将此函数通过函数名赋值给变量或者对象属性.\n - **Function()构造器:** 即使用Function构造器创建函数.不推荐这种用法, 容易出问题\n```js \n//Function()构造器\nvar f =new Function()\n\n// 函数表达式\nvar f = function() {\n      console.log(1);  \n}\n\n// 函数声明\nfunction f (){\n     console.log(2);\n}\n\nconsole.log(f())\n//思考一下,这里会打印出什么\n```\n**怎么区分函数声明和函数表达式:**\n看 function 关键字出现在声明中的位置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。例如上例中,是从`(`开始而不是function.\n\n**补充:** 上面这段是原书的解释,我觉得这个解释并不完全,这里给出我自己的解释.\n\n - 表象区别:和它说的一样,只要是**以function开头进行声明,并且含有函数名**的就一定是函数声明.\n - 内在区别:其实我在上面补充两者的定义时已经说得很清楚了,我再对比总结下.\n\t - 函数提升:函数声明,会将整个函数进行提升.而函数表达式则不会提升,它是在引擎运行时进行赋值，且要等到表达式赋值完成后才能调用。 \n\t - 函数表达式是可以没有函数名的,如果有,它的函数名也只存在于自身的作用域,`var f = function fun(){console.log(fun)}`其他地方是没有的.这也避免了全局污染,也方便递归.\n\n#### 3.3.1 匿名和具名\n函数表达式可以是匿名的，而函数声明则不可以省略函数名.有函数名的就是具名函数,没有函数名的就是匿名函数.\n\n匿名函数的缺点:\n\n - 1. 匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。\n - 2. 如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。\n - 3. 匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。\n\n所以给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践.\n\n**PS:** 个人意见是如果函数表达式有赋值给变量或属性名或者就是一次性调用的.其实是没必要加上函数名.因为代码里取名本来就很难,取不好反而会造成误解.\n\n#### 3.3.2 立即执行函数表达式\n比如 (function foo(){ .. })()。第一个 ( ) 将函数变成表达式，第二个 ( ) 执行了这个函数。这就是立即执行函数表达式,也被称为IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression);\n\nIIFE可以具名也可以匿名.好处和上面提到的一样.IIFE还可以是这种形式`(function(){ .. }())`.这两种形式在功能上是一致的。\n\n### 3.4 块作用域\n函数作用域是JavaScript最常见的作用域单元,有时我们仅会将var赋值变量在if或for的{...}内使用,而不会在其他地方使用.但它仍然会对外层的函数作用域造成污染.这个时候就会希望能有一个作用域能将其外部的函数作用域隔开,声明的变量仅在此作用域有效.块作用域(通常就是{...}包裹的内部)就可以帮我们做到这点.\n\n从 ES3 发布以来，JavaScript 中就有了块作用域，而 with 和 catch 分句就是块作用域的两个小例子。\n\n#### 3.4.1 with\n\n我们在第 2 章讨论过 with 关键字。它不仅是一个难于理解的结构，同时也是块作用域的一个例子(块作用域的一种形式)，用 with 从对象中创建出的作用域仅在 with 声明中而非外部作用域中有效。\n\n#### 3.4.2 try/catch\ntry/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。\n```js \ntry {\n  undefined(); // 执行一个非法操作来强制制造一个异常\n}\ncatch (err) {\n  console.log( err ); // 能够正常执行! \n}\nconsole.log( err ); // ReferenceError: err not found\n```\nerr 仅存在 catch 分句内部，当试图从别处引用它时会抛出错误。\t\n那么如果我们想用catch创建一个不是仅仅接收err的块作用域,该怎么做呢?\n```js \ntry{throw 2;}catch(a){ \n  console.log( a ); // 2\n}\nconsole.log( a ); // ReferenceError\n```\n这样就创建了一个块作用域,且a=2,仅在catch分句中存在.在ES6之前我们可以使用这种方法来使用块作用域.\n\n#### 3.4.3 let\nES6 引入了新的 let 关键字，提供了除 var 以外的另一种变量声明方式。let 关键字可以将变量绑定到所在的任意作用域中(通常是 { .. } 内部)。\n\n用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。例如在if的{...}内用let声明一个变量.那什么是显式地创建块作用域呢?就是单独创建`{}`来作为let的块作用域.而不是借用if或者for提供的`{}`.例如`{let a=2;console.log(a)}`     \n**注意:** 使用 let 进行的声明不会在块作用域中进行提升.  \n**块作用域的好处:**\n\n - 1,垃圾收集\n```js \nfunction process(data){\n        // 在这里做点有趣的事情\n     }\n     var someReallyBigData=function(){\n         //dosomeing\n     }\n     process(someReallyBigData);\n\n     var btn=document.getElementById(\"my_button\");\n     btn.addEventListener(\"click\",function click(evt){\n        alert(\"button click\");\n\t\t//假如我们在这里继续调用someReallyBigData就会形成闭包,导致不能垃圾回收(这段是书里没有,我加上方便理解的)\n     },false);\n```\nclick 函数的点击回调并不需要 someReallyBigData 变量。理论上这意味着当 process(..) 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于 click 函数形成了一个覆盖整个作用域的闭包，JavaScript 引擎极有可能依然保存着这个结构(取决于具体实现)。\t\n但显式使用块作用域可以让引擎清楚地知道没有必要继续保存 someReallyBigData 了:\n ```js \nfunction process(data){\n        // 在这里做点有趣的事情\n     }\n     // 在这个块中定义的内容可以销毁了! \n\t {\n       let someReallyBigData = { .. }; \n\t   process( someReallyBigData );\n     }\n     var btn=document.getElementById(\"my_button\");\n     btn.addEventListener(\"click\",function click(evt){\n        alert(\"button click\");\n     },false);\n```\n\n - 2. let循环\n```js \nfor (let i=0; i<10; i++) { \n\t  console.log( i );\n     }\nconsole.log( i ); // ReferenceError\n```\nfor 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。这样就避免了i对外部函数作用域的污染.\n\n#### 3.4.4 const\n除了 let 以外，ES6 还引入了 const，同样可以用来创建块作用域变量，但其值是固定的(常量)。之后任何试图修改值的操作都会引起错误。\n```js \nvar foo = true;\nif (foo) {\n  var a = 2;\n  const b = 3; // 包含在 if 中的块作用域常量\n  a = 3; // 正常!\n  b = 4; // 错误! \n}\nconsole.log( a ); // 3\nconsole.log( b ); // ReferenceError!\n```\n\n### 3.5 小结\n函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，可以有效地与外部作用域隔开.\t\n\n但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)即块作用域。ES6中就提供了let和const来帮助创建块作用域.\n\n\n## 第四章 提升\n\n### 4.1 先有鸡(赋值)还是先有蛋(声明)\n考虑第一段代码\n```js \na = 2;\nvar a; \nconsole.log( a );\n```\n输出结果是2,而不是undefined\n\n考虑第二段代码\n```js \nconsole.log( a ); \nvar a = 2;\n```\n输出结果是undefined,而不是ReferenceError\n考虑完以上代码,你应该会考虑这个问题.到底是声明(蛋)在前，还是赋值(鸡)在前?\n\n### 4.2 编译器再度来袭\n\n编译器的内容,回忆一下，引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是**找到所有的声明，并用合适的作用域将它们关联起来。 之后引擎会询问作用域,对声明进行赋值操作.**\n\n那么,在编译阶段找到所有的声明后,编译器又做了什么?答案就是**提升**\t\n以上节的第一段代码为例,**当你看到 var a = 2; 时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个声明:var a;和a = 2;。** 第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。在第一个声明在编译阶段时,编译器会对`var a;`声明进行提升(即把`var a;`置于所在作用域的最上面).而`a = 2;`则会保持所在位置不动.此时代码会变成\n```js \nvar a; \na = 2;\nconsole.log( a );\n```\n由此可知,**在编译阶段,编译器会对声明进行提升.即先有蛋(声明)后有鸡(赋值)。**\n**哪些声明会被进行提升?**\n\n - 变量声明:例如上例中的`var a;`.不包括后面的`a = 2;`即**不包含有赋值操作的声明.**\n - 函数声明:注意**是函数声明,而不是函数表达式!**(不清楚可以看前面的3.3节,我有详细说明).函数声明提升,是将整个函数进行提升,而不是仅仅函数名的提升.\n\n### 4.3 函数优先\n函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个“重复”声明的代码中)是函数会首先被提升，然后才是变量。\t\n考虑以下代码:\n```js \nfoo(); // 1\nvar foo;\nfunction foo() { \n  console.log( 1 );\n}\nfoo = function() { \n  console.log( 2 );\n};\n```\n会输出 1 而不是 2 !这个代码片段会被引擎理解为如下形式:\n```js \nfunction foo() { \n  console.log( 1 );\n}\nfoo(); // 1\nfoo = function() { \n  console.log( 2 );\n};\n```\n注意，var foo 尽管出现在 function foo()... 的声明之前，但它是重复的声明(因此被忽略了)，因为函数声明会被提升到普通变量之前。\t\n**注意:** js会忽略前面已经声明的声明(不管是变量声明还是函数声明,只要其名称相同,则后续不会再进行重复声明).但是对该变量新的赋值,会覆盖之前的值.    \n**一句话概括:函数声明的优先级高于变量声明,会排在它前面.**\n\n### 4.4 小结\n\n - 对于`var a = 2`  JavaScript引擎会将var a和 a = 2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。\n - 论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的最顶端，这个过程被称为提升。\n - 声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升(即赋值操作都不会提升)。\n - 注意:，当普通的 var 声明和函数声明混合在一起的时候，并且声明相同时(var的变量名和函数名相同时,会引发js对重复声明的忽略)!一定要注意**避免重复声明!**\n\n## 第五章 作用域闭包\n\n### 5.1 启示\n\n - JavaScript中闭包无处不在，你只需要能够识别并拥抱它。\n - 闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。\n\n### 5.2 实质问题 && 5.3 现在我懂了\n因为这两小节理解透了其实发现书里也没讲什么,这里就进行合并,并补充拓展我自己的理解和总结.     \n**什么是闭包?(广义版)**     \n**书中解释:** 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。     \n**MDN的解释:** 闭包是函数和声明该函数的词法环境的组合。     \n**我的解释(详细版):** 必须包含两点:\n\n - 1,有函数.由于函数自身的特性,它能访问所在的词法作用域.并能保存外部词法作用域的变量和函数到自己的函数作用域.\n - 2,有该函数所在的词法环境.其实在JavaScript中任何函数都会处在一个词法环境中.不管是全局作用域还是函数作用域.\n\n综上**简单版**就是:MDN的解释**闭包是函数和声明该函数的词法环境的组合。**     \n还可以继续延伸成**极简版**:**JavaScript中的函数就会形成闭包**。     \n**Tips:** 注意到上面对`词法作用域`和`词法环境`两词的分开使用了吗?`1,`里此时函数还没被执行,所以使用的是词法作用域即静态作用域.`2,`里,此时函数被执行,此时词法作用域就会变成词法环境(包含静态作用域与动态作用域).所以其实MDN的解释其实更准确一点,\n\n**我们日常使用时所说的闭包(狭义版,严格意义上的):**     \n为了便于对闭包作用域的观察和使用.我们实际使用时会将闭包的函数作用域暴露给当前词法作用域之外.也就是本书一直强调的**闭包函数需要在它本身的词法作用域以外执行**.作者认为符合这个条件才称得上是真正的闭包(也就是我们日常使用常说的'使用闭包',并且**使用任何回调函数其实也是闭包**).     \n所以狭义版就是:闭包是函数和声明该函数的词法环境的组合,并且将闭包的函数作用域暴露给当前词法作用域之外.\t\n\n\n**闭包暴露函数作用域的三种方式:**     \n下面部分是书中没有的,是自己实际使用时的总结,并且**符合这三种形式之一的就是我们日常使用时所说的闭包(狭义版)**\n - 1,通过外部函数的参数进行暴露.\n ```js \nfunction foo() { \n   var a = 2;\n   function bar() { \n    baz(a) //通过外部函数的参数进行暴露\n   }\n   bar(); \n};\nfunction baz(val) { \n    console.log( val ); // 2 \n}\nfoo();\n```\n - 2,通过外部作用域的变量进行暴露\n ```js \nvar val;\nfunction foo() { \n   var a = 2;\n   function bar() { \n    val=a //通过外部作用域的变量进行暴露\n   }\n   bar(); \n};\nfoo();\nconsole.log(val)  //2\n```\n - 3,通过return直接将整个函数进行暴露\n```js \nfunction foo() { \n   var a = 2;\n   function bar() { \n    console.log(a)\n   }\n   return bar //通过return直接将整个函数进行暴露\n};\nvar val=foo();\nval()  //2\n```\n**关于闭包的内存泄露问题:**     \n首先必须声明一点:**使用闭包并不一定会造成内存泄露,只有使用闭包不当才可能会造成内存泄露.**(吐槽:面试很多新人时,张口就说闭包会造成内存泄露)     \n为什么闭包可能会造成内存泄露呢?原因就是上面提到的,因为它一般会暴露自身的作用域给外部使用.如果使用不当,就可能导致该内存一直被占用,无法被JS的垃圾回收机制回收.就造成了内存泄露.     \n**注意:** **即使闭包里面什么都没有,闭包仍然会隐式地引用它所在作用域里的所用变量.**   正因为这个隐藏的特点,闭包经常会发生不易发现的内存泄漏问题.     \n**常见哪些情况使用闭包会造成内存泄露:**\t\n\n - 1,使用定时器未及时清除.因为计时器只有先停止才会被回收.所以决办法很简单,将定时器及时清除,并将造成内存的变量赋值为null(变成空指针)\n - 2,相互循环引用.这是经常容易犯的错误,并且也不容易发现.举个栗子:\n```js \nfunction foo() { \n  var a = {}; \n  function bar() { \n    console.log(a); \n  }; \n  a.fn = bar; \n  return bar; \n};\n```\n这里创建了一个a 的对象，该对象被内部函数bar引用。然后，a创建了一个属性fn指向了bar，最后返回了innerFn()。这样就形成了bar和a的相互循环引用.可能有人说bar里不使用`console.log(a)`不就没有引用了吗就不会造成内存泄露了.NONONO,bar作为一个闭包,即使它内部什么都没有,foo中的所有变量都还是隐使地被 bar所引用。这个知识点是我前面忘记提到的,也是书中没有提到的.算了我现在加到前面去吧.所以即使bar内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将`a.fn = bar`.\n\n - 3,将闭包引用到全局变量上.因为全局变量是只有当页面被关闭的时候才会被回收.\n - 4,在闭包中对DOM进行不当的引用.这个常见于老IE浏览器,现代浏览器已经长大了,已经学会了自己处理这种情况了.这里就不赘述了.想知道的可以自行问谷娘和度娘.\n\n总而言之,**解决办法就是使闭包的能正常引用,能被正常回收.如果实在不行,就是在使用完后,手动将变量赋值null,强行进行垃圾回收.**\n\n\n### 5.4 循环和闭包\n看如下例子:\n```js \nfor (var i=1; i<=5; i++) { \n  setTimeout( function timer() {\n    console.log( i );\n  }, i*1000 );\n}\n```\n我们期望的结果是分别输出数字 1~5，每秒一次，每次一个。     \n但实际结果是,这段代码在运行时会以每秒一次的频率输出五次 6。     \n(关于书里的解释,我觉得有点说复杂了,没说到点子上,下面是我的解释.)     \n**为什么会是这样的结果?**     \ntimer毫无疑问是一个闭包,它是可以访问到外部的变量i.在进行for循环时,timer()会被重复执行5次,也就是它会 console.log( i )5次.(关键部分来了!)这5次`i`其实是同一个`i`.它是来自于外部作用域,即for里面声明的i.在**词法作用域中**变量i只可能对应一个唯一的值,即**变量和它的值是一一对应的.不会变化的**.那这个值到底是多少呢?**这个值就是最终值!** i的最终值就是6即for循环完后`i`的值.当引擎执行`console.log( i )`时,它会询问i所对应的作用域,问它i的值是多少.这个时候作用域进行RHS查询得到的结果就是最终值6.\t\t\n\n**为什么我们会以为分别输出1~5?**     \n因为在for循环中,我们错以为每一次循环时,函数所输出的i是根据循环动态变化的.即是1~5累加变化的.但实际上它所访问的i是同一个固定不变的值,即最终值6.可能你会有这样的疑惑,那我循环还有意义吗?i其实一开始就确定是6了.没有变化过!错!`i`变化过,它的确是从1逐步增加到6的.只是外部作用域的i值只可能是循环完后的最终值,并且函数timer()并没有保存每次i变化的值.它只是访问了外部作用域的i值即最终的值6. OK我们知道了出错的地方,就是我们没有把每次i的值保存在一个独立的作用域中.\n接下来,看下这个改进的例子结果是多少.\t\n```js \nfor (var i=1; i<=5; i++) { \n  (function() {\n    setTimeout( function timer() { \n\t  console.log( i );\n    }, i*1000 );\n  })();\n}\n```\n它的最终值仍然是5个6.为什么?我们来分析下,上例中,它用了一个匿名函数包裹了定时器,并立即执行.在进行for循环时,会创造5个独立的函数作用域(由匿名函数创建的,因为它是闭包函数).但是这5个独立的函数作用域里的i也全都是对外部作用域的引用.即它们访问的都是i的最终值6.这并不是我们想要的,我们要的是5个独立的作用域,并且每个作用域都保存一个\"当时\"`i`的值.\n\n**解决办法:**\n那我们这样改写.\n```js \nfor (var i=1; i<=5; i++) { \n  (function () {\n    var j =i;\n    setTimeout( function timer() { \n\t  console.log( j );\n    }, j*1000 );\n  })();\n}\n//这次终于结果是分别输出数字 1~5，每秒一次，每次一个。\t\n```\n这样改写后,匿名函数每次都通过j保存了每次i值,这样`i`值就通过j保存在了独立的作用域中.注意此时保存的i值是'当时'的值,并不是循环完后的最终值.这样循环完后,实际上就创建了5个独立的作用域,每个作用域都保存了一个'当时'i的值(通过j).当引擎执行`console.log( j )`询问其对应的独立作用域时,得到的值就是'当时'保存的值,再也不是6了.\t\n我们还可以进一步简写为这样:\n```js \nfor (var i=1; i<=5; i++) { \n  (function(j) {\n    setTimeout( function timer() { \n\t  console.log( j );\n    }, j*1000 );\n  })(i);\n}\n//结果是分别输出数字 1~5，每秒一次，每次一个。\t\n```\n**利用块作用域进行解决:**     \n在es6中,我们不仅可以使用函数来创建一个独立的作用域,我们还可以使用let声明来创建一个独立的块作用域(在`{}`内).所以我们还可以这样改写:\n```js \nfor (let i=1; i<=5; i++) { \n  setTimeout( function timer() {\n    console.log( i );\n  }, i*1000 );\n}\n//结果是分别输出数字 1~5，每秒一次，每次一个。\t\n```\n这样改写,在每次循环时,let都会对i进行声明.并通过循环自带的`{}`创建一个独立的块作用域.并且let声明的i,保存了'当时'`i`的值在当前块作用域里.因此当引擎执行`console.log( i )`时,它会询问对应的块作用域上i的值,得到的结果就是'当时'保存的值.\n\n**延伸:**     \n实际上块作用域可以称得上一个'伪'闭包(之所以是伪,是因为闭包规定了只能是函数).因为它几乎拥有闭包的所有特性.它也可以创建一个独立的作用域,同样外部作用域不能访问块作用域的变量.但块作用域可以访问外部作用域.举个栗子:\n```js \nfunction foo() { \n  var a = 2;\n  {  //通过{} 显示表示块作用域\n    let b = a;\n\tconsole.log('块作用域内',b) //2\n  }\n  console.log('块作用域外',b) //b is not defined\n}\nfoo()\n```\n说了相同点,说说不同点:1,保存变量到块作用域,必须通过let声明.2,块作用域不能和函数一样有名称(函数名)\t\t\n很多不方便使用闭包或者比较麻烦的时候,是可以考虑通过块作用域进行解决.\n\n**总结一下一般什么时候考虑使用闭包:**     \n这部分也是自己工作使用的总结,如果有补充或者不对的地方,欢迎留言指正.\n\n - 1,需要创建一个独立的作用域并隐藏一些变量或函数,不被外部使用;或者想保存一些外部作用域的变量或函数到这个独立作用域.\n - 2,只想暴露**一部分**自身作用域的变量或函数给外部使用.\n\n### 5.5 模块\n首先看下面的例子:\n```js \nfunction CoolModule() {\n  var something = \"cool\";\n  var another = [1, 2, 3];\n  function doSomething() { \n    console.log( something );\n  }\n  function doAnother() {\n    console.log( another.join( \" ! \" ) );\n  }\n  return {\n      doSomething: doSomething,\n\t  doAnother: doAnother\n  }; \n}\nvar foo = CoolModule(); \n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1 ! 2 ! 3\n```\n首先我们对上面这段代码进成分行分析:     \n私有数据变量:something, another     \n内部函数:doSomething, doAnother     \n直接说结论,上面这个例子就是模块模式.**它return返回的这个对象也就是模块也被称为公共API(至少书中是这样称呼的).CoolModule()就是模块构造器或者叫模块函数.**     \n**注意**:\n - **这里的模块和我们所说的模块化开发不是完全一样的!**\n - 模块不一定非要是标准对象,也可以是一个函数,函数本质上也是对象,函数也可以有自己的属性.\n - 书中有这样一句话`CoolModule() 只是一个函数，必须要通过调用它来创建一个模块实例。如果不执行外部函数，内部作用域和闭包都无法被创建。`我觉得这句话有必要延伸说一下.函数调用一次就会创建一个该函数的作用域(不调用就不会创建),包括创建它里面的变量和函数.\n\n**模块模式:**     \n模块模式需要具备以下2个条件:(这里结合上面的例子,对书中的定义进行说明方便理解)\n\n - 1, 必须有外部的封闭函数(即CoolModule)，该函数必须至少被调用一次(每次调用都会创建一个新的模块实例-->模块实例指的就是函数return返回的对象)。\n - 2, 封闭函数(即CoolModule)必须返回至少一个内部函数(即doSomething, doAnother)，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态(即something, another)。\n\n**模块:**     \n表面上看由模块函数(例子中的CoolModule)所返回的对象就是模块.但**模块还必须还包含模块函数的内部函数(即闭包函数)**.只有包含了才能真正称得上是模块.才强调一次这里的模块与模块化里的模块是有区别的,也不是nodejs里的模块.\n\n**模块函数:**     \n模块函数也就是模块构造器,例子中的CoolModule().一般它有两个常见用法.\n\n - 通过接受参数,对输出的模块进行修改.\n - 通过添加模块里添加相关的内部函数,实现对输出模块数据的增删改查.(书中用`命名将要作为公共API返回的对象`.我觉得`命名`应该是用错了,应该是`修改`即增删改查更好)\n\n####  **5.5.1 现代的模块机制**\n大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。\n下面就介绍一个简单的模块管理器实现例子(对书中的例子进行逐行解读):\n```js \n//首先实例化我们的模块管理器,取名myModules\nvar MyModules=(function Manager() {\n    \n    //作为我们的模块池,保存所有定义的模块\n    var modules={};\n\n    /**\n     *使用类似AMD的方式定义新模块，接收3个参数\n     *name:模块名\n     *deps:数组形式表示所依赖的其他模块\n     *impl:模块功能的实现\n    **/ \n    function define(name,deps,impl) {\n        \n        //遍历依赖模块数组的每一项，从程序池中取出对应的模块,并赋值.\n\t\t//循环完后,deps由保存模块名的数组变成了保存对应模块的数组.\n        for (var i=0;i<deps.length;i++) {\n            deps[i]=modules[deps[i]];\n        }\n        //将新模块存储进模块池，并通过apply注入它所依赖的模块(即遍历后的deps,实际上就是用deps作为impl的入参)\n        modules[name]=impl.apply(impl,deps);\n    }\n    //从模块池中取出对应模块\n    function get (name) {\n        return modules[name];\n    }\n    //暴露定义模块和获取模块的两个api\n    return {\n        define: define,\n        get: get\n    }\n})()\n```\n**说明:**  后面书中说了这么一句`为了模块的定义引入了包装函数(可以传入任何依赖)`,这里包装函数指的是Manger(),同样也是我们上节提到的模块函数.首先说明下什么是包装函数.例如函数A当中还有一个函数B.当我们想要调用函数B的时候,则需要先调用函数A.那么函数A就叫做函数B的包装函数.也就是说我们想调用某个模块时,需要先调用它的包装函数即这里的Manger().接着是后面那句`并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。`注意这里的返回值是指impl的返回值.\n\n接着看通过管理器来定义和使用模块\n\n```js\nMyModules.define('bar',[],function () {\n    function hello (who) {\n        return \"Let me introduce: \" + who;\n    }\n\t//返回公共API 即提供一个hello的接口\n    return {\n        hello:hello\n    };\n});\n\nMyModules.define('foo',['bar'],function (bar) {\n    var hungry = \"hippo\";\n\t\n    functin awesome () {\n\t//这里的bar为返回模块bar返回的公共API\n        console.log( bar.hello( hungry ).toUpperCase() );\n    }\n\t//返回公共API 即提供一个awesome的接口\n    return {\n        awesome:awesome\n    }\n})\n\nvar bar=MyModules.get('bar');//通过管理器获取模块'bar'\nvar foo=MyModules.get('foo');//通过管理器获取模块'foo'\n\nconsole.log(\n//调用模块bar的hello接口\n         bar.hello( \"hippo\" ) \n); // Let me introduce: hippo \n\n//调用模块foo的awesome接口\nfoo.awesome(); // LET ME INTRODUCE: HIPPO\n\n```\n这节的主要内容还是了解现在是如何对模块进行一个规范处理.主要是两部分内容,一个是通过名称和依赖合理定义模块并储存.另一个则是通过名称对存储的模块的调用.其实还可以再增加一个删除模块的方法.\n\n#### **5.5.2 未来的模块机制**\nok,这节说的模块,就是我们常说的模块化开发.并且主要提到的就是ES6里常用的import.没什么好说的.\n\n### 5.6 小结\n**吐槽:** 同一个函数概念在5.5这一个小节里,居然换着花样蹦出了三个名字!一会叫模块构造器!一会叫模块函数!以及最后的包装函数!每变化一次,都得想一遍它指的是啥!真的是无力吐槽了!!!!\n\n闭包:当函数可以记住并访问所在的词法作用域，并且函数是在当前词法作用域之外执行，这时 就产生了闭包。\n\n模块有两个主要特征:\n\n - (1)为创建内部作用域而调用了一个包装函数(模块构造器的实例化,不想对频繁换名字吐槽了);\n - (2)包装函数的返回值(也就是模块)必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。\n\n# 第二部分\n## 第一章 关于this\n\n### 1.1 为什么要用this\n因为this 提供了一种更优雅的方式来隐式“传递”一个对象(即上下文对象)引用，因此可以将 API 设计得更加简洁并且易于复用。\n\n### 1.2 误解\n下面两种常见的对于 this 的解释都是错误的(看看就好,就不过多解读了,以免增加了对错误的印象)。\n\n#### 1.2.1 指向自身\n人们很容易把 this 理解成指向函数自身.\t\n\n具名函数，可以在它内部可以使用函数名来引用自身进行递归,添加属性等。(这个知识点其实在第三章提过,既然这里又提了一遍,我也再说一遍.)例如:\n```js \nfunction foo() {\n  foo.count = 4; // foo 指向它自身\n}\n```\n匿名函数如果想要调用自身则,需要使用`arguments.callee`不过这个属性在ES5严格模式下已经禁止了,也不建议使用.详情可以查看[MDN的说明.](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n\n#### 1.2.2 它的作用域\n**切记:** **this 在任何情况下都不指向函数的词法作用域。你不能使用 this 来引用一个词法作用域内部的东西。** 这部分只需记住这一段话就行.\n\n**终极疑问:** JavaScript里的作用域到底是对象吗?\t\n这小节最令我在意的是里面这句话\"在 JavaScript 内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过 JavaScript代码访问，它存在于JavaScript 引擎内部。\"它让我想起了最开始学JS的一个疑问,JavaScript里的作用域到底是对象吗.虽然\"在JS里万物皆对象\".但是作用域给人的感觉却不像是一个对象.更像是一个范围,由函数的`{}`围城的范围,限制了其中变量的访问.但直觉告诉我它和对象还是应该有点联系的.直到读到书中的这段话,更加印证了我的感觉.\t\n在JavaScript里,作用域其实是一个比较特殊的对象,作用域里所有可见的标识符都是它的属性.只是作用域对象并不能通过JavaScript代码被我们访问,它只存在于JavaScript引擎内部.所以作用域作为一个\"对象\"是经常被我们忽略.\n\n### 1.3 this到底是什么\nthis 是在运行时(runtime)进行绑定的，**并不是在编写时绑定**，它的上下文(对象)取决于函数调用时的各种条件。this 的绑定和函数声明的位置没有任何关系，**只取决于函数的调用方式**。\n\n当一个函数被调用时，会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。**this 就是记录的其中一个属性**，会在函数执行的过程中用到。(PS:所以this并不等价于执行上下文)\n\n### 1.4 小结\n\n - 学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域\n - this 实际上是在函数被调用时发生的绑定，**它指向什么完全取决于函数在哪里被调用(关于this你必须记住的话)**。\n\n## 第二章 this全面解析\n\n### 2.1 调用位置\n通过上节我们知道,this的绑定与函数的调用位置有关.那调用位置是什么.调用位置就是函数在代码中被调用的位置(**而不是声明的位置**)。\n\n要寻找调用位置,最重要的是要分析调用栈(就是为了到达当前执行位置所调用的所有函数)。我们关心的调用位置就在当前正在执行的函数的前一个调用中。PS:调用栈其实是一个解释起来有点复杂的概念.这里我就不过多解释,这里推荐一篇[文章](https://juejin.im/post/5a05b4576fb9a04519690d42),解释得不错.\n\n这节书里的例子解释得不错,这里就不复制代码了.其实分析调用栈只是为了在运行时找到我们关心的函数到底**在哪里和被谁调用了.** 但是实际别写代码时,其实并不会分析得这么清楚的,我们还是只需记住`this的指向就是我们调用该函数的上下文对象.意思就是我们在哪里调用该函数,this就指向哪里`.并且查看调用栈还可以通过浏览器的开发者工具,只需在疑惑的代码上一行加上debugger即可.浏览器在调试模式时,我们就可以在调用列表里查看调用栈.我们一般也仅在查找bug时,会使用该方法.\n\n### 2.2 绑定规则\n在找到调用位置后,则需要判定代码属于下面四种绑定规则中的哪一种.然后才能对this进行绑定.     \n**注意:** this绑定的是上下文**对象**,**并不是函数自身也不是函数的词法作用域**\n\n#### 2.2.1 **默认绑定**\n**什么是独立函数调用**:对函数直接使用而不带任何修饰的函数引用进行调用.简单点一个函数直接是`func()`这样调用,**前面什么都没有**.不同于通过对象属性调用例如`obj.func()`,也没有通过new关键字`new Function()`;也没有通过apply,bind,call强制改变this指向.     \n**默认绑定:** 当被用作独立函数调用时（不论这个函数在哪被调用,不管全局还是其他函数内），this默认指向到window；     \n**注意:** 如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定，因此 this 会绑定到 undefined.\n\n\n#### 2.2.2 **隐式绑定**\n**隐式绑定:** 函数被某个对象拥有或者包含.也就是函数被作为对象的属性所引用.例如`obj.func()`.此时this会绑定到该对象上.     \n**隐式丢失:** 不管是通过函数别名或是将函数作为入参造成的隐式丢失.只需找到它真正的调用位置,并且函数前没有任何修饰也没有显式绑定(下节会讲到)(非严格模式下).那么this则会进行默认绑定,指向window.     \n**注意:** 实际工作中,大部分this使用错误都是由对隐式丢失的不理解造成的.**记住函数调用前没有任何修饰和显式绑定(其实就是call、apply、bind),this就指向window**\n\n#### 2.2.3 **显式绑定**\n在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 间接(隐式)绑定到这个对象上。如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，此时则需要显式绑定.     \n**显式绑定:**  可以直接指定 this 的绑定对象，被称之为显式绑定。基本上就是我们常使用的call、apply、bind方法都是显式绑定.(如果这三个方法不能熟练使用的,建议找度娘或者谷娘学习后,再看这节.)     \n**注意:**\n如果你传入了一个原始值(字符串类型、布尔类型或者数字类型)来当作 this 的绑定对 象，这个原始值会被转换成它的对象形式(也就是new String(..)、new Boolean(..)或者 new Number(..))。这通常被称为“装箱”。\n\n**硬绑定:** 使用call、apply、bind方法强制显式地将this进行绑定,称之为硬绑定。\t\n硬绑定的典型应用场景就是创建一个包裹函数(其实就是常说的封装函数)，传入所有的参数并返回接收到的所有值.\t\n在封装函数中,我们常使用apply.一方面是因为它可以手动绑定this,更重要的是因为可以用apply的第二个参数,方便地注入所有传入的参数.例如之前提到的`modules[name]=impl.apply(impl,deps)`.因为我们不知道传入的参数有多少个,但我们可以方便地使用一个`deps`将其全部注入.另一个常用的是`foo.apply( null,argue)`当我们将apply的第一个参数设置为null时,此时this就会默认绑定到window.切记使用这种用法时**确保函数foo内没有使用this.** 否则很可能会造成全局污染.如果是第三方库的函数就建议不要使用了,因为你不知道别人的函数是否使用了this(关于这部分内容,下节会继续提到).还有一种常用就是`foo.call( this)`.这样foo里的this都会指向当前调用的上下文环境.\n\n**API调用的“上下文”:** 第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”(context)，其作用和 bind(..) 一样，确保你的回调函数使用指定的 this。\n\n#### **2.2.4 new绑定**\nJavaScript 中 new 的机制实际上和面向类的语言完全不同。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，**它们只是被 new 操作符调用的普通函数而已。实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”。**\n\n使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\n\n - 1,创建(或者说构造)一个全新的对象。\n - 2,这个新对象会被执行[[原型]]连接。\n - 3,这个新对象会绑定到函数调用的this。\n - 4,如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。\n\n示例:\n```js\nfunction foo(a) { \n  this.a = a;\n}\nvar bar = new foo(2); \nconsole.log( bar.a ); // 2\n```\n使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。     \n**说明:对于上面这句话进行解释下,如果在一个函数前面带上 new 关键字来调用， 那么背地里将会创建一个连接到该函数的 prototype 的新对象，this就指向这个新对象；**\n\n### 2.3 优先级\n直接上结论:     \nnew绑定=显示绑定>隐式绑定>默认绑定     \n**说明:** new绑定与显示绑定是不能直接进行测试比较,但通过分析发现new绑定内部其实是使用了硬绑定(显示绑定的一种),所以new绑定和显示绑定优先级应该差不多.但话说回来,一般实际使用时,不会这种复杂的交错绑定.所以只需记住下面的判定即可.\n\n**判断this:**     \n现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断:\n\n - 1,函数是否在new中调用(new绑定)?如果是的话this绑定的是新创建的对象。  var bar = new foo()\n - 2,函数是否通过call、apply(显式绑定)或者硬绑定调用?如果是的话，this绑定的是 指定的对象。var bar = foo.call(obj2)\n - 3,函数是否在某个上下文对象中调用(隐式绑定)?如果是的话，this 绑定的是那个上 下文对象。var bar = obj1.foo()\n - 4,如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到 全局对象。var bar = foo()\n就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白 this 的绑定原理了。\n\n### 2.4 绑定例外\n\n#### **2.4.1 被忽略的this**\n如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则,this会绑定到window上.     \n**使用情景:**     \n一种非常常见的做法是使用 apply(..) 来“展开”一个数组(也可以用来方便地参数注入)，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数).通过自带bind方法实现柯里化是很方便的,比自己写要简化好多.\n\n**注意:** \n - 在 ES6 中，可以用 ... 操作符代替 apply(..) 来“展 开”数组，foo(...[1,2]) 和 foo(1,2)是一样的，这样可以避免不必要的 this 绑定。可惜，在 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。\n- 当使用null或者undefined进行绑定时,要**确保该函数内没有使用this**,否则此时很容易对全局变量造成破坏!尤其是使用第三方库的方法!\n\n**更安全的this**     \n如果函数内使用了this,直接使用null则可能会对全局造成破坏.因此我们可以通过创建一个“DMZ”(demilitarized zone，非军事区)对象——它就是一个空的非委托的对象(委托在第 5 章和第 6 章介绍)。让this绑定到这个\"DMZ上.这样就不会对全局造成破坏.\t\n怎么创建DMZ呢.就是通过**Object.create(null)** 创建一个空对象.这种方法和 {} 很像，但是并不会创建 Object.prototype 这个委托，所以它比 {}“更空”更加安全.\n\nPS:实际使用一般不会遇到这种情况(也可能是我太菜,没遇到),如果函数内有this,那肯定是有需要调用的变量或函数,直接把它绑定到一个空对象上.那什么都取不到,还有什么意义?所以函数没有this就传入null.如果有this就把它绑定到真正需要它的对象上,而不是一个空对象上.这些是我自己的见解,如果有不妥的,欢迎留言指正.\n\n#### **2.4.2 间接引用**\n```js \nfunction foo() { \n  console.log( this.a );\n}\nvar a = 2;\nvar o = { a: 3, foo: foo }; \nvar p = { a: 4 };\no.foo(); // 3\n(p.foo = o.foo)(); // 2  其实就是foo()  此时this默认绑定到window\n```\n例子中的间接引用其实是对函数的理解不深造成的.其实(p.foo = o.foo)()就是(foo)(),这样就是全局调用foo()所以this默认就绑定到了window上.     \n**注意:**\t\t\n对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是 函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则 this 会被绑定到全局对象。(对于这段话其实在2.2.1节就应该说了!)\n\n#### **2.4.3 软绑定**\n硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。这时候则需要使用软绑定.     \n**Tips:** 这里给的软绑定方法还是挺好的.但是建议还是在自己的代码里使用,并注释清除.以免别人使用,对this错误的判断.\n\n### 2.5 this词法\n ES6 中介绍了一种无法使用上面四条规则的特殊函数类型:箭头函数。     \n **箭头函数不使用 this 的四种标准规则，而是根据外层(函数或者全局)作用域来决定 this。**(而传统的this与函数作用域没有任何关系,它只与调用位置的上下文对象有关.这点在本章开头就已经反复强调了.)\t\t\n \n **重要:**\n - 箭头函数最常用于回调函数中，例如事件处理器或者定时器.\n - 箭头函数可以像 bind(..) 一样确保函数的 this 被绑定到指定对象\n - 箭头函数用更常见的词法作用域取代了传统的 this 机制。\n\n**注意:** 这种情况:\n```js \nfunction module() {\n  return this.x;\n}\nvar foo = {\n  x: 99,\n  bar:module.bind(this) //此时bind绑定的this为window.\n  \n}\nvar x=\"window\"\n\nconsole.log(foo.bar())//window\n\n```\n\n在 ES6 之前我们就已经在使用一种几乎和箭头函数完全一样的模式:\n```js \nfunction foo() {\nvar self = this; // lexical capture of this \n  setTimeout( function(){\n             console.log( self.a );\n         }, 100 );\n  }\nvar obj = { \n    a: 2\n};\nfoo.call( obj ); // 2\n```\n虽然 self = this 和箭头函数看起来都可以取代 bind(..)，但是从本质上来说，它们想替代的是 this 机制。(的确是这样,我一般会用me替代self.因为少两个单词=.=)\n\n**关于this的编码规范建议:**\n\n - 1. 只使用词法作用域并完全抛弃错误this风格的代码;\n- 2. 完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。\n\n在自己实际工作中,其实是两种混用的,绝大部分情况下都会使用词法作用域风格.因为有时候你真的很难做到完全统一.我现在的习惯是,在写任何函数时,开头第一个就是`var me =this;`这样在看到函数第一眼,就知道:哦,这个函数是用词法作用域风格的.尤其函数内涉及到回调.这样就避免了写着写着发现this绑定到其他地方去了,一个函数里面this不统一的情况.\n\n### 2.6 小结\n(这里总结得很好,我就全部copy了)\n如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。\n\n - 1. 由new调用?绑定到新创建的对象。\n - 2. 由call或者apply(或者bind)调用?绑定到指定的对象。\n - 3. 由上下文对象调用?绑定到那个上下文对象。\n - 4. 默认:在严格模式下绑定到undefined，否则绑定到全局对象。\n\n一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。\t\n\nES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这其实和 ES6 之前代码中的 self = this 机制一样。     \n\n**特别注意:** 其中最需要注意的就是**当你使用jquery或vue时**,此时this是被动态绑定了的.大多数 jQuery 方法将 this 设置为已选择的 dom 元素。使用 Vue.js时，则方法和计算函数通常将 this 设置为 Vue 组件实例。vue文档中`所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () => this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。` 也包括使用第三方ajax时,例如axios.解决方法也很简单,要么使用传统的function或者使用`let _this=this`进行接管.其实当你使用vue时,你默认的思想就是this指的就是vue实例.所以除了钩子函数和axios里会有点影响外,其余还好.\n\n**PS** 这里再补充说明\t\n**上下文(对象)与函数作用域的区别于联系:**\n\n - **上下文：** 可以理解为一个对象，所有的变量都储存在里面.上下文环境是在函数被调用并被引擎执行时创建的.如果你没调用,那么就没有上下文.\n - **作用域：** 除了全局作用域，只有函数和ES6新增的let,const才能创建作用域.创建一个函数就创建了一个作用域，无论你调用不调用，函数只要创建了，它就有独立的作用域.作用域控制着被调用函数中的变量访问.\n - **两者:** 作用域是基于函数的，而上下文是基于对象的。作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的。上下文始终是this关键字有关， 它控制着this的引用。一个作用域下可能包含多个上下文。有可能从来没有过上下文（函数没有被调用）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了(垃圾回收)；有可能同时存在一个或多个（闭包）。\n\n## 第三章 对象\n\n### 3.1 语法\n对象可以通过两种形式定义:声明(文字)形式(就是常说的对象字面量)和构造形式。\n\n - 声明形式(对象字面量):\n ```js\n var myObj = { \n   key: value\n   // ... \n};\n ```\n \n - 构造形式:\n```js\nvar myObj = new Object(); \nmyObj.key = value;\n```\n构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个 键 / 值对，但是在构造形式中你必须逐个添加属性。\nPS:其实我们绝大部分情况下都是使用对象字面量形式创建对象.\n\n### 3.2 类型\n在JavaScript中一共有6中主要类型(术语是\"语言类型\")\n\n - string\n - number\n - boolean  \n - null \n - undefined  \n - object\n\n**简单数据类型:**\t\t\n其中string、boolean、number、null 和 undefined属于简单基本类型,并不属于对象.\t\nnull 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 \"object\"。实际上，null 本身是基本类型。     \n**PS:** 原因是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。\n\n**对象:**     \n对象除了我们自己手动创建的,JavaScript其实内置了很多对象,也可以说是对象的一个子类型.     \n**内置对象:**\t\n - String \n - Number \n - Boolean  \n - Object \n - Function  \n - Array \n - Date \n - RegExp  \n - Error\n\n在 JavaScript 中，这些内置对象实际上只是一些内置函数。这些内置函数可以当作构造函数(由 new 产生的函数调用——参见第 2 章)来使用.     \n**几点说明:**\n\n - 函数就是对象的一个子类型(从技术角度来说就是“可调用的对象”)。JavaScript 中的函数是“一等公民”，因为它们本质上和普通的对象一样(只是可以调用)，所以可以像操作其他对象一样操作函数(比如当作另一个函数的参数)。\n - 通过字面量形式创建字符串,数字,布尔时,引擎会自动把字面量转换成 String 对象,Number对象,Boolean对象，所以它们是可以访对应对象内置的问属性和方法。\n - null 和 undefined 没有对应的构造形式，它们只有文字形式。相反，Date 只有构造，没有文字形式。\n - 对于 Object、Array、Function 和 RegExp(正则表达式)来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量(这是肯定的,因为不管哪种形式一创建出来就是对象类型,不可能是其他类型,实际上是不存在字面量这一说的)。但是使用构造形式可以提供一些额外选项(内置)。\n - Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建。也可以使用 new Error(..) 这种构造形式来创建，不过一般来说用不着。\n\n### 3.3 内容\n对象属性:由一些存储在特定命名位置的(任意类型的)值.\t\n属性名:存储在对象容器内部的属性的名称.属性值并不会存在对象内.而是通过属性名(就像指针,从技术角度来说就是引用)来指向这些值真正的存储位置(就像房门号一样).     \n**属性名的两种形式:**\n\n - 1. 使用`.`操作符.也是我们最常用的形式.它通常被称为\"属性访问\". `.` 操作符会要求属性名满足标识符的命名规范.\n - 2. 使用`[\"..\"] `语法进行访问.这个通常被称为\"键访问\".`[\"..\"] `语法可以接受任意UTF-8/Unicode 字符串作为属性名。并且` [\"..\"] `语法使用字符串来访问属性,如果你的属性名是一个变量,则可以使用书中的例子`myObject[idx]`形式进行访问.这也是最常使用\"键访问\"的情况.但**如果idx是属性名则还是需写成`myObject[\"idx\"]`字符串形式.**\n\n**注意:** **在对象中，属性名永远都是字符串**。如果你使用 string(字面量)以外的其他值作为属性 名，那它首先会被转换为一个字符串。即使是数字也不例外，虽然在数组下标中使用的的 确是数字，但是在对象属性名中数字会被转换成字符串 .\n\n**补充:** 这里我在书中的例子基础上进行了修改,得到这个例子:\n```js \nvar myObject = { \n  a:2,\n  idx:111\n};\nvar idx=\"a\";\nconsole.log( myObject[idx] ); //2\nconsole.log( myObject[\"idx\"] ); //111\nconsole.log( myObject[this.idx] );  // 2 此时this是指向window.[]里的this同样符合上一章所讲的规则\n//结果是否和你所想得一样呢?\n```\n\n#### 3.3.1 **可计算属性名**\nES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名:\n```js \nvar prefix = \"foo\";\n\nvar myObject = {\n   [prefix + \"bar\"]:\"hello\", \n   [prefix + \"baz\"]: \"world\"\n};\nmyObject[\"foobar\"]; // hello\nmyObject[\"foobaz\"]; // world\n```\n\n#### 3.3.2 **属性与方法**\n\n - 我们经常把对象内部引用的函数称为“方法”(的确如此).\n - 实际上函数并不属于该对象,它不过是对函数的引用罢了.对象属性访问返回的函数和其他函数没有任何区别(除了可能发生的隐式绑定this到该对象)。\n - 即使你在对象的文字形式中声明一个函数表达式，这个函数也不会“属于”这个对象—— 它们只是对于相同函数对象的多个引用。\n\n#### 3.3.3 **数组**\n\n - 数组支持` [] `形式访问储存的值,其中`[]`内的值默认形式为数值下标(为从0开始的整数,也就是常说的索引).例如`myArray[0]`\n - 数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性.例如`myArray.baz = \"baz\"`.注意:添加新属性后,虽然可以访问,但数组的 length 值不会改变.\n -  数组可以通过`myArray[1]=11;myArray[\"2\"]=22;`这种形式对数组内容进行修改,添加.\n -  虽然数组也可以和对象一样通过`键/值 对` 形式来使用.但JS已经对数组的行为和用途进行了优化.所以还是建议使用默认的`下标/值 对` 形式来使用.\n\n#### 3.3.4 **复制对象**\n\n - 复制分为浅拷贝和深拷贝.浅拷贝会对对象中的基本数据类型进行复制(在内存中开辟新的区域),对于对象则是继续引用.而不是重新创建一个\"一样的\"对象.深拷贝则是对其中的所有内(容包括对象)进行深层次的复制.\n - 一般情况下我们可以通过JSON来复制对象.`var newObj = JSON.parse( JSON.stringify( someObj ) );`.但需要指出的是这种方法**对于包含function函数或者Date类型的对象则不管用!**\n - ES6 定义了 Object.assign(..) 方法来实现浅复制。具体用法在这就不赘述了.\n\n#### 3.3.5 **属性描述符**\n从 ES5 开始，所有的属性都具备了属性描述符。\n\n - **查看属性描述符:** 可以使用Object.getOwnPropertyDescriptor( myObject, \"a\" );方法查看myObject对象里属性a的属性描述符.\n - **配置属性描述符:** 可以使用Object.defineProperty(..)方法对属性的属性描述符就像配置.举个例子:\n ```js \n var myObject = {};\nObject.defineProperty( myObject, \"a\", {\n         value: 2,\n         writable: true, \n\t\t  configurable: true, \n\t\t  enumerable: true\n     } );\nmyObject.a; // 2\n//该方法可以配置四个属性描述符\n ```\n**注意:** 书中关于`属性描述符也被称为“数据描述符”`其实是不够准确的.\t\t\n对象里目前存在的属性描述符有两种主要形式：**数据描述符**和**存取描述符**。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter和setter函数对描述的属性。**描述符必须是这两种形式之一；不能同时是两者**。(getter和setter是后面马上要讲到的两个描述符)它们的关系如下:(详情可以查看[MDN的解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty))\n\n|       |configurable | enumerable | value | writable | get | set |\n| --- | --- | --- | --- | --- | --- | --- |\n| 数据描述符 | Yes | Yes | Yes | Yes | No | No |\n| 存取描述符 | Yes | Yes | No | No | Yes | Yes |\n\n**如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。**\n\n\n\nvalue就是该属性对应的值。默认为 undefined。下面分别介绍剩下的三个属性描述符键值:\n - **1. Writable**   决定是否可以修改属性的值。当被设置为false后,再对属性值进行修改,则会静默失败(silently failed,修改不成功,也不报错)了。如果在严格模式下，则会报出TypeError错误.\n - **2. Configurable** 决定属性描述符是否可配置.如果为true,就可以使用 defineProperty(..) 方法来修改属性描述符.注意:不管是不是处于严格模式，修改一个不可配置的属性描述符都会出错。并且**把 configurable 修改成 false 是单向操作，无法撤销!** 但是有个例外即便属性是 configurable:false，我们还是可以 把 writable 的状态由 true 改为 false，但是无法由 false 改为 true。除了无法修改，**configurable:false 还会禁止删除这个属性**.\n - **3. Enumerable**  决定该属性是否会出现在对象的属性枚举中.比如说 for..in 循环。如果把 enumerable 设置成 false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。\n\n#### 3.3.6 **不变性**\n除了上面提到的Object.defineProperty(..),ES5还可以通过很多种方法来实现属性或者对象的不可变.     \n**注意:** **这些所有方法都是只能浅不变**,如果目标对象引用了其他对象(数组、对象、函数，等)，其他对象的内容不受影响，仍然是可变的.类似于浅拷贝.\n\n**说明:**  **在 JavaScript 程序中很少需要深不可变性。** 有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。\n\n**方法:**\n - **1. 对象常量(不可改)** 结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性(不可修改、重定义或者删除)\n - **2. 禁止扩展(不可增)** 使用 Object.prevent Extensions(myObject),可以禁止一个对象添加新属性并且保留已有属性.在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。\n - **3. 密封(不可配置,但可修改)** 使用Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 **configurable:false**。密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性(虽然可以修改属性的值)。\n - **4. 冻结(不可配置,也不可修改)** Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用 Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值。这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改(不过就像我们之前说过的，这个对象引用的其他对象是不受影响的)。\n\n**注意:** 你可以“深度冻结”一个对象(连引用的对象也冻结)，具体方法为，首先在这个对象上调用 Object.freeze(..)， 然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..)。但是一定要谨慎!因为你引用的对象可能会在其他地发也被引用.\n\n**说明:** 在 JavaScript 程序中很少需要深不可变性。有些特殊情况可能需要这样做， 但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。\n\n#### 3.3.7 **[[Get]]**\n```js \nvar myObject = { \n   a: 2\n};\nmyObject.a; // 2\n```\n**myObject.a是怎么取到值2的?**     \nmyObject.a 通过对象默认内置的[[Get]] 操作(有点像函数调用:[[Get]]()).首先它会在对象中查找是否有名称相同的属性， 如果找到就会返回这个属性的值。如果没有找到名称相同的属性，按照 [[Get]] 算法的定义会执行另外一种非常重要的行为。其实就是遍历可能存在的 [[Prototype]] 链，也就是在原型链上寻找该属性。如果仍然都没有找到名称相同的属性，那 [[Get]] 操作会返回值 undefined.\n\n**注意:** 如果你引用了一个当前词法作用域中不存在的变量，并不会像对象属性一样返回 undefined，而是会抛出一个 ReferenceError 异常.\n\n#### 3.3.8 **[[Put]]**\n既然有可以获取属性值的 [[Get]] 操作，就一定有对应的 [[Put]] 来设置或者创建属性.\t\t\n\n [[Put]] 被触发时的操作分为两个情况:1. 对象中已经存在这个属性 2. 对象中不存在这个属性.\n \n如果对象中已经存在这个属性,[[Put]] 算法大致会检查下面这些内容:\n - 1. 属性是否是访问描述符(参见下一节)?如果是并且存在setter就调用setter。\n - 2. 属性的数据描述符中writable是否是false?如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。\n - 3. 如果都不是，将该值设置为属性的值。\n\n如果对象中不存在这个属性，[[Put]] 操作会更加复杂。会在第 5 章讨论 [[Prototype]] 时详细进行介绍。\n\n#### 3.3.9 **Getter和Setter**\n对象默认的 [[Put]] 和 [[Get]] 操作分别可以控制属性值的设置和获取。\t\n目前我们还无法操作[[Get]] 和 [[Put]]来改写整个对象 ,但是在ES5中可以使用 getter 和 setter 改写**部分**默认操作,**只能应用在单个属性上，无法应用在整个对象上**。\t\n\n**注意:** 书中后面说的`访问描述符`就是`存取描述符`.关于属性描述符,存取描述符及数据描述符可以查看[MDN的解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty))\n\n**getter:**\t\ngetter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Get]]操作.**当你设置getter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.**\n\n**语法:** `{get prop() { ... } }`或`{get [expression]() { ... } }`.其中`prop`:要设置的属性名. `expression`:从 ECMAScript 2015 开始可以使用计算属性名.\t\n**使用方式:**\n```js \nvar myObject = {\n  a: 1111, //在后面会发现myObject.a为2,这是因为设置了getter所以忽略了value特性.\n  //方式一:在新对象初始化时定义一个getter\n  get a() {\n    return 2\n  }\n};\n\nObject.defineProperty( \n  myObject, // 目标对象 \n  \"b\", // 属性名\n  {\n    // 方式二:使用defineProperty在现有对象上定义 getter\n    get: function(){ return this.a * 2 },\n    // 确保 b 会出现在对象的属性列表中\n    enumerable: true\n   }\n);\n\nmyObject.a = 3;  //因为设置了getter所以忽略了writable特性.所以这里赋值没成功\nmyObject.a; // 2\nmyObject.b; // 4\n\ndelete myObject.a;//可以使用delete操作符删除\n```\n\n\n**setter:**\t\nsetter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Put]]操作(也就是赋值操作).**当你设置setter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.**\t\t\n\n**语法:** `{set prop(val) { . . . }}`或`{set [expression](val) { . . . }}`.其中`prop`:要设置的属性名. `val`:用于保存尝试分配给prop的值的变量的一个别名。`expression`:从 ECMAScript 2015 开始可以使用计算属性名.\t\n**使用方式:**\n```js \nvar myObject = {\n  //注意:通常来说 getter 和 setter 是成对出现的(只定义一个的话 通常会产生意料之外的行为):\n  //方式一:在新对象初始化时定义一个setter\n  set a(val) {\n    this._a_ = val * 2\n  },\n  get a() {\n    return this._a_ \n  }\n};\n\nObject.defineProperty( \n  myObject, // 目标对象 \n  \"b\", // 属性名\n  {\n    set: function(val){ this._b_ = val * 3 },\n    // 方式二:使用defineProperty在现有对象上定义 setter\n    get: function(){ return this._b_ },\n    // 确保 b 会出现在对象的属性列表中\n    enumerable: true\n   }\n);\n\nmyObject.a = 2;  \nmyObject.b = 3;  \nconsole.log(myObject.a); //4\nconsole.log(myObject.b);//9\n\nconsole.log(myObject._a_);//4\nconsole.log(myObject._b_);//9\n\ndelete myObject.a;//可以使用delete操作符删除\n```\n\n#### 3.3.10 **存在性**\n**属性存在性:**\t\t\n如何判断一个对象是否存在某个属性(准确来说是**检查这个属性名是否存在**),这时就需要用到:\n\n - 1. `in`操作符\n in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中(参见第 5 章)。\n  - 2. hasOwnProperty(..) \nhasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。\n\n**注意:**\n - 1.如果有的对象可能没有连接到 Object.prototype( 通过Object. create(null) 来创建——参见第 5 章)。在这种情况下，形如myObejct.hasOwnProperty(..) 就会失败。这时可以使用一种更加强硬的方法来进行判断:Object.prototype.hasOwnProperty. call(myObject,\"a\")，它借用基础的 hasOwnProperty(..) 方法并把它显式绑定(参见第2章)到 myObject 上。\n - 2.对于数组来说,不要使用in操作符,因为它检查的是属性名,在数组中属性名就是索引,它并不是我们所关注的重点.对于数组我们更关注的是它所存的值,所以对于数组检查某个值是否存在还是采用indexOf方法.\n\n**属性可枚举性:**\t\n如果一个属性存在,且它的enumerable 属性描述符为true时.则它是可枚举的.并且可以被for..in 循环.\t\n一个属性不仅仅需要存在,还需要它的enumerable 为true才是可枚举的,才能被for...in遍历到.     \n**注意:** for...in不适合对数组进行遍历,对数组的遍历还是使用传统的for循环.     \n\n对属性的可枚举性判断,则需要用到以下几种方法:\n\n - 1. propertyIsEnumerable(..) 会检查给定的属性名是否直接存在于对象中(而不是在原型链上)并且满足 enumerable:true。\n - 2. Object.keys(..) 会返回一个数组，包含所有可枚举属性.\n - 3. Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。\n\n### 3.4 遍历\n关于这节我觉得还是以理清for..in和for..of为主.后面延伸的@@iterator及Symbol.iterator的使用,没必要过于深究.注意书中123页第二行`done 是一个布尔值，表示是否还有可以遍历的值。`有个错误,应该改成`done 是一个布尔值，表示遍历是否结束。`否则你在看后面它的说明时会感觉到自相矛盾.这里我也是以for..in和for..of为主进行说明,也更贴近我们实际使用.\n\n**for..in**\n - for..in 循环可以用来遍历对象的可枚举属性列表(**包括 [[Prototype]] 链**)。\n - 实际上for..in遍历的并不是属性值,而是属性名(即键名 key).所以你想获取属性值还是需要手动使用obj[key]来获取.\n - 一般在遍历对象时,推荐使用for..in.当然数组也是可以使用for..in的.在遍历数组时,推荐还是使用for..of.\n\n**for..of**\n - ES6 增加了一种用来遍历**数组**的 for..of 循环语法(如果对象本身定义了迭代器的话也可以遍历对象)\n - for..of与for..in最大的不同点是,**它循环的是属性值,而不是属性名.不过它只循环数组里存放的值,不会涉及到对象里的key.**(关于这个我后面的例子里会说具体对比明的)\n - for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next() 方法来遍历所有返回值。数组有内置的 @@iterator，(对象没有,所以不能使用for..of,除非我们自己定义一个)因此 for..of 可以直接应用在数组上。\n\n**例子比较**\n```js \nlet arr = ['shotCat',111,{a:'1',b:'2'}]\narr.say=\"IG niu pi!\"\n//使用for..in循环\nfor(let index in arr){\n    console.log(arr[index]);//shotCat  111  {a:'1',b:'2'}  IG niu pi!\n}\n//使用for..of循环\nfor(var value of arr){\n    console.log(value);//shotCat  111  {a:'1',b:'2'}\n}\n//注意 for..of并没有遍历得到` IG niu pi!`.原因我前面说过`它只循环数组里存放的值,不会涉及到对象里的key.`更不用说 [[Prototype]] 链.(for..in则会)\n```\n\n**如何让对象也能使用for..of ?**     \n你可以选择使用书中的自己通过Object.defineProperty()定义一个Symbol.iterator属性来实现.这里我就不赘述了.也是最接近原生使用感受的.不过我这里要介绍一个稍微简单点的方法来实现.就是使用上节讲到的Object.keys()搭配使用.举个例子:\n```js \nvar shotCat={\n    name:'shotCat',\n    age:'forever18',\n    info:{\n\tsex:'true man',\n    city:'wuhan',\n    girlFriend:'新垣结衣!'\n    }\n}\nfor(var key of Object.keys(shotCat)){\n    //使用Object.keys()方法获取对象key的数组\n    console.log(key+\": \"+shotCat[key]);\n}\n```\n\n### 3.5 小结\n书中小结总结得挺全的,这里我就搬运下\n - JavaScript 中的对象有**字面形式**(比如 var a = { .. })和**构造形式**(比如 var a = new Array(..))。字面形式更常用，不过有时候构造形式可以提供更多选项。\n - 对象是 6 个(或者是 7 个，取决于你的观点)基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。\n - 对象就是键 / 值对的集合。可以通过 .propName 或者 [\"propName\"] 语法来获取属性值。访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作(在设置属性值时是 [[Put]])， [[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话它还会查找 [[Prototype]] 链(参见第 5 章)。\n - 属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用 Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象(及其属性)的不可变性级别。\n - 属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。\n - 可以使用 ES6 的 for..of 语法来遍历数据结构(数组、对象，等等)中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。\n\n## 第四章 混合对象\"类\"\n**注意:** 正如书中提示的那样,整章一半以上几乎都是讲面向对象和类的概念.会读得人云里雾里,给人`哦,也许大概就是这样子`的感觉.后面我还是会对那些抽象的概念找到在JavaScript里对应的\"立足点\",不至于对这些概念太\"飘\".\n\n### 4.1 类理论\n说明:\n\n - 类其是描述了一种代码的组织结构形式.\n - 在js中类常见的就是构造函数,也可以是通过ES6提供的class关键字;继承就是函数;实例化就是对象,常见的就是通过new构造函数实现的.\n\n![类、继承和实例化](https://user-gold-cdn.xitu.io/2018/11/25/1674b48db6fb628b?w=1178&h=695&f=png&s=60553)\n\n**注意:** Javascript语言不支持“类”，所谓的\"类\"也是模拟出的“类”。即使是ES6引入的\"类\"实质上也是 JavaScript 现有的基于原型的继承的语法糖。\n\n#### 4.1.1 **“类”设计模式**\n**一句话**:类其实也是一种设计模式!\n\n - 类并不是必须的编程基础,而是一种可选的代码抽象.\n - 有些语言(比如 Java)并不会给你选择的机会，类并不是可选的——万物皆是类。\n - 其他语言(比如 C/C++ 或者 PHP)会提供过程化和面向类这两种语法，开发者可以选择其中一种风格或者混用两种风格。\n\n#### 4.1.2 **JavaScript中的“类”**\n\nJavaScript 只有一些近似类的语法元素 (比如 new 和 instanceof)，不过在后来的 ES6 中新增了一些元素，比如 class 关键字,其实质上也是 JavaScript 现有的基于原型的继承的语法糖。也不是真正的类.\n\n### 4.2 **类的机制**\n这部分书中的描述,我理解起来也比较费劲,主要是它提到的栈,堆与我理解中内存里的栈,堆相冲突了.这里简单说下我的理解,如有误,感激指正.\n\nstack类其实是一种数据结构.它可以储存数据,并提供一些公用的方法(这和上面提到的类很相似).但是stack类其实只是一个抽象的表示,你想对它进行操作,就需要先对它进行实例化.\n\n#### 4.2.1 **建造**\n这节主要就是说明\"类\"和\"实例\"的关系.\n在JavaScript里\"类\"主要是构造函数,\"实例\"就是对象.\t\n\n一个类就像一张蓝图。为了获得真正可以交互的对象，我们必须按照类来实例化一个东西，这个东西(对象)通常被称为实例，有需要的话，我们可以直接在实例上调用方法并访问其所有公有数据属性。\n\n总而言之:类通过实例化得到实例对象.\n\n#### 4.2.2 **构造函数**\n\n - 类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。\n - 实例就是由构造函数实例化的: new 构造函数.\n - 构造函数大多需要用 new 来调，这样语言引擎才知道你想要构造一个新的类实例。\n - 构造函数会返回一个对象,这个对象就是实例.这个对象可以调用类的方法.\n\n### 4.3 类的继承\n在面向类的语言中，你可以先定义一个类，然后定义一个继承前者的类。后者通常被称为“子类”，前者通常被称为“父类”。子类可以继承父类的行为,并且可以根据自己的需求,修改继承的行为(一般并不会修改父类的行为).注意:我们讨论的父类和子类并不是实例,在JavaScript里类一般都是构造函数。\n\n#### 4.3.1 **多态**\n大概你看了它的\"解释\",对多态还是懵懵懂懂.这里我再解释下:     \n**什么是多态?**     \n同一个操作，作用于不同的对象，会产生不同的结果。发出一个相同的指令后，不同的对象会对这个指令有不同的反应，故称为多态。\t\n**说明:** 书中例子中的inherited其实就是相当于super.并且注意书中的这些例子都是**伪代码!** 并不是真的在JavaScript里就是这样实现的.补充:这里是关于[super的mdn链接.](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super)\n\n - **多态:**\n\t - **相对性:** 其实相对性就是子类相对于父类的引用(例如使用super实现引用),并且子类对父类的引用并不会对父类的行为造成任何影响(并不会对父类**自身**的行为进行重新定义),例如书中例子子类对drive()的引用.\n\t - **可重复定义:** 子类继承父类的某个方法,并可以对这个方法进行再次定义,例如书中子类对drive()中的output进行修改.`当调用方法时会自动选择合适的定义`,这句话怎么理解,当子类实例化后,执行drive()方法时,它并不会直接去执行父类的drive().而是子类上的drive().简单来说就是实例来源于那个类,它就使用那个类的方法.\n\n**说明:** \n\n - 在 JavaScript 中“类”是属于构造函数的(类似 Foo.prototype... 这样的类型引用)。由于 JavaScript中**父类和子类的关系只存在于两者构造函数对应的 .prototype 对象中**，因此它们的构造函数之间并不存在直接联系，从而无法简单地实现两者的相对引用(在 ES6 的类中可以通过 super来“解决”这个问题，参见附录 A)。\n - **多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是复制。**\n - 其实这里讨论的这些概念其实在我们实际工作中,已经使用了无数次,只是现在你需要理解\"原来你是叫这个名字啊!\"\n\n#### 4.3.2 **多重继承**\n**多重继承:** 一个子类可以继承来自多个父类的方法.     \n**多重继承引发的问题:** 多重继承可能会出现,多个父类中方法名冲突的问题,这样`子类`到底引用哪个方法?     \n**多重继承与JavaScript:** JavaScript本身并没有提供多重继承功能.但它可以通过其他方法来达到多重继承的效果.\n\n### 4.4 **混入**\nJavaScript 中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来(参见第 5 章)(其实就是引用,所以它的多态是\"相对\"的)。\t\n由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入(**就是通过混入来模拟实现类的多重继承**)。\n\n#### 4.4.1 **显式混入**\n**郑重提醒:** \t书中这里的类都是对象形式的.例子里的sourceObj, targetObj,这就可能造成一个\"误导\",在JavaScript里是**没有真正的类**,所谓的类也不过是我们模拟出来的\"类\",不过是一种语法糖(包括ES6里的class).在JavaScript里\"所谓的类\"经常是一个构造函数,你并不能这样进行遍历,只能对它的实例对象进行这种操作.不要被书中例子带进去了,不要混淆,毕竟我们最终使用的是JavaScript(而不是其他面向对象的语言.),它里面的类常常并不是一个对象!\n\n**显式混入:**  书中没有给出明确的显式混入的定义,但是读完整章.基本就知道什么是显式混入了.显式混入就是通过类似mixin()方法,显式地将父对象属性逐一复制,或者有选择地复制(即例子中的存在性检查)到子对象上.\t      \n\n**显式混入常用方法:** 就是书中的例子, 首先有子对象,并对其进行特殊化(定义自己的属性或方法).然后再通过mixin()方法将父对象有选择地复制(即存在性检查,过滤子对象已有的属性,避免冲突)到子对象上.\n\n**显式混入注意点:**\n显式混入时,切记一点你要**避免父对象的属性与子对象特殊化的属性冲突**.这就是为什么例子中要进行存在性检查,以及后面要说的混合复制,可能存在的重写风险.\n\n**1. 再说多态**(其实说的就是js里的多态)     \n**显式多态:** 将父对象里的方法通过显式绑定到子对象上.就是显式多态.例如书中的例子:Vehicle.drive.call( this )。**显式多态也是为了JS来模拟实现多重继承的!**     \n**说明:** 在ES6之前是没有相对多态的机制。所以就使用call这种进行显式绑定实现显式动态.注意JavaScript里实现多态的方法也被称为\"伪多态\".所以不要对后面突然冒出的伪多态概念而一脸懵逼(其实整本书经常做这样的事)     \n\n**显式多态(伪多态)的缺陷:** 因为在JavaScript 中存在屏蔽(实际是函数引用的上下文不同),所以在引用的时候就需要使用显式伪多态的方法创建一个函数关联.   这些都会增加代码的复杂度和维护难度(过多的this绑定,真的会让代码很难读)。\n\n\n**2. 混合复制**(显式混入另一种不常用方法)     \n前面的显式混入的方法是先有子对象并进行特殊化,然后再有选择地复制父对象属性.这个不常用的方法则是反过来的,结合书中例子,它先用一个空对象**完全复制**父对象的属性,然后该对象复制特殊化对象的属性,最后得到子对象.这种方法明显是比第一种麻烦的,并且在复制特殊化对象时,可能会对之前重名的属性(即复制得到的父对象属性)进行重写覆盖.所以这种方法是存在风险,且效率低下的.\n\n\n**显式混入的缺陷:**\n - 1. **无法做到真正的复制:** 如果复制的对象中存在对函数的引用,那么子对象得到的是和父对象一样的,对同一个函数的引用.如果某个子对象对函数进行了修改,那么父对象及其他子对象都会受到影响.很明显这是不安全的.原因是JavaScript 中的函数无法进行真正地复制，你只能复制对共享函数对象的引用.\n - 2. **函数名和属性名同名:** 如果混入多个对象,则可能会出现这种情况.目前现在仍没有比较好的方式来处理函数和属性的同名问题(提问:这种情况下谁的优先级更高?滑稽脸)。\n\n**3. 寄生继承**     \n显式混入模式的一种变体被称为“寄生继承”，它既是显式的又是隐式的.\t\n首先会复制一份父类(对象)的定义，然后混入子类(对象)的定义(如果需要的话保留到父类的特殊引用)，然后用这个复合对象构建实例。     \n**说明:** 寄生继承与混合复制是很相似的,最大的区别是寄生继承是通过实例化构造函数(JS中的\"类\")来实现复制的.\n\n#### 4.4.2 **隐式混入**\n**隐式混入:** 它与显示混入最大的区别,就是它没有明显的对父类(对象)属性进行复制的过程.它是通过在构造函数调用或者方法调用中使用显式绑定例如: Something.cool.call( this)来实现混入(多重继承).其本质就是通过改变this指向来实现混入.\n\n### 4.5 **小结**\n整章的重点其实就是让你理解什么叫类.除了最后一小节的混入和JavaScript有那么一点点关系.其余的小结和JavaScript都没什么关系.重要的是理解类这种思想和设计模式.     \n**重点:**\n - 1.**类意味着复制!**\n - 2. 传统的类被实例化时，它的行为会被复制到实例中。类被继承时，行为也会被复制到子类中。\n - 3. 多态(在继承链的不同层次名称相同但是功能不同的函数)看起来似乎是从子类引用父类，但是本质上引用的其实是复制的结果。\n - 4. JavaScript 并不会(像类那样)自动创建对象的副本。(你只能自己手动复制,而且复制的还不彻底!)\n - 5. **混入模式(无论显式还是隐式)可以用来模拟类的复制行为**，但是通常会产生丑陋并且脆弱的语法，比如显式伪多态(OtherObj.methodName.call(this, ...))，这会让代码更加难 懂并且难以维护。\n - 6. 显式混入实际上无法完全模拟类的复制行为，因为对象(和函数!别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。忽视这一点会导致许多问题。\n - 7. 在 JavaScript 中模拟类是得不偿失的，虽然能解决当前的问题，但是可能会埋下更多的隐患。(但实际,我们用得却很多)\n\n## 第五章 原型\n注意:本章的前提是你已经比较熟悉原型及原型链.不太熟或者不知道的可以,通过[这篇文章](https://juejin.im/post/5835853f570c35005e413b19)熟悉下.  \n\n### 5.1 `[[Prototype]]`\nJavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引用(一般就是其构造函数prototype属性的引用)。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。     \n**吐槽:** 书中有这样一句话 \"注意:很快我们就可以看到，对象的 [[Prototype]] 链接可以为空，虽然很少见。\"我前前后后看了三遍都没找到它所说的`对象的 [[Prototype]] 链接可以为空.`的情况!应该是作者写忘记了.ok,这里我来说下`对象的 [[Prototype]] 链接可以为空`的情况.就是通过Object.create(null)得到的对象.它的 [[Prototype]] 是为空的.应该说它的所有都是空的.为什么?因为null是原型链的顶端.它是没有[[Prototype]]的.对应的可以对比下`console.log(Object.create({}))`和`console.log(Object.create(null))`\n\n**[[Prototype]]有什么用?**     \n我原以为作者会说可以作为存放实例对象的公共属性,然后像类一样讲得更深刻点.不过这次只是说了它表明的作用.     \n\n**作用:** 就是存放哪些不在对象自身的属性. 当我们访问一个对象的属性时,此时对象的内部默认操作[[Get]],首先会检查对象本身是否有这个属性，如果有的话就使用它。如果没有的话,[[Get]] 就会继续访问对象的 [[Prototype]] 链.([[Prototype]]其实就是其构造函数的prototype属性.也是一个对象.)如果找到,就返回该属性值.如果没有就继续寻找下一个[[Prototype]]链.直到找完整条[[Prototype]]链.还是没有的话,[[Get]] 就会返回undefined.\n\n**补充:**\n - **使用 for..in 遍历对象时** 任何可以通过原型链访问到 (并且是 enumerable:true)的属性都会被枚举。(其实这个在第三章里我说过)\n - **使用 in 操作符** 同样会查找对象的整条原型链(**无论属性是否可枚举**)\n\n#### 5.1.1 **Object.prototype**\n所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。(Object.prototype的[[Prototype]] 最终会指向null.null就是最后的终点).\t\t\n这个 Object.prototype 对象，包含了 JavaScript 中许多通用的功能,例如:toString() , valueOf(), hasOwnProperty(..)和 isPrototypeOf(..)。\n\n#### 5.1.2 **属性设置和屏蔽**\n**说明:** 看完本节时,切记不要对`myObject.foo = \"bar\"`这种简单的对象属性赋值产生顾虑和疑惑.这种赋值绝对不会对原型链产生任何影响!基本也不会出现赋值不成功的情况.**如果有人敢在团队项目里修改对象的属性描述符,早就被拖出去打死了!!!** 这部分可以看做补充知识,知道有这些奇葩设定就行.其实**这节更应该关注的是`myObject.foo `的返回值.**     \n**注意:** 书中提到的动词`屏蔽`其实指的就是在对象上创建同名属性(原型链上已有该属性).注意不要被绕晕了.还有++就相当于myObject.a=myObject.a+1,注意分解就行,不存在什么特别需要当心的.\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b5220c3a82ce?w=1375&h=962&f=png&s=207062)\n\n\n\n### 5.2 “类”\n\n - JavaScript里只有对象,没有类!\n - JavaScript不需要通过类来抽象对象.而是自己直接创建对象,并定义对象的行为.\n\n#### 5.2.1 **“类”函数**\n吐槽:模仿类竟然被说成奇怪的无耻滥用!?不这样做,js那些高级用法怎么实现?怎么会有现在前端的百花齐放(轮子满地跑)?这也是冒得办法的办法啊!毕竟当时js只是小众,不指望它有多大能耐.毕竟只是一个人用7天\"借鉴\"出来的东西.\n\n**\"类\"函数:** JavaScript用来模仿类的函数就被称为类函数,其实就是我们常说的构造函数.\t\t\n\n**\"类\"函数模拟类的关键:** 所有的函数默认都会拥有一个名为 prototype 的公有并且不可枚举(参见第 3 章)的属性，它会指向另一个对象.当我们通过new 函数(构造函数)来得到实例对象时,此时new会给实例对象一个内部的 [[Prototype]]属性，实例对象内部的[[Prototype]]属性与构造函数的prototype属性都指向同一个对象.那JS的这个特性怎么模拟类呢?首先**类的本质就是复制!**.明白这点后,我们就需要实现伪复制.我们可以将类里的属性,放在函数的prototype属性里.这样该函数的实例对象就可以通过[[Prototype]](原型链)访问这些属性.我们也经常把这种行为称为原型继承(作者后面会疯狂吐槽这个称呼,我后面再解释为什么吐槽).这样就实现了伪\"复制\". 可以达到和类相似的效果.\n\n**注意:** 虽然说所有的函数默认都会拥有一个名为 prototype属性.但也有特殊的时候.就不是默认的情况.就是通过bind()硬绑定时.所返回的**绑定函数,它是没有prototype属性的!**\n\n\n**图解真正的类与JS的模拟类:**\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b57bbca1ee25?w=523&h=523&f=png&s=68402)\n\n\n**关于原型继承这个名字的疯狂吐槽:**      作者的吐槽主要集中在\"继承\"两个字,原因是在面向类的语言中,\"继承\"意味着复制,但在JavaScript里原型继承却根本不是这个意思,它并没有复制,而是用原型链来实现.所以疯狂吐槽其误导.\n\n**什么是差异继承?** 我根本没听过这个术语,初次看作者所谓的解释,这是啥?他想说啥?后来读了好多遍,终于大概理解了.如果你也看不懂作者想在表达什么,就pass这部分.没必要理解.反而会把你看得更迷惑.\t\t\n好了,我来解释下什么叫差异继承.差异继承就是原型继承的一个不常用的别名.我们知道对象可以通过原型链继承一部分属性,但我们仍可以给对象设置其他有差异不同的属性.这也就可以称为差异继承.\n\n#### 5.2.2 **“构造函数”**\n构造函数之所以是构造函数,是因为它**被new调用**,如果没被new调用,它就是一个普通函数.实际上,new会劫持所有普通函数并用构造对象的形式来调用它,并且无论如何都会构造返回一个对象.\n\n#### 5.2.3 **技术**\n关于两种“面向类”的技巧,我这就不说明了,理解了这部分第一第二章关于this的使用,就很简单了.\n\n**prototype.constructor:**\t\n为了正确理解constructor.我特意在标题上加上prototype.是想强调:一个对象访问constructor时,会默认访问其原型对象上的constructor属性.\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b5a12dfc7024?w=573&h=463&f=png&s=87705)\n\n\n\n**注意:**\n```js \nfunction Foo() { /* .. */ }\nFoo.prototype = { /* .. */ }; // 有时候我们会需要创建一个新原型对象,因此也不会有默认的constructor属性指向构造函数\n// 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性\n// 关于 defineProperty(..)，参见第 3 章 \nObject.defineProperty( Foo.prototype, \"constructor\" , {\n  enumerable: false,//不可枚举\n  writable: true,\n  configurable: true,\n  value: Foo // 让 .constructor 指向 Foo\n} );\n//上面这种方法是比较严谨,也比较麻烦的.并且使用Object.defineProperty()风险是很大的.\n//所以我们实际是这样修改的\nFoo.prototype.constructor=Foo; //直接将其赋值Foo 唯一要注意的是此时constructor是可枚举的.会被实例对象的for..in..遍历到.\n```\n\n### 5.3 (原型)继承\n**原型对象到原型对象的继承:**\n例如:Bar.prototype 到 Foo.prototype 的委托关系，\t\n正确的JavaScript中“原型风格”:\n```js\nfunction Foo(name) {\n  this.name = name;\n}\nFoo.prototype.myName = function() { \n  return this.name;\n};\nfunction Bar(name,label) { \n  Foo.call( this, name ); \n  this.label = label;\n}\n\n// 我们创建了一个新的 Bar.prototype 对象,并且它的[[Prototype]] 关联Foo.prototype \nBar.prototype = Object.create( Foo.prototype );\n// 注意!Object.create()是返回一个新的对象,所以现在没有 Bar.prototype.constructor 了 \n// 如果你需要这个属性的话可能需要手动修复一下它\nBar.prototype.myLabel = function() { \n  return this.label;\n};\n\nvar a = new Bar( \"a\", \"obj a\" );\n\na.myName(); // \"a\"\na.myLabel(); // \"obj a\"\n```\n错误用法:\n\n - 1, `Bar.prototype = Foo.prototype;` 此时并不会创建一个关联到 Bar.prototype 的新对象，它只是让 Bar.prototype 直接引用 Foo.prototype 对象。 因此当你执行类似 Bar.prototype. myLabel = ... 的赋值语句时会直接修改 Foo.prototype 对象本身。\n - 2, `Bar.prototype = new Foo();` 它使用 了 Foo(..) 的“构造函数调用”，如果函数 Foo 有一些其他操作的话,尤其是与this有关的的话，就会影响到 Bar() 的“后代”，后果不堪设想。\n\n**结论:** 要创建一个合适的关联对象，我们**需使用 Object.create(..)** 而不是使用具有副作用的 Foo(..)。这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉(主要是需要手动设置constructor)，不能直接修改已有的默认对象。\n\n**检查\"类\"关系**\t\t\n\n - **instanceof 操作符**: 验证左边的普通对象的整条[[prototype]]链是否有指向右边函数的prototype,例如:`a instanceof Foo`。\n - **isPrototypeOf(..)  方法**: 验证在对象 a 的整条 [[Prototype]] 链中是否出现过 原型对象b.例如:`b.isPrototypeOf( a );`\n\n**注意:** 如果使用内置的 .bind(..) 函数来生成一个**硬绑定函数**(参见第 2 章)的话， 该函数**是没有 .prototype 属性的**。如果硬绑定函数instanceof 的话,则其bind的 目标函数的prototype会成为硬绑定函数的prototype.\n\n**关于__proto__**:\n我们知道函数可以直接通过prototype属性直接访问原型对象.那对象怎么访问呢?我们知道是通过[[prototype]]链.怎么访问呢?\t\n在ES5之中的标准方法:通过Object.getPrototypeOf(  )方法来获取对象原型.`Object.getPrototypeOf( a ) === Foo.prototype; // true`,\t\n另一种方法:在 ES6 之前并不是标准,但却被绝大多数浏览器支持的一种方法,可以访问内部[[prototype]]对象.那就是`__proto__`.例如:`a.__proto__ === Foo.prototype; // true`.你甚至可以通过`.__proto__.__ptoto__... `来访问整个原型链.  `.__proto__ `实际上并不存在于你正在使用的对象中.并且它看起来很像一个属性，但是实际上它更像一个 getter/setter(见第三章).\n\n### 5.4 对象关联\n[[Prototype]] 机制就是存在于对象中的一个内部链接，**它会引用其他对象。**\n\n这个链接的作用是:如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找。同理，如果在后者中也没有找到需要的 引用就会继续查找它的 [[Prototype]]，以此类推。这一系列对象的链接被称为**原型链**。\n\n\n#### 5.4.1 **创建关联**\n**问:**\"我们已经明白了为什么 JavaScript 的 [[Prototype]] 机制和类不一样，也明白了它如何建立对象间的关联。\"     \n**答:** 类的机制是复制,JavaScript里原型链的机制是引用.\t\n\n**问:**\"那 [[Prototype]] 机制的意义是什么呢?为什么 JavaScript 开发者费这么大的力气(模拟类)在代码中创建这些关联呢?\"     \n**答:** 意义就是模拟类,JavaScript不需要复制(我觉得这不是个优点)而通过原型链实现\"实例\"对\"类\"的\"继承(其实就是引用)\".这样就达到了实例对象对某些属性(即原型对象里的属性)的复用.\n\n**`Object.create(..)`**\t\t\n这个方法其实我们在前面已经使用过很多次.\"Object.create(..) 会创建一个新对象(bar)并把它关联到我们指定的对象(foo)，这样我们就可以充分发挥 [[Prototype]] 机制的威力(委托)并且避免不必要的麻烦(比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。\"实际上这个方法就是创建返回一个新对象,这个新对象的原型([[Prototype]])会绑定为我们输入的参数对象foo.并且由于不是通过构造函数的形式,所以不需要为函数单独设置prototype.虽然Object.create(..)很好,但实际我们使用的更多的还是构造函数形式.     \n**注意:**  Object.create(..) 的第二个参数指定了需要添加到新对象中的属性名以及这些属性的属性描述符(参见第 3 章)。\n\n**`Object.create(null)`**     \n这个方法其实我们在前面也讲解过几次.\"Object.create(null) 会创建一个拥有空(或者说null)[[Prototype]] 链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符(之前解释过)无法进行判断，因此总是会返回 false。 **这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。**\"\n\n\"Object.create()的polyfill代码.\"这部分我就不做解读了,因为现在都8102年,es6早就普及了,你几乎不可能再用到es5之前的语法了.所以这部分大家了解下即可.\n\n\n\n\n#### 5.4.2 **关联关系是备用**\n**[[Prototype]] 的本质作用:**      书中提到了一个观点\"处理“缺失”属性或者方法时的一种备用选项。\"(即备用设计模式).但随后进行了否定\"但是这在 JavaScript 中并不是很常见。所以如果你使用的是这种模式，那或许应当退后一步并重新思考一下这种模式是否合适。\" 作者给出的观点是:\"进行委托设计模式,即例子中的内部委托(就是在对象里套了个壳再引用了一遍,为的是将委托进行隐藏).这样可以使我们的API设计得更加清晰.\"文中的清晰是指,当我们需要引用原型对象的属性方法时,我们在对象内部设置对应专门的属性(例子中的doCool),进行内部委托(其实就是套个壳进行隐藏).这样我们**对象的属性就是\"完整\"的.**\n\n在实际工作中,我们常常就是把原型对象作为存放对象的公共属性方法的地方.对于一般比较重要的操作才会在对象里进行内部委托(隐藏委托)!\n\n### 5.5 小结\n总结得很好很全面,这里我还是直接摘抄了,不是偷懒哦!\n - 如果要访问对象中并不存在的一个属性，**[[Get]] 操作(参见第 3 章)就会查找对象内部[[Prototype]] 关联的对象。** 这个关联关系实际上定义了一条“原型链”(有点像嵌套的作用域链)，在查找属性时会对它进行遍历。\n - **所有普通对象都有内置的 Object.prototype，** 指向原型链的顶端(比如说全局作用域)，如 果在原型链中找不到指定的属性就会停止。toString()、valueOf() 和其他一些通用的功能 都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。\n - 关联两个对象最常用的方法是使用 new 关键词进行函数调用，在调用的 4 个步骤(第 2 章)中会创建一个关联其他对象的新对象。\n - 使用 new 调用函数时会把新对象的 .prototype 属性关联到“其他对象”(就是构造函数prototype所指的对象)。带 new 的函数调用 通常被称为“构造函数调用”，尽管它们实际上和传统面向类语言中的类构造函数不一样。\n - JavaScript 中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的。\n - “委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。(意思就是原先继承应该改为原先委托?)\n\n## 第六章 行为委托\n第 5 章的结论:[[Prototype]] 机制就是指对象中的一个内部链接引用另一个对象。换句话说，JavaScript 中这个机制的本质就是对象之间的关联关系。在第六章又被称为委托.\t\t\nPS:前面在讲原型的时候我就习惯用父对象指代原型对象(类似\"父类\"),用子对象指代其实例对象(类似\"子类\").本章也将采用这种称呼,故下面不再说明.(其实我觉得用父对象和子对象称呼更形象)\n### 6.1 面向委托的设计\n一句话:[[Prototype]]机制是面向委托的设计,是不同于面向类的设计. 下面将分别介绍类理论和委托理论.\n\n#### 6.1.1 **类理论**\n**类理论设计方法:** 首先定义一个通用父(基)类，在 父类类中定义所有任务都有(通用)的行为。接着定义子类 ，它们都继承自 父类并且会添加一些特殊的行为来处理对应的任务,并且在继承时子类可以使用方法重写(和多态)父类的行为.\t\t\n\n类理论中许多行为可以**先“抽象”到父类然后再用子类进行特殊化(重写)。**\t\t\nps:这部分了解即可,着重理解下面JavaScript用到的委托.\n\n#### 6.1.2 **委托理论**\n**类理论设计方法:** 首先你会定义一个\"父\"对象(相当于上节中的父类)，它会包含所有任务都可以使用(委托)的具体行为。接着，对于**每个任务**你都可以定义一个对象(\"子\"对象)来存储对应的数据和行为。你可以把特定的任务对象都关联到父对象上，让它们在需要的时候可以进行委托。\t(其实我们一般都是用父对象来定义通用的方法,子对象进行委托.然后子对象自身个性的属性方法就写在子对象本身,并避免与父对象的属性名冲突)\t\t\n\n**ps:** 这节书中这段话`但是我们并不需要把这些行为放在一起，**通过类的复制**，我们可以把它们分别放在各自独立 的对象中，需要时可以允许 XYZ 对象委托给 Task。`有个错误.\"通过类的复制\"应该改为\"通过\"[[Prototype]]机制\".这里应该是作者的手误.\t\t\n在 JavaScript 中，[[Prototype]] 机制会把对象关联到其他对象。无论你多么努力地说服自 己，JavaScript 中就是没有类似“类”的抽象机制。(其实主要原因还是是JavaScript没有完整的复制机制)\n\n**委托理论的使用建议:**     \nPS:书中这里写了3条,其实只有2条,第三条不过是对第一条的说明,这里我进行了合并.\n - 1. 通常来说，在 [[Prototype]] 委托中最好**把状态保存在委托者(子对象)而不是委托目标(父对象)上**。那怎么实现呢,就是通过\"this 的隐式绑定\".**在委托目标(父对象)上的函数里通过this定义保存状态**.当委托者(子对象)引用该函数方法时,此时的this就自动绑定到委托者上了.\n - 2.  在委托中我们会尽量避免在 [[Prototype]] 链的不同级别中使用相同的命名，否则就需要使用笨拙并且脆弱的语法来消除引用歧义(参见第 4 章)。\n - **补充**: 3. 在 API 接口的设计中，**委托最好在内部实现，不要直接暴露出去。** 这么做更多的是出于安全和接口稳定的考虑.建议**子对象将所有引用父对象的方法都套个函数隐藏起来,并取一个语义化的属性名.**\n\n\n**委托理论的使用注意:**\n - 1. **禁止两个对象互相委托**:当你将第二个对象反向委托给前一个对象时,就会报错.\n - 2. **调试**: 这个了解下就行.知道不同浏览器和工具对委托的解析结果并不一定相同.(吐槽:看了半天到后面出现`实际上，在编写本书时，这个行为被认定是 Chrome 的一个 bug， 当你读到此书时，它可能已经被修复了。`我只想说WTF! 好吧,我知道chrome以前可能出现过这个\"bug\"了=.=)\n\n#### 6.1.3 **比较思维模型**\n这节主要是比较了\"通过构造函数(模拟类)实现原型继承\"与\"通过对象关联(委托形式,Object.create( ... ))实现原型继承\"两种方式的区别.\n\n**结论:** 通过对象关联,委托形式,更加简洁,更加清晰易懂.\n\nPS:这里我原本自己对例子画出原型示意图.但是发现是真的复杂,并且和书中简洁后的示意图是差不多的,所以这里就不展示了,免得让读者看得更头大.这里建议,读者自己在草稿纸上画出原型示意图.\n\n### 6.2 类与对象\n其实这节讲得还是\"通过构造函数(模拟类)实现原型继承\"与\"通过对象关联(委托形式,Object.create( ... ))实现原型继承\"两种方式的区别.不过这次主要是以前端实际使用场景进行讲解.\n#### 6.2.1 **控件“类”**\n这里我就不以书中的例子进行讲解了,而是直接站在更高的角度对这种\"类\"风格的代码进行讲解.     \n**最大特点:** 1是通过构造函数进行模拟类,2是通过显式伪多态(硬绑定函数)关联两个函数.     \n**注意:** \n - **不管是类还是对象.这两种形式一般都需要定义两种数据.第一种就是实例对象要用到的\"初始保存的数据\";第二种就是通用行为的定义,包括对实例对象数据的增删改查.**\n - 下面提到的显式伪多态(详见第四章),其实指的就是使用call()方法这种硬绑定.\n - 注意ES6 class模拟类的写法我就没具体列出了.实际上class 仍然是通过 [[Prototype]] 机制实现的,不过是个表面简洁的语法糖.\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b5e847b943c0?w=1002&h=717&f=png&s=117669)\n\n\n虽然书中对显式伪多态称为\"丑陋的\",还用了一个语气动词\"呸!\".虽然这样不好,但有时用call真的很方便,所以用得也很多.\n\n#### 6.2.2 **委托控件对象**\n**最大特点:** 通过对象载体来模拟父子,并**通过Object,create(...)来对两个对象进行关联**.并**通过委托的形式进行引用**.与上节中提到的类形式还有一个区别:对象foo构建后,需要手动调用setUp方法进行初始化.故对象的构建与初始化是分开的.而构造函数形式则是在new 构造函数时, 同时进行了对象构建与初始化.(关于这点我下面还会再说明的)\n\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b604328156c9?w=789&h=822&f=png&s=132960)\n\n\n\n关于书中这句`使用类构造函数的话，你需要(并不是硬性要求，但是强烈建议)在同一个步骤中实现构造和初始化。然而，在许多情况下把这两步分开(就像对象关联代码一样)更灵活。`的理解:使用类构造函数形式,当我们使用`new 构造函数`时,其实是在**一步实现**对象的构建和对象数据的初始化(通过构造函数里的call) ;使用这种委托形式,我们是分别通过`Object.create( ... );`构建对象和`foo.setUp( ...);`来初始化的.即我们是分两步实现的.这样分开的话其实是更加灵活,也更符合编程中的关注分离原则.\n\n### 6.3 更简洁的设计\n这节也是一样通过两者的对比来突显委托设计模式的各种优点.这里我就不再对书中的例子进行解读.如果你真正理解了类和委托的话,其实是很简单的.如果觉得复杂的话,可以在纸上理一下函数和对象之间的关系,下面我就只总结下这里提到委托设计模式的优点,当然核心是更简洁.\n\n**简洁体现在:**\n\n - 1, 委托重点在于只需要两个实体(两个对象相互关联)，而之前的\"类\"模式需要三个(父\"类\",子\"类\",实例对象)其实可以这么理解:委托模式将\"子类\"和\"实例对象\"合为一个对象了。\n - 2, 不需要基类(父类)来\"共享\"两个实体之间的行为.不需要实例化类,也不需要合成.其实这第二条就是对第一条这种结果的说明.\n - 额外补充强调:在使用构造函数模拟类时,子类通常会对父类的行为进行重写(属性名相同);但委托模式则不会,它会重新取个属性名,再引用父对象上的行为.\n\n### 6.4 更好的语法\n这节主要是介绍ES6提供的2个简洁写法与其中的隐患.\n\n**语法:**\n - 在 ES6 中我们可以在任意对象的字面形式中使用简洁方法声明，例如:\n ```js\n var Foo = {\n  bar() { /*..*/ },//字面形式声明\n};\n\n ```\n - 在 ES6 中我们可以用 Object. setPrototypeOf(..) 来修改对象的 [[Prototype]],具体用法可以[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)例如:\n```js \n// 使用更好的对象字面形式语法和简洁方法 \nvar AuthController = {\n         errors: [],\n         checkAuth() {\n           // ... \n         },\n         server(url,data) {\n             // ...\n         }\n         // ... \n};\n// 现在把 AuthController 关联到 LoginController \nObject.setPrototypeOf( AuthController, LoginController );\n```\n**弊端:**\n\n - **对象字面形式语法**:实际上就是一个匿名函数表达式.匿名函数会导致3个缺点:1. 调试栈更难追踪;2. 自我引用(递归、事件(解除)绑定，等等)更难; 3. 代码(稍微)更难理解。(其实我觉得这3个缺点还好,影响不是那么大).但是这种简洁语法很特殊，会给对应的函数对象设置一个内部的 name 属性，这样理论上可以用在追 踪栈中。所以实际上唯一的弊端就只剩第2条了.终极建议就是:如果你需要自我引用的话，那最好使用传统的具名函数表达式来定义对应的函数，不要使用简洁方法。\n - **Object. setPrototypeOf(..)**  这个是书中没有提的,我觉得有必要进行补充下.首先,Object. setPrototypeOf(..)可能会带来性能问题,如果关心性能,则应该使用Object.create()替代.**Object. setPrototypeOf(..)与Object.create()的主要区别**: Object. setPrototypeOf(..)会直接修改现有对象的[[prototype]],Object.create()则是返回一个新对象.所以你需要手动设置一下丢失的的constructor属性(如果你需要的话).而使用setPrototypeOf(..)则不需要.\n\n### 6.5 内省\n**吐槽:** 纵观整本书,作者关于JavaScript中模拟类和继承\"的批评,说它们具有很大误导性!更是嗤之以鼻!就差爆粗口了,JavaScript就像一个异教徒,应该绑在十字架上被烧死!但是他这样的观点,都是站在其他语言的角度来看待时,产生的.我想更多的读者可能是只接触过JavaScript.那么他其实是没有这些疑惑的!!!你反而给他们讲这一大堆其他语言的\"正确\"含义,有时候会时得其反!让读者更加困惑,如果是理解不透彻的,反而会怀疑自己本来写的是对的代码!所以读者应该做一个可以理解作者意图,并且拥有自我见解和观点立场!\n\n**什么是内省(自省)?**     \t\t\n首先,本节需要弄懂一个问题,什么是内省,或者是自省。书中的解释是`自省就是检查实例的类型。类实例的自省主要目的是通过创建方式来判断对象的结构和功能。`我这里再更通俗地解释下:当我们构建得到一个实例对象时,有时候我们是不太清除它的属性和方法的.尤其是第三方库.有时候贸然使用会导致很多错误(例如调用的方法不存在,或者报错等).这个时候我们就需要通过自省.其实就是通过一系列操作,来确认实例是不是我们想要的那个,实例的方法是不是我们想要的(存在且可用).\n\n**内省的方法:**\n\n - **1.通过 instanceof 语法:**\n```js \nfunction Foo() { \n  // ...\n}\nFoo.prototype.something = function(){\n  // ... \n}\nvar a1 = new Foo();\n// 假设我们不知道上面的过程,只知道得到实例对象a1\n//我们想知道a1是不是我所希望的函数Foo所构建的\nif (a1 instanceof Foo) { \n  a1.something();\n}\n```\n例子中我们有一个实例对象a1,但是我们不知道a1是不是我们所希望的函数Foo所构造的,此时就可以通过`instanceof`进行判断.\t\t`instanceof`比较适合判断实例对象和构造函数之间的关系.     \n**缺陷:** 但是如果我们想判断函数A是不是函数B的\"子类\"时,则会稍微麻烦点,我们需要像这样`A.prototype instanceof B`进行判断.并且也不能直接判断两个对象是否关联.\n\n- **2.通过 \"鸭子类型\":** 为什么会叫这个名字?看了作者的解释,还是不太能接受.不太理解外国人的脑回路.你在国内和别人说\"鸭子类型\",估计也是一脸懵逼.其实很简单,所谓的\"鸭子类型\"其实也是我们实际工作中常用的:\n```js \n//如果a1的something存在的话,则我们可以进行调用\nif ( a1.something) { \n  a1.something();\n}\n```\n其实这种方法是非常常用的,排除了在不知道存在性情况下,贸然调用的风险.     \n**缺陷:** 关于书中提到的缺点,四个字概括就是\"以偏概全\" .书中关于Promise的例子,就是以偏概全的例子.所以我们在使用时,在if判断a1.something存在时,才会在后面使用something方法.不要直接使用anotherthing,这种没确认过的方法.\n- **3.如果使用对象关联时:** 则可以比较简单的使用`Object.getPrototypeOf(..)`进行判断.例如`Object.getPrototypeOf(a)===A`其中a,A都是对象.如果为true,则说明a的原型链上含有对象A.\n\n### 6.6 小结\n\n - 除了类和继承设计模式,行为委托其实是更强大,更值得推广的模式(本观点仅代表作者的观点!)\n - 行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。(我觉得还是父子对象关系.我的解说里也都是父子相称)\n - 当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。\n - 对象关联(对象之前互相关联)是一种编码风格，它倡导的是直接创建和关联对象，不把它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现   \n \n\n","source":"_posts/转-你不知道的JavaScript上卷读书笔记.md","raw":"---\ntitle: '[转]你不知道的JavaScript上卷读书笔记'\ndate: 2018-11-29 18:05:24\ntags: 学习笔记\ncategories: 学习笔记\n# description: \n---\n链接：https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4\n来源：掘金\n# 第一部分 作用域和闭包\n## 第一章 作用域是什么\n<!-- more -->\n\n### 1.1 编译原理\n\n\n**传统编译的三个步骤**\n - **1,分词/词法分析(Tokenizing/Lexing) :** 这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。例如，考虑程序var a = 2;。这段程序通常会被分解成 为下面这些词法单元:var、a、=、2、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。\n - **2,解析/语法分析(Parsing):** 这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“**抽象语法树**”(Abstract Syntax Tree，AST)。var a = 2; 的抽象语法树中可能会有一个叫作 VariableDeclaration 的顶级节点，接下来是一个叫作Identifier(它的值是a)的子节点，以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral(它的值是 2)的子节点。\n - **3,代码生成:** 将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指令，用来创建一个叫作 a 的变量(包括分配内存等)，并将一个值储存在 a 中。\n\n***说明:*** 此处只需记住第一步:分词/词法分析.第二步:解析/语法分析,得到抽象语法树(AST).第三步:代码生成,将抽象语法树转换为机器指令.\n\n**JavaScript与传统编译的不同点:**\n\n - 1,JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化.\n - 2,JavaScript与传统的编译语言不同，它不是在构建之前提前编译的，大部分情况下,它是在代码执行前的几微秒(甚至更短)进行编译.\n - 3,JavaScript 引擎用尽了各种办法(比如 JIT，可以延 迟编译甚至实施重编译)来保证性能最佳。\n - 4,JavaScript的编译结果不能在分布式系统中进行移植。\n\n### 1.2 理解作用域\n\n#### 1.2.1 演员表(代码编译到执行的参与者)\n首先介绍将要参与到对程序 var a = 2; 进行处理的过程中的演员们，这样才能理解接下来将要听到的对话。\n\n - 引擎\n从头到尾负责整个 JavaScript 程序的编译及执行过程。\n - 编译器\n引擎的好朋友之一，负责语法分析及代码生成等脏活累活(详见前一节的内容)。\n - 作用域\n引擎的另一位好朋友，负责收集并维护由所有声明的标识符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。\n#### 1.2.2 对话(代码编译执行过程)\n![JavaScript对var a =2;的处理过程](https://user-gold-cdn.xitu.io/2018/11/25/1674b0e35937a479?w=1186&h=1292&f=png&s=105617)\n\n#### 1.2.3 作用域的LHS查询和RHS查询\n由上图可知,引擎在获得编译器给的代码后,还会对作用域进行询问**变量**.\n\n现在将例子改为var a = b;此时引擎会对变量a和变量b都向**作用域**进行查询.查询分为两种:LHS和RHS.其中L代表左.R代表右.即对变量a进行LHS查询.对变量b进行RHS查询.\n\n单单从表象上看.LHS就是作用域对`=`左边变量的查询.RHS就是作用域对`=`右边变量的查询.但实际上并不是这么简单,首先LHS和RHS都是对变量进行查询,这也是我为什么要将例子从var a=2;改为var a=b;两者的区别是两者最终要查询到的东西并不一致.LHS是要查询到变量的声明(而不是变量的值),从而后面可以为其赋值.RHS是要查询到变量最终的值.还有一点,LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“= 赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最 好将其理解为“赋值操作的目标是谁(LHS)”以及“谁是赋值操作的源头(RHS)”.或者这样理解如果这段代码需要得到该变量的'源值',则会进行RHS查询.\n\n#### 1.2.4 引擎和作用域的对话\n这部分比较简单就是通过拟人方式比喻引擎和作用域的合作过程.一句话概括就是,引擎进行LHS和RHS查询时都会找作用域要.\n```js\nfunction foo(a) { \n  console.log( a ); // 2\n}\nfoo( 2 );\n```\n让我们把上面这段代码的处理过程想象成一段对话，这段对话可能是下面这样的。\n\n引擎:我说作用域，我需要为 foo 进行 RHS 引用。你见过它吗?        \n作用域:别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。       \n引擎:哥们太够意思了!好吧，我来执行一下 foo。         \n引擎:作用域，还有个事儿。我需要为 a 进行 LHS 引用，这个你见过吗?       \n作用域:这个也见过，编译器最近把它声名为 foo 的一个形式参数了，拿去吧。       \n引擎:大恩不言谢，你总是这么棒。现在我要把 2 赋值给 a。 \t       \n引擎:哥们，不好意思又来打扰你。我要为 console 进行 RHS 引用，你见过它吗?       \n作用域:咱俩谁跟谁啊，再说我就是干这个。这个我也有，console 是个内置对象。 给你。       \n引擎:么么哒。我得看看这里面是不是有 log(..)。太好了，找到了，是一个函数。       \n引擎:哥们，能帮我再找一下对 a 的 RHS 引用吗?虽然我记得它，但想再确认一次。       \n作用域:放心吧，这个变量没有变动过，拿走，不谢。\t       \n引擎:真棒。我来把 a 的值，也就是 2，传递进 log(..)。\n\n### 1.3作用域嵌套\n当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。进而形成了一条作用域链.因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。\n\n当引擎需要对作用域进行查询时.引擎会从当前的执行作用域开始查找变量，如果找不到， 就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都 会停止。\n### 1.4 异常\n例子:\n```js\nfunction foo(a) { \n  console.log( a + b ); \n  b = a;\n}\nfoo( 2 );\n```\n\n - 如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 **ReferenceError** 异常。例如上面例子中`console.log(a+b)`由于RHS此时是找不到b的值.故会抛出ReferenceError.\n - 如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 **TypeError**。\n - 当引擎执行 LHS 查询时，**如果在顶层(全局作用域)中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量**，并将其返还给引擎，前提是程序运行**在非 “严格模式”下**。例如上面例子中的`b=a;`.\n - 在严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。\n\n### 1.5 LHS与RHS小结\n - LHS和RHS查询都是引擎对作用域的查询\n - LHS和RHS查询都是只对变量进行查询\n - LHS和RHS都会沿着作用域链进行查询,直到最上层的全局作用域.如果没找到的话,在非严格模式下,LHS则会在全局创建一个相同名称的变量.RHS则会抛出ReferenceError的异常.\n - 如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。\n - LHS只是找到变量的容器而已,方便进行赋值\n - `=`操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。此时都会进行LHS查询\n - RHS查询则需要找到变量的值.\n\n## 第二章 词法作用域\n作用域分为两种工作模式:\n\n - 1,**词法作用域**.是目前最为普遍的，被大多数编程语言所采用的模式.当然JavaScript也是使用的词法作用域.\n - 2,动态作用域.使用较少,比如 Bash 脚本、Perl 中的一些模式等.\n\n### 2.1 词法阶段\n**词法阶段:** 大部分标准语言编译器的第一个工作阶段叫作词法化(也叫单词化)。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。\n\n**词法作用域:** 词法作用域就是定义在词法阶段的作用域也被称为静态作用域。即在JavaScript里作用域的产生是在编译器出来的第一阶段词法阶段产生的,并且是你在书写完代码时就已经确定了的.\n\n**词法作用域位置:** 词法作用域位置范围完全由写代码期间函数所声明的位置来决定.\n\n\n**理解词法作用域及嵌套:**\n看下例子:\n```js \nfunction foo(a) { \n  var b = a * 2;\n  \n  function bar(c) { \n    console.log( a, b, c );\n  }\n\n  bar( b * 3 ); \n}\nfoo( 2 ); // 2, 4, 12\n\n```\n在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们分成3个逐级包含的\"气泡作用域\"。\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b17a466f8fb0?w=2020&h=814&f=png&s=173375)\n\n - 1:包含着整个全局作用域，其中只有一个标识符:foo。\n - 2:包含着 foo 所创建的作用域，其中有三个标识符:a、bar 和 b。\n - 3:包含着 bar 所创建的作用域，其中只有一个标识符:c。\n\n**注意:** 没有任何函数的气泡可以(部分地)同时出现在两个外部作用域的气泡中，就如同没有任何函数可以部分地同时出现在两个父级函数中一样。\n\n**引擎对作用域的查找:**       \n这一部分在上一节中已经说过,就是从当前作用域逐级向上,直到最上层的全局作用域.这里再进一步进行讲解.**作用域查找会在找到第一个匹配的标识符时停止**。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。抛开遮蔽效应， 作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。\n\n**注意:**\n\n - 全局变量会自动成为全局对象(比如浏览器中的 window对象)的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引 用来对其进行访问。例如:`window.a`  通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。\n - 词法作用域查找只会查找一级标识符，比如 a、b 和 c。**如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符**，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。\n\n### 2.2 欺骗词法\n**欺骗词法:** 引擎在运行时来“修改”(也可以说欺骗)词法作用域.或者说就是在引擎运行时动态地修改词法作用域(本来在编译词法化就已经确定的).\n\n**欺骗词法的两种机制:**(下面这两种机制理解了解即可,不推荐实际开发使用)\n\n#### 2.2.1 eval\nJavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。即将eval放在该词法作用域,然后eval携带的代码就会动态加入到该词法作用域.\n\n通过下面的例子加深理解:\n```js \nfunction foo(str, a) { \n  eval( str ); // 欺骗! \n  console.log( a, b );\n}\nvar b = 2;\nfoo( \"var b = 3;\", 1 ); // 1, 3\n\n```\neval(..) 调用中的 \"var b = 3;\" 这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量 b，因此它对已经存在的 foo(..) 的词法作用域进行了修改。当 console.log(..) 被执行时，会在 foo(..) 的内部同时找到 a 和 b，但是永远也无法找到外部的 b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。\n\n**注意:** \n\n - eval(..) 通常被用来执行动态创建的代码.可以据程序逻辑动态地将变量和函数以字符形式拼接在一起之后传递进去。\n - 在严格模式下,eval(...)无法修改所在的作用域。\n - 与eval(...)类似,setTimeout(..)和 setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。\n - new Function(..) 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数(前面的参数是这个新生成的函数的形参)。这种构建函数的语法比 eval(..) 略微安全一些，但也要尽量避免使用。\n```js \nvar sum = new Function(\"a\", \"b\", \"return a + b;\");\nconsole.log(sum(1, 1111));  //1112\n\n```\n\n#### 2.2.2 with(不推荐实际使用)\n例子:\n```js \nfunction foo(obj) { \n  with (obj) {\n    a = 2; \n  }\n}\n\nvar o1 = {\n  a: 3\n};\n\nvar o2 = { \n  b: 3\n};\nfoo( o1 );\nconsole.log( o1.a ); // 2\n\nfoo( o2 );\nconsole.log( o2.a ); // undefined\nconsole.log( a ); // 2——不好，a 被泄漏到全局作用域上了!\n```\n起初你会觉得o1的a属性被with里的a进行了词法引用被遮蔽了成为了2.而o2没有a属性,此时with不能进行词法引用,所以此时o2.a就会变成undefined.但是,为什么最后console.log(a)会为2?因为在执行foo(o2)时,with会对其中的a=2进行LHS查询,但它在o2作用域,foo()作用域,全局作用域都没找到,因此就创建了一个全局变量a并随后赋值2.\n\n总的来说,with就是将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。\n\n**注意:** 使用 eval(..) 和 with 的原因是会被严格模式所影响(限制)。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval(..) 也被禁止了。\n\n#### 2.2.3 性能\nJavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行**静态分析**，并**预先确定**所有变量和函数的定义位置，才能在执行过程中快速找到标识符。但是eval(..) 和 with会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词法作用域。这么做就会导致引擎无法知道eval和with它们对词法作用域进行什么样的改动.只能对部分不进行处理和优化!因此如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢!。\n\n### 2.3 小结\n\n - 词法作用域是在你书写代码时就已经决定了的.在编译的第一阶段词法分析阶段产生词法作用域.此时词法作用域基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。\n - eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域(在运行时)。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域(同样是在运行时)。\n - 一般不要在实际代码中使用eval(...)和with,因为不仅危险,而且会造成性能问题!\n\n## 第三章 函数作用域和块作用域\n\n### 3.1 函数中的作用域\n\n - JavaScript 具有基于函数的作用域，一般情况下每声明 一个函数都会创建一个函数作用域.\n - 函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。这样的好处是JavaScript 变量可以根据需要改变值类型。\n\n\n\n### 3.2 隐藏内部实现\n因为\n - 子级函数作用域可以直接访问父级函数作用域里的标识符;\n - 父级函数作用域不能直接访问子级函数作用域里的标识符.\n\n所以用函数声明对代码进行包装，实际上就是把这些代码“隐藏”起来了。\n\n为什么要将代码进行\"隐藏\"?\t\n因为最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必 要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\t\n**隐藏的好处:**\n\n - 实现代码私有化,减少外部对内部代码的干扰,保持其稳定性.\n - **规避冲突:** 可以避免同名标识符之间的冲突， 两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致 变量的值被意外覆盖。那么一般规避冲突的手段有哪些?\n\t - 1. **全局命名空间:** 变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象(命名空间)的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。 \n\t - 2.**模块管理:** 另外一种避免冲突的办法和现代的模块机制很接近，就是从众多模块管理器中挑选一个来 使用。实际上就是我们常用的amd,commonjs,import模块机制.\n\n### 3.3 函数作用域\n**函数声明与函数表达式:**\n```js \nfunction foo() {\n\t...\n}\n```\n我们知道函数foo内的变量和函数被隐藏起来了,是不会对全局作用域造成污染.但是变量名foo仍然存在于全局作用域中,会造成污染.那有什么方法能避免函数名的污染呢?那就是作为函数表达式,而不是一个标准的函数声明.这样函数名只存在于它自己的函数作用域内,而不会存在于其父作用域,这样就没有了污染.举个函数声明的例子:\n```js \nvar a = 2;\n(function foo(){ \n  var a = 3;\n  console.log( a ); // 3 \n})(); \n  console.log( a ); // 2\n```\n当我们用()包裹一个函数,并立即执行.此时这个包装函数声明是从`(function`开始的而不是从function关键字开始.这样foo就会被当做一个函数表达式,而不是一个函数声明(即foo不会存在于父级作用域中).回到上面的例子中,全局作用域是访问不到foo的,foo只存在于它自己的函数作用域中.\n\n**补充: 什么是函数声明和函数表达式**\n首先我们得了解JS声明函数的三种方式:\n - **函数表达式(Function Expression):** 将函数定义为表达式语句（通常是变量赋值,也可以是自调用形式）的一部分。通过函数表达式定义的函数可以是命名的，也可以是匿名的。因为它可以没有函数名,因此常被用作匿名函数.如果有,其函数名也只存在自身的函数作用域.并且函数表达式不能以“function”开头.函数表达式可以存储在变量或者对象属性里. (在函数声明前加上运算符是可以将其转化为函数表达式的.例如`!`,`+`,`-`,`()`.举个例子:`!function(){console.log(1)}()`的结果是1,并不会报错)\n - **函数声明(Function Declaration):**  函数声明是一种独立的结构,它会声明一个具名函数,并必须以function开头. 且函数声明会进行函数提升.使它能在其所在作用域的任意位置被调用,即后面的代码中可以将此函数通过函数名赋值给变量或者对象属性.\n - **Function()构造器:** 即使用Function构造器创建函数.不推荐这种用法, 容易出问题\n```js \n//Function()构造器\nvar f =new Function()\n\n// 函数表达式\nvar f = function() {\n      console.log(1);  \n}\n\n// 函数声明\nfunction f (){\n     console.log(2);\n}\n\nconsole.log(f())\n//思考一下,这里会打印出什么\n```\n**怎么区分函数声明和函数表达式:**\n看 function 关键字出现在声明中的位置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。例如上例中,是从`(`开始而不是function.\n\n**补充:** 上面这段是原书的解释,我觉得这个解释并不完全,这里给出我自己的解释.\n\n - 表象区别:和它说的一样,只要是**以function开头进行声明,并且含有函数名**的就一定是函数声明.\n - 内在区别:其实我在上面补充两者的定义时已经说得很清楚了,我再对比总结下.\n\t - 函数提升:函数声明,会将整个函数进行提升.而函数表达式则不会提升,它是在引擎运行时进行赋值，且要等到表达式赋值完成后才能调用。 \n\t - 函数表达式是可以没有函数名的,如果有,它的函数名也只存在于自身的作用域,`var f = function fun(){console.log(fun)}`其他地方是没有的.这也避免了全局污染,也方便递归.\n\n#### 3.3.1 匿名和具名\n函数表达式可以是匿名的，而函数声明则不可以省略函数名.有函数名的就是具名函数,没有函数名的就是匿名函数.\n\n匿名函数的缺点:\n\n - 1. 匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。\n - 2. 如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。\n - 3. 匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。\n\n所以给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践.\n\n**PS:** 个人意见是如果函数表达式有赋值给变量或属性名或者就是一次性调用的.其实是没必要加上函数名.因为代码里取名本来就很难,取不好反而会造成误解.\n\n#### 3.3.2 立即执行函数表达式\n比如 (function foo(){ .. })()。第一个 ( ) 将函数变成表达式，第二个 ( ) 执行了这个函数。这就是立即执行函数表达式,也被称为IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression);\n\nIIFE可以具名也可以匿名.好处和上面提到的一样.IIFE还可以是这种形式`(function(){ .. }())`.这两种形式在功能上是一致的。\n\n### 3.4 块作用域\n函数作用域是JavaScript最常见的作用域单元,有时我们仅会将var赋值变量在if或for的{...}内使用,而不会在其他地方使用.但它仍然会对外层的函数作用域造成污染.这个时候就会希望能有一个作用域能将其外部的函数作用域隔开,声明的变量仅在此作用域有效.块作用域(通常就是{...}包裹的内部)就可以帮我们做到这点.\n\n从 ES3 发布以来，JavaScript 中就有了块作用域，而 with 和 catch 分句就是块作用域的两个小例子。\n\n#### 3.4.1 with\n\n我们在第 2 章讨论过 with 关键字。它不仅是一个难于理解的结构，同时也是块作用域的一个例子(块作用域的一种形式)，用 with 从对象中创建出的作用域仅在 with 声明中而非外部作用域中有效。\n\n#### 3.4.2 try/catch\ntry/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。\n```js \ntry {\n  undefined(); // 执行一个非法操作来强制制造一个异常\n}\ncatch (err) {\n  console.log( err ); // 能够正常执行! \n}\nconsole.log( err ); // ReferenceError: err not found\n```\nerr 仅存在 catch 分句内部，当试图从别处引用它时会抛出错误。\t\n那么如果我们想用catch创建一个不是仅仅接收err的块作用域,该怎么做呢?\n```js \ntry{throw 2;}catch(a){ \n  console.log( a ); // 2\n}\nconsole.log( a ); // ReferenceError\n```\n这样就创建了一个块作用域,且a=2,仅在catch分句中存在.在ES6之前我们可以使用这种方法来使用块作用域.\n\n#### 3.4.3 let\nES6 引入了新的 let 关键字，提供了除 var 以外的另一种变量声明方式。let 关键字可以将变量绑定到所在的任意作用域中(通常是 { .. } 内部)。\n\n用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。例如在if的{...}内用let声明一个变量.那什么是显式地创建块作用域呢?就是单独创建`{}`来作为let的块作用域.而不是借用if或者for提供的`{}`.例如`{let a=2;console.log(a)}`     \n**注意:** 使用 let 进行的声明不会在块作用域中进行提升.  \n**块作用域的好处:**\n\n - 1,垃圾收集\n```js \nfunction process(data){\n        // 在这里做点有趣的事情\n     }\n     var someReallyBigData=function(){\n         //dosomeing\n     }\n     process(someReallyBigData);\n\n     var btn=document.getElementById(\"my_button\");\n     btn.addEventListener(\"click\",function click(evt){\n        alert(\"button click\");\n\t\t//假如我们在这里继续调用someReallyBigData就会形成闭包,导致不能垃圾回收(这段是书里没有,我加上方便理解的)\n     },false);\n```\nclick 函数的点击回调并不需要 someReallyBigData 变量。理论上这意味着当 process(..) 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于 click 函数形成了一个覆盖整个作用域的闭包，JavaScript 引擎极有可能依然保存着这个结构(取决于具体实现)。\t\n但显式使用块作用域可以让引擎清楚地知道没有必要继续保存 someReallyBigData 了:\n ```js \nfunction process(data){\n        // 在这里做点有趣的事情\n     }\n     // 在这个块中定义的内容可以销毁了! \n\t {\n       let someReallyBigData = { .. }; \n\t   process( someReallyBigData );\n     }\n     var btn=document.getElementById(\"my_button\");\n     btn.addEventListener(\"click\",function click(evt){\n        alert(\"button click\");\n     },false);\n```\n\n - 2. let循环\n```js \nfor (let i=0; i<10; i++) { \n\t  console.log( i );\n     }\nconsole.log( i ); // ReferenceError\n```\nfor 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。这样就避免了i对外部函数作用域的污染.\n\n#### 3.4.4 const\n除了 let 以外，ES6 还引入了 const，同样可以用来创建块作用域变量，但其值是固定的(常量)。之后任何试图修改值的操作都会引起错误。\n```js \nvar foo = true;\nif (foo) {\n  var a = 2;\n  const b = 3; // 包含在 if 中的块作用域常量\n  a = 3; // 正常!\n  b = 4; // 错误! \n}\nconsole.log( a ); // 3\nconsole.log( b ); // ReferenceError!\n```\n\n### 3.5 小结\n函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，可以有效地与外部作用域隔开.\t\n\n但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)即块作用域。ES6中就提供了let和const来帮助创建块作用域.\n\n\n## 第四章 提升\n\n### 4.1 先有鸡(赋值)还是先有蛋(声明)\n考虑第一段代码\n```js \na = 2;\nvar a; \nconsole.log( a );\n```\n输出结果是2,而不是undefined\n\n考虑第二段代码\n```js \nconsole.log( a ); \nvar a = 2;\n```\n输出结果是undefined,而不是ReferenceError\n考虑完以上代码,你应该会考虑这个问题.到底是声明(蛋)在前，还是赋值(鸡)在前?\n\n### 4.2 编译器再度来袭\n\n编译器的内容,回忆一下，引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是**找到所有的声明，并用合适的作用域将它们关联起来。 之后引擎会询问作用域,对声明进行赋值操作.**\n\n那么,在编译阶段找到所有的声明后,编译器又做了什么?答案就是**提升**\t\n以上节的第一段代码为例,**当你看到 var a = 2; 时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个声明:var a;和a = 2;。** 第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。在第一个声明在编译阶段时,编译器会对`var a;`声明进行提升(即把`var a;`置于所在作用域的最上面).而`a = 2;`则会保持所在位置不动.此时代码会变成\n```js \nvar a; \na = 2;\nconsole.log( a );\n```\n由此可知,**在编译阶段,编译器会对声明进行提升.即先有蛋(声明)后有鸡(赋值)。**\n**哪些声明会被进行提升?**\n\n - 变量声明:例如上例中的`var a;`.不包括后面的`a = 2;`即**不包含有赋值操作的声明.**\n - 函数声明:注意**是函数声明,而不是函数表达式!**(不清楚可以看前面的3.3节,我有详细说明).函数声明提升,是将整个函数进行提升,而不是仅仅函数名的提升.\n\n### 4.3 函数优先\n函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个“重复”声明的代码中)是函数会首先被提升，然后才是变量。\t\n考虑以下代码:\n```js \nfoo(); // 1\nvar foo;\nfunction foo() { \n  console.log( 1 );\n}\nfoo = function() { \n  console.log( 2 );\n};\n```\n会输出 1 而不是 2 !这个代码片段会被引擎理解为如下形式:\n```js \nfunction foo() { \n  console.log( 1 );\n}\nfoo(); // 1\nfoo = function() { \n  console.log( 2 );\n};\n```\n注意，var foo 尽管出现在 function foo()... 的声明之前，但它是重复的声明(因此被忽略了)，因为函数声明会被提升到普通变量之前。\t\n**注意:** js会忽略前面已经声明的声明(不管是变量声明还是函数声明,只要其名称相同,则后续不会再进行重复声明).但是对该变量新的赋值,会覆盖之前的值.    \n**一句话概括:函数声明的优先级高于变量声明,会排在它前面.**\n\n### 4.4 小结\n\n - 对于`var a = 2`  JavaScript引擎会将var a和 a = 2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。\n - 论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的最顶端，这个过程被称为提升。\n - 声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升(即赋值操作都不会提升)。\n - 注意:，当普通的 var 声明和函数声明混合在一起的时候，并且声明相同时(var的变量名和函数名相同时,会引发js对重复声明的忽略)!一定要注意**避免重复声明!**\n\n## 第五章 作用域闭包\n\n### 5.1 启示\n\n - JavaScript中闭包无处不在，你只需要能够识别并拥抱它。\n - 闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。\n\n### 5.2 实质问题 && 5.3 现在我懂了\n因为这两小节理解透了其实发现书里也没讲什么,这里就进行合并,并补充拓展我自己的理解和总结.     \n**什么是闭包?(广义版)**     \n**书中解释:** 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。     \n**MDN的解释:** 闭包是函数和声明该函数的词法环境的组合。     \n**我的解释(详细版):** 必须包含两点:\n\n - 1,有函数.由于函数自身的特性,它能访问所在的词法作用域.并能保存外部词法作用域的变量和函数到自己的函数作用域.\n - 2,有该函数所在的词法环境.其实在JavaScript中任何函数都会处在一个词法环境中.不管是全局作用域还是函数作用域.\n\n综上**简单版**就是:MDN的解释**闭包是函数和声明该函数的词法环境的组合。**     \n还可以继续延伸成**极简版**:**JavaScript中的函数就会形成闭包**。     \n**Tips:** 注意到上面对`词法作用域`和`词法环境`两词的分开使用了吗?`1,`里此时函数还没被执行,所以使用的是词法作用域即静态作用域.`2,`里,此时函数被执行,此时词法作用域就会变成词法环境(包含静态作用域与动态作用域).所以其实MDN的解释其实更准确一点,\n\n**我们日常使用时所说的闭包(狭义版,严格意义上的):**     \n为了便于对闭包作用域的观察和使用.我们实际使用时会将闭包的函数作用域暴露给当前词法作用域之外.也就是本书一直强调的**闭包函数需要在它本身的词法作用域以外执行**.作者认为符合这个条件才称得上是真正的闭包(也就是我们日常使用常说的'使用闭包',并且**使用任何回调函数其实也是闭包**).     \n所以狭义版就是:闭包是函数和声明该函数的词法环境的组合,并且将闭包的函数作用域暴露给当前词法作用域之外.\t\n\n\n**闭包暴露函数作用域的三种方式:**     \n下面部分是书中没有的,是自己实际使用时的总结,并且**符合这三种形式之一的就是我们日常使用时所说的闭包(狭义版)**\n - 1,通过外部函数的参数进行暴露.\n ```js \nfunction foo() { \n   var a = 2;\n   function bar() { \n    baz(a) //通过外部函数的参数进行暴露\n   }\n   bar(); \n};\nfunction baz(val) { \n    console.log( val ); // 2 \n}\nfoo();\n```\n - 2,通过外部作用域的变量进行暴露\n ```js \nvar val;\nfunction foo() { \n   var a = 2;\n   function bar() { \n    val=a //通过外部作用域的变量进行暴露\n   }\n   bar(); \n};\nfoo();\nconsole.log(val)  //2\n```\n - 3,通过return直接将整个函数进行暴露\n```js \nfunction foo() { \n   var a = 2;\n   function bar() { \n    console.log(a)\n   }\n   return bar //通过return直接将整个函数进行暴露\n};\nvar val=foo();\nval()  //2\n```\n**关于闭包的内存泄露问题:**     \n首先必须声明一点:**使用闭包并不一定会造成内存泄露,只有使用闭包不当才可能会造成内存泄露.**(吐槽:面试很多新人时,张口就说闭包会造成内存泄露)     \n为什么闭包可能会造成内存泄露呢?原因就是上面提到的,因为它一般会暴露自身的作用域给外部使用.如果使用不当,就可能导致该内存一直被占用,无法被JS的垃圾回收机制回收.就造成了内存泄露.     \n**注意:** **即使闭包里面什么都没有,闭包仍然会隐式地引用它所在作用域里的所用变量.**   正因为这个隐藏的特点,闭包经常会发生不易发现的内存泄漏问题.     \n**常见哪些情况使用闭包会造成内存泄露:**\t\n\n - 1,使用定时器未及时清除.因为计时器只有先停止才会被回收.所以决办法很简单,将定时器及时清除,并将造成内存的变量赋值为null(变成空指针)\n - 2,相互循环引用.这是经常容易犯的错误,并且也不容易发现.举个栗子:\n```js \nfunction foo() { \n  var a = {}; \n  function bar() { \n    console.log(a); \n  }; \n  a.fn = bar; \n  return bar; \n};\n```\n这里创建了一个a 的对象，该对象被内部函数bar引用。然后，a创建了一个属性fn指向了bar，最后返回了innerFn()。这样就形成了bar和a的相互循环引用.可能有人说bar里不使用`console.log(a)`不就没有引用了吗就不会造成内存泄露了.NONONO,bar作为一个闭包,即使它内部什么都没有,foo中的所有变量都还是隐使地被 bar所引用。这个知识点是我前面忘记提到的,也是书中没有提到的.算了我现在加到前面去吧.所以即使bar内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将`a.fn = bar`.\n\n - 3,将闭包引用到全局变量上.因为全局变量是只有当页面被关闭的时候才会被回收.\n - 4,在闭包中对DOM进行不当的引用.这个常见于老IE浏览器,现代浏览器已经长大了,已经学会了自己处理这种情况了.这里就不赘述了.想知道的可以自行问谷娘和度娘.\n\n总而言之,**解决办法就是使闭包的能正常引用,能被正常回收.如果实在不行,就是在使用完后,手动将变量赋值null,强行进行垃圾回收.**\n\n\n### 5.4 循环和闭包\n看如下例子:\n```js \nfor (var i=1; i<=5; i++) { \n  setTimeout( function timer() {\n    console.log( i );\n  }, i*1000 );\n}\n```\n我们期望的结果是分别输出数字 1~5，每秒一次，每次一个。     \n但实际结果是,这段代码在运行时会以每秒一次的频率输出五次 6。     \n(关于书里的解释,我觉得有点说复杂了,没说到点子上,下面是我的解释.)     \n**为什么会是这样的结果?**     \ntimer毫无疑问是一个闭包,它是可以访问到外部的变量i.在进行for循环时,timer()会被重复执行5次,也就是它会 console.log( i )5次.(关键部分来了!)这5次`i`其实是同一个`i`.它是来自于外部作用域,即for里面声明的i.在**词法作用域中**变量i只可能对应一个唯一的值,即**变量和它的值是一一对应的.不会变化的**.那这个值到底是多少呢?**这个值就是最终值!** i的最终值就是6即for循环完后`i`的值.当引擎执行`console.log( i )`时,它会询问i所对应的作用域,问它i的值是多少.这个时候作用域进行RHS查询得到的结果就是最终值6.\t\t\n\n**为什么我们会以为分别输出1~5?**     \n因为在for循环中,我们错以为每一次循环时,函数所输出的i是根据循环动态变化的.即是1~5累加变化的.但实际上它所访问的i是同一个固定不变的值,即最终值6.可能你会有这样的疑惑,那我循环还有意义吗?i其实一开始就确定是6了.没有变化过!错!`i`变化过,它的确是从1逐步增加到6的.只是外部作用域的i值只可能是循环完后的最终值,并且函数timer()并没有保存每次i变化的值.它只是访问了外部作用域的i值即最终的值6. OK我们知道了出错的地方,就是我们没有把每次i的值保存在一个独立的作用域中.\n接下来,看下这个改进的例子结果是多少.\t\n```js \nfor (var i=1; i<=5; i++) { \n  (function() {\n    setTimeout( function timer() { \n\t  console.log( i );\n    }, i*1000 );\n  })();\n}\n```\n它的最终值仍然是5个6.为什么?我们来分析下,上例中,它用了一个匿名函数包裹了定时器,并立即执行.在进行for循环时,会创造5个独立的函数作用域(由匿名函数创建的,因为它是闭包函数).但是这5个独立的函数作用域里的i也全都是对外部作用域的引用.即它们访问的都是i的最终值6.这并不是我们想要的,我们要的是5个独立的作用域,并且每个作用域都保存一个\"当时\"`i`的值.\n\n**解决办法:**\n那我们这样改写.\n```js \nfor (var i=1; i<=5; i++) { \n  (function () {\n    var j =i;\n    setTimeout( function timer() { \n\t  console.log( j );\n    }, j*1000 );\n  })();\n}\n//这次终于结果是分别输出数字 1~5，每秒一次，每次一个。\t\n```\n这样改写后,匿名函数每次都通过j保存了每次i值,这样`i`值就通过j保存在了独立的作用域中.注意此时保存的i值是'当时'的值,并不是循环完后的最终值.这样循环完后,实际上就创建了5个独立的作用域,每个作用域都保存了一个'当时'i的值(通过j).当引擎执行`console.log( j )`询问其对应的独立作用域时,得到的值就是'当时'保存的值,再也不是6了.\t\n我们还可以进一步简写为这样:\n```js \nfor (var i=1; i<=5; i++) { \n  (function(j) {\n    setTimeout( function timer() { \n\t  console.log( j );\n    }, j*1000 );\n  })(i);\n}\n//结果是分别输出数字 1~5，每秒一次，每次一个。\t\n```\n**利用块作用域进行解决:**     \n在es6中,我们不仅可以使用函数来创建一个独立的作用域,我们还可以使用let声明来创建一个独立的块作用域(在`{}`内).所以我们还可以这样改写:\n```js \nfor (let i=1; i<=5; i++) { \n  setTimeout( function timer() {\n    console.log( i );\n  }, i*1000 );\n}\n//结果是分别输出数字 1~5，每秒一次，每次一个。\t\n```\n这样改写,在每次循环时,let都会对i进行声明.并通过循环自带的`{}`创建一个独立的块作用域.并且let声明的i,保存了'当时'`i`的值在当前块作用域里.因此当引擎执行`console.log( i )`时,它会询问对应的块作用域上i的值,得到的结果就是'当时'保存的值.\n\n**延伸:**     \n实际上块作用域可以称得上一个'伪'闭包(之所以是伪,是因为闭包规定了只能是函数).因为它几乎拥有闭包的所有特性.它也可以创建一个独立的作用域,同样外部作用域不能访问块作用域的变量.但块作用域可以访问外部作用域.举个栗子:\n```js \nfunction foo() { \n  var a = 2;\n  {  //通过{} 显示表示块作用域\n    let b = a;\n\tconsole.log('块作用域内',b) //2\n  }\n  console.log('块作用域外',b) //b is not defined\n}\nfoo()\n```\n说了相同点,说说不同点:1,保存变量到块作用域,必须通过let声明.2,块作用域不能和函数一样有名称(函数名)\t\t\n很多不方便使用闭包或者比较麻烦的时候,是可以考虑通过块作用域进行解决.\n\n**总结一下一般什么时候考虑使用闭包:**     \n这部分也是自己工作使用的总结,如果有补充或者不对的地方,欢迎留言指正.\n\n - 1,需要创建一个独立的作用域并隐藏一些变量或函数,不被外部使用;或者想保存一些外部作用域的变量或函数到这个独立作用域.\n - 2,只想暴露**一部分**自身作用域的变量或函数给外部使用.\n\n### 5.5 模块\n首先看下面的例子:\n```js \nfunction CoolModule() {\n  var something = \"cool\";\n  var another = [1, 2, 3];\n  function doSomething() { \n    console.log( something );\n  }\n  function doAnother() {\n    console.log( another.join( \" ! \" ) );\n  }\n  return {\n      doSomething: doSomething,\n\t  doAnother: doAnother\n  }; \n}\nvar foo = CoolModule(); \n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1 ! 2 ! 3\n```\n首先我们对上面这段代码进成分行分析:     \n私有数据变量:something, another     \n内部函数:doSomething, doAnother     \n直接说结论,上面这个例子就是模块模式.**它return返回的这个对象也就是模块也被称为公共API(至少书中是这样称呼的).CoolModule()就是模块构造器或者叫模块函数.**     \n**注意**:\n - **这里的模块和我们所说的模块化开发不是完全一样的!**\n - 模块不一定非要是标准对象,也可以是一个函数,函数本质上也是对象,函数也可以有自己的属性.\n - 书中有这样一句话`CoolModule() 只是一个函数，必须要通过调用它来创建一个模块实例。如果不执行外部函数，内部作用域和闭包都无法被创建。`我觉得这句话有必要延伸说一下.函数调用一次就会创建一个该函数的作用域(不调用就不会创建),包括创建它里面的变量和函数.\n\n**模块模式:**     \n模块模式需要具备以下2个条件:(这里结合上面的例子,对书中的定义进行说明方便理解)\n\n - 1, 必须有外部的封闭函数(即CoolModule)，该函数必须至少被调用一次(每次调用都会创建一个新的模块实例-->模块实例指的就是函数return返回的对象)。\n - 2, 封闭函数(即CoolModule)必须返回至少一个内部函数(即doSomething, doAnother)，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态(即something, another)。\n\n**模块:**     \n表面上看由模块函数(例子中的CoolModule)所返回的对象就是模块.但**模块还必须还包含模块函数的内部函数(即闭包函数)**.只有包含了才能真正称得上是模块.才强调一次这里的模块与模块化里的模块是有区别的,也不是nodejs里的模块.\n\n**模块函数:**     \n模块函数也就是模块构造器,例子中的CoolModule().一般它有两个常见用法.\n\n - 通过接受参数,对输出的模块进行修改.\n - 通过添加模块里添加相关的内部函数,实现对输出模块数据的增删改查.(书中用`命名将要作为公共API返回的对象`.我觉得`命名`应该是用错了,应该是`修改`即增删改查更好)\n\n####  **5.5.1 现代的模块机制**\n大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。\n下面就介绍一个简单的模块管理器实现例子(对书中的例子进行逐行解读):\n```js \n//首先实例化我们的模块管理器,取名myModules\nvar MyModules=(function Manager() {\n    \n    //作为我们的模块池,保存所有定义的模块\n    var modules={};\n\n    /**\n     *使用类似AMD的方式定义新模块，接收3个参数\n     *name:模块名\n     *deps:数组形式表示所依赖的其他模块\n     *impl:模块功能的实现\n    **/ \n    function define(name,deps,impl) {\n        \n        //遍历依赖模块数组的每一项，从程序池中取出对应的模块,并赋值.\n\t\t//循环完后,deps由保存模块名的数组变成了保存对应模块的数组.\n        for (var i=0;i<deps.length;i++) {\n            deps[i]=modules[deps[i]];\n        }\n        //将新模块存储进模块池，并通过apply注入它所依赖的模块(即遍历后的deps,实际上就是用deps作为impl的入参)\n        modules[name]=impl.apply(impl,deps);\n    }\n    //从模块池中取出对应模块\n    function get (name) {\n        return modules[name];\n    }\n    //暴露定义模块和获取模块的两个api\n    return {\n        define: define,\n        get: get\n    }\n})()\n```\n**说明:**  后面书中说了这么一句`为了模块的定义引入了包装函数(可以传入任何依赖)`,这里包装函数指的是Manger(),同样也是我们上节提到的模块函数.首先说明下什么是包装函数.例如函数A当中还有一个函数B.当我们想要调用函数B的时候,则需要先调用函数A.那么函数A就叫做函数B的包装函数.也就是说我们想调用某个模块时,需要先调用它的包装函数即这里的Manger().接着是后面那句`并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。`注意这里的返回值是指impl的返回值.\n\n接着看通过管理器来定义和使用模块\n\n```js\nMyModules.define('bar',[],function () {\n    function hello (who) {\n        return \"Let me introduce: \" + who;\n    }\n\t//返回公共API 即提供一个hello的接口\n    return {\n        hello:hello\n    };\n});\n\nMyModules.define('foo',['bar'],function (bar) {\n    var hungry = \"hippo\";\n\t\n    functin awesome () {\n\t//这里的bar为返回模块bar返回的公共API\n        console.log( bar.hello( hungry ).toUpperCase() );\n    }\n\t//返回公共API 即提供一个awesome的接口\n    return {\n        awesome:awesome\n    }\n})\n\nvar bar=MyModules.get('bar');//通过管理器获取模块'bar'\nvar foo=MyModules.get('foo');//通过管理器获取模块'foo'\n\nconsole.log(\n//调用模块bar的hello接口\n         bar.hello( \"hippo\" ) \n); // Let me introduce: hippo \n\n//调用模块foo的awesome接口\nfoo.awesome(); // LET ME INTRODUCE: HIPPO\n\n```\n这节的主要内容还是了解现在是如何对模块进行一个规范处理.主要是两部分内容,一个是通过名称和依赖合理定义模块并储存.另一个则是通过名称对存储的模块的调用.其实还可以再增加一个删除模块的方法.\n\n#### **5.5.2 未来的模块机制**\nok,这节说的模块,就是我们常说的模块化开发.并且主要提到的就是ES6里常用的import.没什么好说的.\n\n### 5.6 小结\n**吐槽:** 同一个函数概念在5.5这一个小节里,居然换着花样蹦出了三个名字!一会叫模块构造器!一会叫模块函数!以及最后的包装函数!每变化一次,都得想一遍它指的是啥!真的是无力吐槽了!!!!\n\n闭包:当函数可以记住并访问所在的词法作用域，并且函数是在当前词法作用域之外执行，这时 就产生了闭包。\n\n模块有两个主要特征:\n\n - (1)为创建内部作用域而调用了一个包装函数(模块构造器的实例化,不想对频繁换名字吐槽了);\n - (2)包装函数的返回值(也就是模块)必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。\n\n# 第二部分\n## 第一章 关于this\n\n### 1.1 为什么要用this\n因为this 提供了一种更优雅的方式来隐式“传递”一个对象(即上下文对象)引用，因此可以将 API 设计得更加简洁并且易于复用。\n\n### 1.2 误解\n下面两种常见的对于 this 的解释都是错误的(看看就好,就不过多解读了,以免增加了对错误的印象)。\n\n#### 1.2.1 指向自身\n人们很容易把 this 理解成指向函数自身.\t\n\n具名函数，可以在它内部可以使用函数名来引用自身进行递归,添加属性等。(这个知识点其实在第三章提过,既然这里又提了一遍,我也再说一遍.)例如:\n```js \nfunction foo() {\n  foo.count = 4; // foo 指向它自身\n}\n```\n匿名函数如果想要调用自身则,需要使用`arguments.callee`不过这个属性在ES5严格模式下已经禁止了,也不建议使用.详情可以查看[MDN的说明.](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee)\n\n#### 1.2.2 它的作用域\n**切记:** **this 在任何情况下都不指向函数的词法作用域。你不能使用 this 来引用一个词法作用域内部的东西。** 这部分只需记住这一段话就行.\n\n**终极疑问:** JavaScript里的作用域到底是对象吗?\t\n这小节最令我在意的是里面这句话\"在 JavaScript 内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过 JavaScript代码访问，它存在于JavaScript 引擎内部。\"它让我想起了最开始学JS的一个疑问,JavaScript里的作用域到底是对象吗.虽然\"在JS里万物皆对象\".但是作用域给人的感觉却不像是一个对象.更像是一个范围,由函数的`{}`围城的范围,限制了其中变量的访问.但直觉告诉我它和对象还是应该有点联系的.直到读到书中的这段话,更加印证了我的感觉.\t\n在JavaScript里,作用域其实是一个比较特殊的对象,作用域里所有可见的标识符都是它的属性.只是作用域对象并不能通过JavaScript代码被我们访问,它只存在于JavaScript引擎内部.所以作用域作为一个\"对象\"是经常被我们忽略.\n\n### 1.3 this到底是什么\nthis 是在运行时(runtime)进行绑定的，**并不是在编写时绑定**，它的上下文(对象)取决于函数调用时的各种条件。this 的绑定和函数声明的位置没有任何关系，**只取决于函数的调用方式**。\n\n当一个函数被调用时，会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。**this 就是记录的其中一个属性**，会在函数执行的过程中用到。(PS:所以this并不等价于执行上下文)\n\n### 1.4 小结\n\n - 学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域\n - this 实际上是在函数被调用时发生的绑定，**它指向什么完全取决于函数在哪里被调用(关于this你必须记住的话)**。\n\n## 第二章 this全面解析\n\n### 2.1 调用位置\n通过上节我们知道,this的绑定与函数的调用位置有关.那调用位置是什么.调用位置就是函数在代码中被调用的位置(**而不是声明的位置**)。\n\n要寻找调用位置,最重要的是要分析调用栈(就是为了到达当前执行位置所调用的所有函数)。我们关心的调用位置就在当前正在执行的函数的前一个调用中。PS:调用栈其实是一个解释起来有点复杂的概念.这里我就不过多解释,这里推荐一篇[文章](https://juejin.im/post/5a05b4576fb9a04519690d42),解释得不错.\n\n这节书里的例子解释得不错,这里就不复制代码了.其实分析调用栈只是为了在运行时找到我们关心的函数到底**在哪里和被谁调用了.** 但是实际别写代码时,其实并不会分析得这么清楚的,我们还是只需记住`this的指向就是我们调用该函数的上下文对象.意思就是我们在哪里调用该函数,this就指向哪里`.并且查看调用栈还可以通过浏览器的开发者工具,只需在疑惑的代码上一行加上debugger即可.浏览器在调试模式时,我们就可以在调用列表里查看调用栈.我们一般也仅在查找bug时,会使用该方法.\n\n### 2.2 绑定规则\n在找到调用位置后,则需要判定代码属于下面四种绑定规则中的哪一种.然后才能对this进行绑定.     \n**注意:** this绑定的是上下文**对象**,**并不是函数自身也不是函数的词法作用域**\n\n#### 2.2.1 **默认绑定**\n**什么是独立函数调用**:对函数直接使用而不带任何修饰的函数引用进行调用.简单点一个函数直接是`func()`这样调用,**前面什么都没有**.不同于通过对象属性调用例如`obj.func()`,也没有通过new关键字`new Function()`;也没有通过apply,bind,call强制改变this指向.     \n**默认绑定:** 当被用作独立函数调用时（不论这个函数在哪被调用,不管全局还是其他函数内），this默认指向到window；     \n**注意:** 如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定，因此 this 会绑定到 undefined.\n\n\n#### 2.2.2 **隐式绑定**\n**隐式绑定:** 函数被某个对象拥有或者包含.也就是函数被作为对象的属性所引用.例如`obj.func()`.此时this会绑定到该对象上.     \n**隐式丢失:** 不管是通过函数别名或是将函数作为入参造成的隐式丢失.只需找到它真正的调用位置,并且函数前没有任何修饰也没有显式绑定(下节会讲到)(非严格模式下).那么this则会进行默认绑定,指向window.     \n**注意:** 实际工作中,大部分this使用错误都是由对隐式丢失的不理解造成的.**记住函数调用前没有任何修饰和显式绑定(其实就是call、apply、bind),this就指向window**\n\n#### 2.2.3 **显式绑定**\n在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 间接(隐式)绑定到这个对象上。如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，此时则需要显式绑定.     \n**显式绑定:**  可以直接指定 this 的绑定对象，被称之为显式绑定。基本上就是我们常使用的call、apply、bind方法都是显式绑定.(如果这三个方法不能熟练使用的,建议找度娘或者谷娘学习后,再看这节.)     \n**注意:**\n如果你传入了一个原始值(字符串类型、布尔类型或者数字类型)来当作 this 的绑定对 象，这个原始值会被转换成它的对象形式(也就是new String(..)、new Boolean(..)或者 new Number(..))。这通常被称为“装箱”。\n\n**硬绑定:** 使用call、apply、bind方法强制显式地将this进行绑定,称之为硬绑定。\t\n硬绑定的典型应用场景就是创建一个包裹函数(其实就是常说的封装函数)，传入所有的参数并返回接收到的所有值.\t\n在封装函数中,我们常使用apply.一方面是因为它可以手动绑定this,更重要的是因为可以用apply的第二个参数,方便地注入所有传入的参数.例如之前提到的`modules[name]=impl.apply(impl,deps)`.因为我们不知道传入的参数有多少个,但我们可以方便地使用一个`deps`将其全部注入.另一个常用的是`foo.apply( null,argue)`当我们将apply的第一个参数设置为null时,此时this就会默认绑定到window.切记使用这种用法时**确保函数foo内没有使用this.** 否则很可能会造成全局污染.如果是第三方库的函数就建议不要使用了,因为你不知道别人的函数是否使用了this(关于这部分内容,下节会继续提到).还有一种常用就是`foo.call( this)`.这样foo里的this都会指向当前调用的上下文环境.\n\n**API调用的“上下文”:** 第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”(context)，其作用和 bind(..) 一样，确保你的回调函数使用指定的 this。\n\n#### **2.2.4 new绑定**\nJavaScript 中 new 的机制实际上和面向类的语言完全不同。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，**它们只是被 new 操作符调用的普通函数而已。实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”。**\n\n使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\n\n - 1,创建(或者说构造)一个全新的对象。\n - 2,这个新对象会被执行[[原型]]连接。\n - 3,这个新对象会绑定到函数调用的this。\n - 4,如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。\n\n示例:\n```js\nfunction foo(a) { \n  this.a = a;\n}\nvar bar = new foo(2); \nconsole.log( bar.a ); // 2\n```\n使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。     \n**说明:对于上面这句话进行解释下,如果在一个函数前面带上 new 关键字来调用， 那么背地里将会创建一个连接到该函数的 prototype 的新对象，this就指向这个新对象；**\n\n### 2.3 优先级\n直接上结论:     \nnew绑定=显示绑定>隐式绑定>默认绑定     \n**说明:** new绑定与显示绑定是不能直接进行测试比较,但通过分析发现new绑定内部其实是使用了硬绑定(显示绑定的一种),所以new绑定和显示绑定优先级应该差不多.但话说回来,一般实际使用时,不会这种复杂的交错绑定.所以只需记住下面的判定即可.\n\n**判断this:**     \n现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断:\n\n - 1,函数是否在new中调用(new绑定)?如果是的话this绑定的是新创建的对象。  var bar = new foo()\n - 2,函数是否通过call、apply(显式绑定)或者硬绑定调用?如果是的话，this绑定的是 指定的对象。var bar = foo.call(obj2)\n - 3,函数是否在某个上下文对象中调用(隐式绑定)?如果是的话，this 绑定的是那个上 下文对象。var bar = obj1.foo()\n - 4,如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到 全局对象。var bar = foo()\n就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白 this 的绑定原理了。\n\n### 2.4 绑定例外\n\n#### **2.4.1 被忽略的this**\n如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则,this会绑定到window上.     \n**使用情景:**     \n一种非常常见的做法是使用 apply(..) 来“展开”一个数组(也可以用来方便地参数注入)，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数).通过自带bind方法实现柯里化是很方便的,比自己写要简化好多.\n\n**注意:** \n - 在 ES6 中，可以用 ... 操作符代替 apply(..) 来“展 开”数组，foo(...[1,2]) 和 foo(1,2)是一样的，这样可以避免不必要的 this 绑定。可惜，在 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。\n- 当使用null或者undefined进行绑定时,要**确保该函数内没有使用this**,否则此时很容易对全局变量造成破坏!尤其是使用第三方库的方法!\n\n**更安全的this**     \n如果函数内使用了this,直接使用null则可能会对全局造成破坏.因此我们可以通过创建一个“DMZ”(demilitarized zone，非军事区)对象——它就是一个空的非委托的对象(委托在第 5 章和第 6 章介绍)。让this绑定到这个\"DMZ上.这样就不会对全局造成破坏.\t\n怎么创建DMZ呢.就是通过**Object.create(null)** 创建一个空对象.这种方法和 {} 很像，但是并不会创建 Object.prototype 这个委托，所以它比 {}“更空”更加安全.\n\nPS:实际使用一般不会遇到这种情况(也可能是我太菜,没遇到),如果函数内有this,那肯定是有需要调用的变量或函数,直接把它绑定到一个空对象上.那什么都取不到,还有什么意义?所以函数没有this就传入null.如果有this就把它绑定到真正需要它的对象上,而不是一个空对象上.这些是我自己的见解,如果有不妥的,欢迎留言指正.\n\n#### **2.4.2 间接引用**\n```js \nfunction foo() { \n  console.log( this.a );\n}\nvar a = 2;\nvar o = { a: 3, foo: foo }; \nvar p = { a: 4 };\no.foo(); // 3\n(p.foo = o.foo)(); // 2  其实就是foo()  此时this默认绑定到window\n```\n例子中的间接引用其实是对函数的理解不深造成的.其实(p.foo = o.foo)()就是(foo)(),这样就是全局调用foo()所以this默认就绑定到了window上.     \n**注意:**\t\t\n对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是 函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则 this 会被绑定到全局对象。(对于这段话其实在2.2.1节就应该说了!)\n\n#### **2.4.3 软绑定**\n硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。这时候则需要使用软绑定.     \n**Tips:** 这里给的软绑定方法还是挺好的.但是建议还是在自己的代码里使用,并注释清除.以免别人使用,对this错误的判断.\n\n### 2.5 this词法\n ES6 中介绍了一种无法使用上面四条规则的特殊函数类型:箭头函数。     \n **箭头函数不使用 this 的四种标准规则，而是根据外层(函数或者全局)作用域来决定 this。**(而传统的this与函数作用域没有任何关系,它只与调用位置的上下文对象有关.这点在本章开头就已经反复强调了.)\t\t\n \n **重要:**\n - 箭头函数最常用于回调函数中，例如事件处理器或者定时器.\n - 箭头函数可以像 bind(..) 一样确保函数的 this 被绑定到指定对象\n - 箭头函数用更常见的词法作用域取代了传统的 this 机制。\n\n**注意:** 这种情况:\n```js \nfunction module() {\n  return this.x;\n}\nvar foo = {\n  x: 99,\n  bar:module.bind(this) //此时bind绑定的this为window.\n  \n}\nvar x=\"window\"\n\nconsole.log(foo.bar())//window\n\n```\n\n在 ES6 之前我们就已经在使用一种几乎和箭头函数完全一样的模式:\n```js \nfunction foo() {\nvar self = this; // lexical capture of this \n  setTimeout( function(){\n             console.log( self.a );\n         }, 100 );\n  }\nvar obj = { \n    a: 2\n};\nfoo.call( obj ); // 2\n```\n虽然 self = this 和箭头函数看起来都可以取代 bind(..)，但是从本质上来说，它们想替代的是 this 机制。(的确是这样,我一般会用me替代self.因为少两个单词=.=)\n\n**关于this的编码规范建议:**\n\n - 1. 只使用词法作用域并完全抛弃错误this风格的代码;\n- 2. 完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。\n\n在自己实际工作中,其实是两种混用的,绝大部分情况下都会使用词法作用域风格.因为有时候你真的很难做到完全统一.我现在的习惯是,在写任何函数时,开头第一个就是`var me =this;`这样在看到函数第一眼,就知道:哦,这个函数是用词法作用域风格的.尤其函数内涉及到回调.这样就避免了写着写着发现this绑定到其他地方去了,一个函数里面this不统一的情况.\n\n### 2.6 小结\n(这里总结得很好,我就全部copy了)\n如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。\n\n - 1. 由new调用?绑定到新创建的对象。\n - 2. 由call或者apply(或者bind)调用?绑定到指定的对象。\n - 3. 由上下文对象调用?绑定到那个上下文对象。\n - 4. 默认:在严格模式下绑定到undefined，否则绑定到全局对象。\n\n一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。\t\n\nES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这其实和 ES6 之前代码中的 self = this 机制一样。     \n\n**特别注意:** 其中最需要注意的就是**当你使用jquery或vue时**,此时this是被动态绑定了的.大多数 jQuery 方法将 this 设置为已选择的 dom 元素。使用 Vue.js时，则方法和计算函数通常将 this 设置为 Vue 组件实例。vue文档中`所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () => this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。` 也包括使用第三方ajax时,例如axios.解决方法也很简单,要么使用传统的function或者使用`let _this=this`进行接管.其实当你使用vue时,你默认的思想就是this指的就是vue实例.所以除了钩子函数和axios里会有点影响外,其余还好.\n\n**PS** 这里再补充说明\t\n**上下文(对象)与函数作用域的区别于联系:**\n\n - **上下文：** 可以理解为一个对象，所有的变量都储存在里面.上下文环境是在函数被调用并被引擎执行时创建的.如果你没调用,那么就没有上下文.\n - **作用域：** 除了全局作用域，只有函数和ES6新增的let,const才能创建作用域.创建一个函数就创建了一个作用域，无论你调用不调用，函数只要创建了，它就有独立的作用域.作用域控制着被调用函数中的变量访问.\n - **两者:** 作用域是基于函数的，而上下文是基于对象的。作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的。上下文始终是this关键字有关， 它控制着this的引用。一个作用域下可能包含多个上下文。有可能从来没有过上下文（函数没有被调用）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了(垃圾回收)；有可能同时存在一个或多个（闭包）。\n\n## 第三章 对象\n\n### 3.1 语法\n对象可以通过两种形式定义:声明(文字)形式(就是常说的对象字面量)和构造形式。\n\n - 声明形式(对象字面量):\n ```js\n var myObj = { \n   key: value\n   // ... \n};\n ```\n \n - 构造形式:\n```js\nvar myObj = new Object(); \nmyObj.key = value;\n```\n构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个 键 / 值对，但是在构造形式中你必须逐个添加属性。\nPS:其实我们绝大部分情况下都是使用对象字面量形式创建对象.\n\n### 3.2 类型\n在JavaScript中一共有6中主要类型(术语是\"语言类型\")\n\n - string\n - number\n - boolean  \n - null \n - undefined  \n - object\n\n**简单数据类型:**\t\t\n其中string、boolean、number、null 和 undefined属于简单基本类型,并不属于对象.\t\nnull 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 \"object\"。实际上，null 本身是基本类型。     \n**PS:** 原因是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。\n\n**对象:**     \n对象除了我们自己手动创建的,JavaScript其实内置了很多对象,也可以说是对象的一个子类型.     \n**内置对象:**\t\n - String \n - Number \n - Boolean  \n - Object \n - Function  \n - Array \n - Date \n - RegExp  \n - Error\n\n在 JavaScript 中，这些内置对象实际上只是一些内置函数。这些内置函数可以当作构造函数(由 new 产生的函数调用——参见第 2 章)来使用.     \n**几点说明:**\n\n - 函数就是对象的一个子类型(从技术角度来说就是“可调用的对象”)。JavaScript 中的函数是“一等公民”，因为它们本质上和普通的对象一样(只是可以调用)，所以可以像操作其他对象一样操作函数(比如当作另一个函数的参数)。\n - 通过字面量形式创建字符串,数字,布尔时,引擎会自动把字面量转换成 String 对象,Number对象,Boolean对象，所以它们是可以访对应对象内置的问属性和方法。\n - null 和 undefined 没有对应的构造形式，它们只有文字形式。相反，Date 只有构造，没有文字形式。\n - 对于 Object、Array、Function 和 RegExp(正则表达式)来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量(这是肯定的,因为不管哪种形式一创建出来就是对象类型,不可能是其他类型,实际上是不存在字面量这一说的)。但是使用构造形式可以提供一些额外选项(内置)。\n - Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建。也可以使用 new Error(..) 这种构造形式来创建，不过一般来说用不着。\n\n### 3.3 内容\n对象属性:由一些存储在特定命名位置的(任意类型的)值.\t\n属性名:存储在对象容器内部的属性的名称.属性值并不会存在对象内.而是通过属性名(就像指针,从技术角度来说就是引用)来指向这些值真正的存储位置(就像房门号一样).     \n**属性名的两种形式:**\n\n - 1. 使用`.`操作符.也是我们最常用的形式.它通常被称为\"属性访问\". `.` 操作符会要求属性名满足标识符的命名规范.\n - 2. 使用`[\"..\"] `语法进行访问.这个通常被称为\"键访问\".`[\"..\"] `语法可以接受任意UTF-8/Unicode 字符串作为属性名。并且` [\"..\"] `语法使用字符串来访问属性,如果你的属性名是一个变量,则可以使用书中的例子`myObject[idx]`形式进行访问.这也是最常使用\"键访问\"的情况.但**如果idx是属性名则还是需写成`myObject[\"idx\"]`字符串形式.**\n\n**注意:** **在对象中，属性名永远都是字符串**。如果你使用 string(字面量)以外的其他值作为属性 名，那它首先会被转换为一个字符串。即使是数字也不例外，虽然在数组下标中使用的的 确是数字，但是在对象属性名中数字会被转换成字符串 .\n\n**补充:** 这里我在书中的例子基础上进行了修改,得到这个例子:\n```js \nvar myObject = { \n  a:2,\n  idx:111\n};\nvar idx=\"a\";\nconsole.log( myObject[idx] ); //2\nconsole.log( myObject[\"idx\"] ); //111\nconsole.log( myObject[this.idx] );  // 2 此时this是指向window.[]里的this同样符合上一章所讲的规则\n//结果是否和你所想得一样呢?\n```\n\n#### 3.3.1 **可计算属性名**\nES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名:\n```js \nvar prefix = \"foo\";\n\nvar myObject = {\n   [prefix + \"bar\"]:\"hello\", \n   [prefix + \"baz\"]: \"world\"\n};\nmyObject[\"foobar\"]; // hello\nmyObject[\"foobaz\"]; // world\n```\n\n#### 3.3.2 **属性与方法**\n\n - 我们经常把对象内部引用的函数称为“方法”(的确如此).\n - 实际上函数并不属于该对象,它不过是对函数的引用罢了.对象属性访问返回的函数和其他函数没有任何区别(除了可能发生的隐式绑定this到该对象)。\n - 即使你在对象的文字形式中声明一个函数表达式，这个函数也不会“属于”这个对象—— 它们只是对于相同函数对象的多个引用。\n\n#### 3.3.3 **数组**\n\n - 数组支持` [] `形式访问储存的值,其中`[]`内的值默认形式为数值下标(为从0开始的整数,也就是常说的索引).例如`myArray[0]`\n - 数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性.例如`myArray.baz = \"baz\"`.注意:添加新属性后,虽然可以访问,但数组的 length 值不会改变.\n -  数组可以通过`myArray[1]=11;myArray[\"2\"]=22;`这种形式对数组内容进行修改,添加.\n -  虽然数组也可以和对象一样通过`键/值 对` 形式来使用.但JS已经对数组的行为和用途进行了优化.所以还是建议使用默认的`下标/值 对` 形式来使用.\n\n#### 3.3.4 **复制对象**\n\n - 复制分为浅拷贝和深拷贝.浅拷贝会对对象中的基本数据类型进行复制(在内存中开辟新的区域),对于对象则是继续引用.而不是重新创建一个\"一样的\"对象.深拷贝则是对其中的所有内(容包括对象)进行深层次的复制.\n - 一般情况下我们可以通过JSON来复制对象.`var newObj = JSON.parse( JSON.stringify( someObj ) );`.但需要指出的是这种方法**对于包含function函数或者Date类型的对象则不管用!**\n - ES6 定义了 Object.assign(..) 方法来实现浅复制。具体用法在这就不赘述了.\n\n#### 3.3.5 **属性描述符**\n从 ES5 开始，所有的属性都具备了属性描述符。\n\n - **查看属性描述符:** 可以使用Object.getOwnPropertyDescriptor( myObject, \"a\" );方法查看myObject对象里属性a的属性描述符.\n - **配置属性描述符:** 可以使用Object.defineProperty(..)方法对属性的属性描述符就像配置.举个例子:\n ```js \n var myObject = {};\nObject.defineProperty( myObject, \"a\", {\n         value: 2,\n         writable: true, \n\t\t  configurable: true, \n\t\t  enumerable: true\n     } );\nmyObject.a; // 2\n//该方法可以配置四个属性描述符\n ```\n**注意:** 书中关于`属性描述符也被称为“数据描述符”`其实是不够准确的.\t\t\n对象里目前存在的属性描述符有两种主要形式：**数据描述符**和**存取描述符**。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter和setter函数对描述的属性。**描述符必须是这两种形式之一；不能同时是两者**。(getter和setter是后面马上要讲到的两个描述符)它们的关系如下:(详情可以查看[MDN的解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty))\n\n|       |configurable | enumerable | value | writable | get | set |\n| --- | --- | --- | --- | --- | --- | --- |\n| 数据描述符 | Yes | Yes | Yes | Yes | No | No |\n| 存取描述符 | Yes | Yes | No | No | Yes | Yes |\n\n**如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。**\n\n\n\nvalue就是该属性对应的值。默认为 undefined。下面分别介绍剩下的三个属性描述符键值:\n - **1. Writable**   决定是否可以修改属性的值。当被设置为false后,再对属性值进行修改,则会静默失败(silently failed,修改不成功,也不报错)了。如果在严格模式下，则会报出TypeError错误.\n - **2. Configurable** 决定属性描述符是否可配置.如果为true,就可以使用 defineProperty(..) 方法来修改属性描述符.注意:不管是不是处于严格模式，修改一个不可配置的属性描述符都会出错。并且**把 configurable 修改成 false 是单向操作，无法撤销!** 但是有个例外即便属性是 configurable:false，我们还是可以 把 writable 的状态由 true 改为 false，但是无法由 false 改为 true。除了无法修改，**configurable:false 还会禁止删除这个属性**.\n - **3. Enumerable**  决定该属性是否会出现在对象的属性枚举中.比如说 for..in 循环。如果把 enumerable 设置成 false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。\n\n#### 3.3.6 **不变性**\n除了上面提到的Object.defineProperty(..),ES5还可以通过很多种方法来实现属性或者对象的不可变.     \n**注意:** **这些所有方法都是只能浅不变**,如果目标对象引用了其他对象(数组、对象、函数，等)，其他对象的内容不受影响，仍然是可变的.类似于浅拷贝.\n\n**说明:**  **在 JavaScript 程序中很少需要深不可变性。** 有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。\n\n**方法:**\n - **1. 对象常量(不可改)** 结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性(不可修改、重定义或者删除)\n - **2. 禁止扩展(不可增)** 使用 Object.prevent Extensions(myObject),可以禁止一个对象添加新属性并且保留已有属性.在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。\n - **3. 密封(不可配置,但可修改)** 使用Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 **configurable:false**。密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性(虽然可以修改属性的值)。\n - **4. 冻结(不可配置,也不可修改)** Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用 Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值。这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改(不过就像我们之前说过的，这个对象引用的其他对象是不受影响的)。\n\n**注意:** 你可以“深度冻结”一个对象(连引用的对象也冻结)，具体方法为，首先在这个对象上调用 Object.freeze(..)， 然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..)。但是一定要谨慎!因为你引用的对象可能会在其他地发也被引用.\n\n**说明:** 在 JavaScript 程序中很少需要深不可变性。有些特殊情况可能需要这样做， 但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。\n\n#### 3.3.7 **[[Get]]**\n```js \nvar myObject = { \n   a: 2\n};\nmyObject.a; // 2\n```\n**myObject.a是怎么取到值2的?**     \nmyObject.a 通过对象默认内置的[[Get]] 操作(有点像函数调用:[[Get]]()).首先它会在对象中查找是否有名称相同的属性， 如果找到就会返回这个属性的值。如果没有找到名称相同的属性，按照 [[Get]] 算法的定义会执行另外一种非常重要的行为。其实就是遍历可能存在的 [[Prototype]] 链，也就是在原型链上寻找该属性。如果仍然都没有找到名称相同的属性，那 [[Get]] 操作会返回值 undefined.\n\n**注意:** 如果你引用了一个当前词法作用域中不存在的变量，并不会像对象属性一样返回 undefined，而是会抛出一个 ReferenceError 异常.\n\n#### 3.3.8 **[[Put]]**\n既然有可以获取属性值的 [[Get]] 操作，就一定有对应的 [[Put]] 来设置或者创建属性.\t\t\n\n [[Put]] 被触发时的操作分为两个情况:1. 对象中已经存在这个属性 2. 对象中不存在这个属性.\n \n如果对象中已经存在这个属性,[[Put]] 算法大致会检查下面这些内容:\n - 1. 属性是否是访问描述符(参见下一节)?如果是并且存在setter就调用setter。\n - 2. 属性的数据描述符中writable是否是false?如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。\n - 3. 如果都不是，将该值设置为属性的值。\n\n如果对象中不存在这个属性，[[Put]] 操作会更加复杂。会在第 5 章讨论 [[Prototype]] 时详细进行介绍。\n\n#### 3.3.9 **Getter和Setter**\n对象默认的 [[Put]] 和 [[Get]] 操作分别可以控制属性值的设置和获取。\t\n目前我们还无法操作[[Get]] 和 [[Put]]来改写整个对象 ,但是在ES5中可以使用 getter 和 setter 改写**部分**默认操作,**只能应用在单个属性上，无法应用在整个对象上**。\t\n\n**注意:** 书中后面说的`访问描述符`就是`存取描述符`.关于属性描述符,存取描述符及数据描述符可以查看[MDN的解释](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty))\n\n**getter:**\t\ngetter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Get]]操作.**当你设置getter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.**\n\n**语法:** `{get prop() { ... } }`或`{get [expression]() { ... } }`.其中`prop`:要设置的属性名. `expression`:从 ECMAScript 2015 开始可以使用计算属性名.\t\n**使用方式:**\n```js \nvar myObject = {\n  a: 1111, //在后面会发现myObject.a为2,这是因为设置了getter所以忽略了value特性.\n  //方式一:在新对象初始化时定义一个getter\n  get a() {\n    return 2\n  }\n};\n\nObject.defineProperty( \n  myObject, // 目标对象 \n  \"b\", // 属性名\n  {\n    // 方式二:使用defineProperty在现有对象上定义 getter\n    get: function(){ return this.a * 2 },\n    // 确保 b 会出现在对象的属性列表中\n    enumerable: true\n   }\n);\n\nmyObject.a = 3;  //因为设置了getter所以忽略了writable特性.所以这里赋值没成功\nmyObject.a; // 2\nmyObject.b; // 4\n\ndelete myObject.a;//可以使用delete操作符删除\n```\n\n\n**setter:**\t\nsetter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Put]]操作(也就是赋值操作).**当你设置setter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.**\t\t\n\n**语法:** `{set prop(val) { . . . }}`或`{set [expression](val) { . . . }}`.其中`prop`:要设置的属性名. `val`:用于保存尝试分配给prop的值的变量的一个别名。`expression`:从 ECMAScript 2015 开始可以使用计算属性名.\t\n**使用方式:**\n```js \nvar myObject = {\n  //注意:通常来说 getter 和 setter 是成对出现的(只定义一个的话 通常会产生意料之外的行为):\n  //方式一:在新对象初始化时定义一个setter\n  set a(val) {\n    this._a_ = val * 2\n  },\n  get a() {\n    return this._a_ \n  }\n};\n\nObject.defineProperty( \n  myObject, // 目标对象 \n  \"b\", // 属性名\n  {\n    set: function(val){ this._b_ = val * 3 },\n    // 方式二:使用defineProperty在现有对象上定义 setter\n    get: function(){ return this._b_ },\n    // 确保 b 会出现在对象的属性列表中\n    enumerable: true\n   }\n);\n\nmyObject.a = 2;  \nmyObject.b = 3;  \nconsole.log(myObject.a); //4\nconsole.log(myObject.b);//9\n\nconsole.log(myObject._a_);//4\nconsole.log(myObject._b_);//9\n\ndelete myObject.a;//可以使用delete操作符删除\n```\n\n#### 3.3.10 **存在性**\n**属性存在性:**\t\t\n如何判断一个对象是否存在某个属性(准确来说是**检查这个属性名是否存在**),这时就需要用到:\n\n - 1. `in`操作符\n in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中(参见第 5 章)。\n  - 2. hasOwnProperty(..) \nhasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。\n\n**注意:**\n - 1.如果有的对象可能没有连接到 Object.prototype( 通过Object. create(null) 来创建——参见第 5 章)。在这种情况下，形如myObejct.hasOwnProperty(..) 就会失败。这时可以使用一种更加强硬的方法来进行判断:Object.prototype.hasOwnProperty. call(myObject,\"a\")，它借用基础的 hasOwnProperty(..) 方法并把它显式绑定(参见第2章)到 myObject 上。\n - 2.对于数组来说,不要使用in操作符,因为它检查的是属性名,在数组中属性名就是索引,它并不是我们所关注的重点.对于数组我们更关注的是它所存的值,所以对于数组检查某个值是否存在还是采用indexOf方法.\n\n**属性可枚举性:**\t\n如果一个属性存在,且它的enumerable 属性描述符为true时.则它是可枚举的.并且可以被for..in 循环.\t\n一个属性不仅仅需要存在,还需要它的enumerable 为true才是可枚举的,才能被for...in遍历到.     \n**注意:** for...in不适合对数组进行遍历,对数组的遍历还是使用传统的for循环.     \n\n对属性的可枚举性判断,则需要用到以下几种方法:\n\n - 1. propertyIsEnumerable(..) 会检查给定的属性名是否直接存在于对象中(而不是在原型链上)并且满足 enumerable:true。\n - 2. Object.keys(..) 会返回一个数组，包含所有可枚举属性.\n - 3. Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。\n\n### 3.4 遍历\n关于这节我觉得还是以理清for..in和for..of为主.后面延伸的@@iterator及Symbol.iterator的使用,没必要过于深究.注意书中123页第二行`done 是一个布尔值，表示是否还有可以遍历的值。`有个错误,应该改成`done 是一个布尔值，表示遍历是否结束。`否则你在看后面它的说明时会感觉到自相矛盾.这里我也是以for..in和for..of为主进行说明,也更贴近我们实际使用.\n\n**for..in**\n - for..in 循环可以用来遍历对象的可枚举属性列表(**包括 [[Prototype]] 链**)。\n - 实际上for..in遍历的并不是属性值,而是属性名(即键名 key).所以你想获取属性值还是需要手动使用obj[key]来获取.\n - 一般在遍历对象时,推荐使用for..in.当然数组也是可以使用for..in的.在遍历数组时,推荐还是使用for..of.\n\n**for..of**\n - ES6 增加了一种用来遍历**数组**的 for..of 循环语法(如果对象本身定义了迭代器的话也可以遍历对象)\n - for..of与for..in最大的不同点是,**它循环的是属性值,而不是属性名.不过它只循环数组里存放的值,不会涉及到对象里的key.**(关于这个我后面的例子里会说具体对比明的)\n - for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next() 方法来遍历所有返回值。数组有内置的 @@iterator，(对象没有,所以不能使用for..of,除非我们自己定义一个)因此 for..of 可以直接应用在数组上。\n\n**例子比较**\n```js \nlet arr = ['shotCat',111,{a:'1',b:'2'}]\narr.say=\"IG niu pi!\"\n//使用for..in循环\nfor(let index in arr){\n    console.log(arr[index]);//shotCat  111  {a:'1',b:'2'}  IG niu pi!\n}\n//使用for..of循环\nfor(var value of arr){\n    console.log(value);//shotCat  111  {a:'1',b:'2'}\n}\n//注意 for..of并没有遍历得到` IG niu pi!`.原因我前面说过`它只循环数组里存放的值,不会涉及到对象里的key.`更不用说 [[Prototype]] 链.(for..in则会)\n```\n\n**如何让对象也能使用for..of ?**     \n你可以选择使用书中的自己通过Object.defineProperty()定义一个Symbol.iterator属性来实现.这里我就不赘述了.也是最接近原生使用感受的.不过我这里要介绍一个稍微简单点的方法来实现.就是使用上节讲到的Object.keys()搭配使用.举个例子:\n```js \nvar shotCat={\n    name:'shotCat',\n    age:'forever18',\n    info:{\n\tsex:'true man',\n    city:'wuhan',\n    girlFriend:'新垣结衣!'\n    }\n}\nfor(var key of Object.keys(shotCat)){\n    //使用Object.keys()方法获取对象key的数组\n    console.log(key+\": \"+shotCat[key]);\n}\n```\n\n### 3.5 小结\n书中小结总结得挺全的,这里我就搬运下\n - JavaScript 中的对象有**字面形式**(比如 var a = { .. })和**构造形式**(比如 var a = new Array(..))。字面形式更常用，不过有时候构造形式可以提供更多选项。\n - 对象是 6 个(或者是 7 个，取决于你的观点)基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。\n - 对象就是键 / 值对的集合。可以通过 .propName 或者 [\"propName\"] 语法来获取属性值。访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作(在设置属性值时是 [[Put]])， [[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话它还会查找 [[Prototype]] 链(参见第 5 章)。\n - 属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用 Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象(及其属性)的不可变性级别。\n - 属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。\n - 可以使用 ES6 的 for..of 语法来遍历数据结构(数组、对象，等等)中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。\n\n## 第四章 混合对象\"类\"\n**注意:** 正如书中提示的那样,整章一半以上几乎都是讲面向对象和类的概念.会读得人云里雾里,给人`哦,也许大概就是这样子`的感觉.后面我还是会对那些抽象的概念找到在JavaScript里对应的\"立足点\",不至于对这些概念太\"飘\".\n\n### 4.1 类理论\n说明:\n\n - 类其是描述了一种代码的组织结构形式.\n - 在js中类常见的就是构造函数,也可以是通过ES6提供的class关键字;继承就是函数;实例化就是对象,常见的就是通过new构造函数实现的.\n\n![类、继承和实例化](https://user-gold-cdn.xitu.io/2018/11/25/1674b48db6fb628b?w=1178&h=695&f=png&s=60553)\n\n**注意:** Javascript语言不支持“类”，所谓的\"类\"也是模拟出的“类”。即使是ES6引入的\"类\"实质上也是 JavaScript 现有的基于原型的继承的语法糖。\n\n#### 4.1.1 **“类”设计模式**\n**一句话**:类其实也是一种设计模式!\n\n - 类并不是必须的编程基础,而是一种可选的代码抽象.\n - 有些语言(比如 Java)并不会给你选择的机会，类并不是可选的——万物皆是类。\n - 其他语言(比如 C/C++ 或者 PHP)会提供过程化和面向类这两种语法，开发者可以选择其中一种风格或者混用两种风格。\n\n#### 4.1.2 **JavaScript中的“类”**\n\nJavaScript 只有一些近似类的语法元素 (比如 new 和 instanceof)，不过在后来的 ES6 中新增了一些元素，比如 class 关键字,其实质上也是 JavaScript 现有的基于原型的继承的语法糖。也不是真正的类.\n\n### 4.2 **类的机制**\n这部分书中的描述,我理解起来也比较费劲,主要是它提到的栈,堆与我理解中内存里的栈,堆相冲突了.这里简单说下我的理解,如有误,感激指正.\n\nstack类其实是一种数据结构.它可以储存数据,并提供一些公用的方法(这和上面提到的类很相似).但是stack类其实只是一个抽象的表示,你想对它进行操作,就需要先对它进行实例化.\n\n#### 4.2.1 **建造**\n这节主要就是说明\"类\"和\"实例\"的关系.\n在JavaScript里\"类\"主要是构造函数,\"实例\"就是对象.\t\n\n一个类就像一张蓝图。为了获得真正可以交互的对象，我们必须按照类来实例化一个东西，这个东西(对象)通常被称为实例，有需要的话，我们可以直接在实例上调用方法并访问其所有公有数据属性。\n\n总而言之:类通过实例化得到实例对象.\n\n#### 4.2.2 **构造函数**\n\n - 类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。\n - 实例就是由构造函数实例化的: new 构造函数.\n - 构造函数大多需要用 new 来调，这样语言引擎才知道你想要构造一个新的类实例。\n - 构造函数会返回一个对象,这个对象就是实例.这个对象可以调用类的方法.\n\n### 4.3 类的继承\n在面向类的语言中，你可以先定义一个类，然后定义一个继承前者的类。后者通常被称为“子类”，前者通常被称为“父类”。子类可以继承父类的行为,并且可以根据自己的需求,修改继承的行为(一般并不会修改父类的行为).注意:我们讨论的父类和子类并不是实例,在JavaScript里类一般都是构造函数。\n\n#### 4.3.1 **多态**\n大概你看了它的\"解释\",对多态还是懵懵懂懂.这里我再解释下:     \n**什么是多态?**     \n同一个操作，作用于不同的对象，会产生不同的结果。发出一个相同的指令后，不同的对象会对这个指令有不同的反应，故称为多态。\t\n**说明:** 书中例子中的inherited其实就是相当于super.并且注意书中的这些例子都是**伪代码!** 并不是真的在JavaScript里就是这样实现的.补充:这里是关于[super的mdn链接.](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super)\n\n - **多态:**\n\t - **相对性:** 其实相对性就是子类相对于父类的引用(例如使用super实现引用),并且子类对父类的引用并不会对父类的行为造成任何影响(并不会对父类**自身**的行为进行重新定义),例如书中例子子类对drive()的引用.\n\t - **可重复定义:** 子类继承父类的某个方法,并可以对这个方法进行再次定义,例如书中子类对drive()中的output进行修改.`当调用方法时会自动选择合适的定义`,这句话怎么理解,当子类实例化后,执行drive()方法时,它并不会直接去执行父类的drive().而是子类上的drive().简单来说就是实例来源于那个类,它就使用那个类的方法.\n\n**说明:** \n\n - 在 JavaScript 中“类”是属于构造函数的(类似 Foo.prototype... 这样的类型引用)。由于 JavaScript中**父类和子类的关系只存在于两者构造函数对应的 .prototype 对象中**，因此它们的构造函数之间并不存在直接联系，从而无法简单地实现两者的相对引用(在 ES6 的类中可以通过 super来“解决”这个问题，参见附录 A)。\n - **多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是复制。**\n - 其实这里讨论的这些概念其实在我们实际工作中,已经使用了无数次,只是现在你需要理解\"原来你是叫这个名字啊!\"\n\n#### 4.3.2 **多重继承**\n**多重继承:** 一个子类可以继承来自多个父类的方法.     \n**多重继承引发的问题:** 多重继承可能会出现,多个父类中方法名冲突的问题,这样`子类`到底引用哪个方法?     \n**多重继承与JavaScript:** JavaScript本身并没有提供多重继承功能.但它可以通过其他方法来达到多重继承的效果.\n\n### 4.4 **混入**\nJavaScript 中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来(参见第 5 章)(其实就是引用,所以它的多态是\"相对\"的)。\t\n由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入(**就是通过混入来模拟实现类的多重继承**)。\n\n#### 4.4.1 **显式混入**\n**郑重提醒:** \t书中这里的类都是对象形式的.例子里的sourceObj, targetObj,这就可能造成一个\"误导\",在JavaScript里是**没有真正的类**,所谓的类也不过是我们模拟出来的\"类\",不过是一种语法糖(包括ES6里的class).在JavaScript里\"所谓的类\"经常是一个构造函数,你并不能这样进行遍历,只能对它的实例对象进行这种操作.不要被书中例子带进去了,不要混淆,毕竟我们最终使用的是JavaScript(而不是其他面向对象的语言.),它里面的类常常并不是一个对象!\n\n**显式混入:**  书中没有给出明确的显式混入的定义,但是读完整章.基本就知道什么是显式混入了.显式混入就是通过类似mixin()方法,显式地将父对象属性逐一复制,或者有选择地复制(即例子中的存在性检查)到子对象上.\t      \n\n**显式混入常用方法:** 就是书中的例子, 首先有子对象,并对其进行特殊化(定义自己的属性或方法).然后再通过mixin()方法将父对象有选择地复制(即存在性检查,过滤子对象已有的属性,避免冲突)到子对象上.\n\n**显式混入注意点:**\n显式混入时,切记一点你要**避免父对象的属性与子对象特殊化的属性冲突**.这就是为什么例子中要进行存在性检查,以及后面要说的混合复制,可能存在的重写风险.\n\n**1. 再说多态**(其实说的就是js里的多态)     \n**显式多态:** 将父对象里的方法通过显式绑定到子对象上.就是显式多态.例如书中的例子:Vehicle.drive.call( this )。**显式多态也是为了JS来模拟实现多重继承的!**     \n**说明:** 在ES6之前是没有相对多态的机制。所以就使用call这种进行显式绑定实现显式动态.注意JavaScript里实现多态的方法也被称为\"伪多态\".所以不要对后面突然冒出的伪多态概念而一脸懵逼(其实整本书经常做这样的事)     \n\n**显式多态(伪多态)的缺陷:** 因为在JavaScript 中存在屏蔽(实际是函数引用的上下文不同),所以在引用的时候就需要使用显式伪多态的方法创建一个函数关联.   这些都会增加代码的复杂度和维护难度(过多的this绑定,真的会让代码很难读)。\n\n\n**2. 混合复制**(显式混入另一种不常用方法)     \n前面的显式混入的方法是先有子对象并进行特殊化,然后再有选择地复制父对象属性.这个不常用的方法则是反过来的,结合书中例子,它先用一个空对象**完全复制**父对象的属性,然后该对象复制特殊化对象的属性,最后得到子对象.这种方法明显是比第一种麻烦的,并且在复制特殊化对象时,可能会对之前重名的属性(即复制得到的父对象属性)进行重写覆盖.所以这种方法是存在风险,且效率低下的.\n\n\n**显式混入的缺陷:**\n - 1. **无法做到真正的复制:** 如果复制的对象中存在对函数的引用,那么子对象得到的是和父对象一样的,对同一个函数的引用.如果某个子对象对函数进行了修改,那么父对象及其他子对象都会受到影响.很明显这是不安全的.原因是JavaScript 中的函数无法进行真正地复制，你只能复制对共享函数对象的引用.\n - 2. **函数名和属性名同名:** 如果混入多个对象,则可能会出现这种情况.目前现在仍没有比较好的方式来处理函数和属性的同名问题(提问:这种情况下谁的优先级更高?滑稽脸)。\n\n**3. 寄生继承**     \n显式混入模式的一种变体被称为“寄生继承”，它既是显式的又是隐式的.\t\n首先会复制一份父类(对象)的定义，然后混入子类(对象)的定义(如果需要的话保留到父类的特殊引用)，然后用这个复合对象构建实例。     \n**说明:** 寄生继承与混合复制是很相似的,最大的区别是寄生继承是通过实例化构造函数(JS中的\"类\")来实现复制的.\n\n#### 4.4.2 **隐式混入**\n**隐式混入:** 它与显示混入最大的区别,就是它没有明显的对父类(对象)属性进行复制的过程.它是通过在构造函数调用或者方法调用中使用显式绑定例如: Something.cool.call( this)来实现混入(多重继承).其本质就是通过改变this指向来实现混入.\n\n### 4.5 **小结**\n整章的重点其实就是让你理解什么叫类.除了最后一小节的混入和JavaScript有那么一点点关系.其余的小结和JavaScript都没什么关系.重要的是理解类这种思想和设计模式.     \n**重点:**\n - 1.**类意味着复制!**\n - 2. 传统的类被实例化时，它的行为会被复制到实例中。类被继承时，行为也会被复制到子类中。\n - 3. 多态(在继承链的不同层次名称相同但是功能不同的函数)看起来似乎是从子类引用父类，但是本质上引用的其实是复制的结果。\n - 4. JavaScript 并不会(像类那样)自动创建对象的副本。(你只能自己手动复制,而且复制的还不彻底!)\n - 5. **混入模式(无论显式还是隐式)可以用来模拟类的复制行为**，但是通常会产生丑陋并且脆弱的语法，比如显式伪多态(OtherObj.methodName.call(this, ...))，这会让代码更加难 懂并且难以维护。\n - 6. 显式混入实际上无法完全模拟类的复制行为，因为对象(和函数!别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。忽视这一点会导致许多问题。\n - 7. 在 JavaScript 中模拟类是得不偿失的，虽然能解决当前的问题，但是可能会埋下更多的隐患。(但实际,我们用得却很多)\n\n## 第五章 原型\n注意:本章的前提是你已经比较熟悉原型及原型链.不太熟或者不知道的可以,通过[这篇文章](https://juejin.im/post/5835853f570c35005e413b19)熟悉下.  \n\n### 5.1 `[[Prototype]]`\nJavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引用(一般就是其构造函数prototype属性的引用)。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。     \n**吐槽:** 书中有这样一句话 \"注意:很快我们就可以看到，对象的 [[Prototype]] 链接可以为空，虽然很少见。\"我前前后后看了三遍都没找到它所说的`对象的 [[Prototype]] 链接可以为空.`的情况!应该是作者写忘记了.ok,这里我来说下`对象的 [[Prototype]] 链接可以为空`的情况.就是通过Object.create(null)得到的对象.它的 [[Prototype]] 是为空的.应该说它的所有都是空的.为什么?因为null是原型链的顶端.它是没有[[Prototype]]的.对应的可以对比下`console.log(Object.create({}))`和`console.log(Object.create(null))`\n\n**[[Prototype]]有什么用?**     \n我原以为作者会说可以作为存放实例对象的公共属性,然后像类一样讲得更深刻点.不过这次只是说了它表明的作用.     \n\n**作用:** 就是存放哪些不在对象自身的属性. 当我们访问一个对象的属性时,此时对象的内部默认操作[[Get]],首先会检查对象本身是否有这个属性，如果有的话就使用它。如果没有的话,[[Get]] 就会继续访问对象的 [[Prototype]] 链.([[Prototype]]其实就是其构造函数的prototype属性.也是一个对象.)如果找到,就返回该属性值.如果没有就继续寻找下一个[[Prototype]]链.直到找完整条[[Prototype]]链.还是没有的话,[[Get]] 就会返回undefined.\n\n**补充:**\n - **使用 for..in 遍历对象时** 任何可以通过原型链访问到 (并且是 enumerable:true)的属性都会被枚举。(其实这个在第三章里我说过)\n - **使用 in 操作符** 同样会查找对象的整条原型链(**无论属性是否可枚举**)\n\n#### 5.1.1 **Object.prototype**\n所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。(Object.prototype的[[Prototype]] 最终会指向null.null就是最后的终点).\t\t\n这个 Object.prototype 对象，包含了 JavaScript 中许多通用的功能,例如:toString() , valueOf(), hasOwnProperty(..)和 isPrototypeOf(..)。\n\n#### 5.1.2 **属性设置和屏蔽**\n**说明:** 看完本节时,切记不要对`myObject.foo = \"bar\"`这种简单的对象属性赋值产生顾虑和疑惑.这种赋值绝对不会对原型链产生任何影响!基本也不会出现赋值不成功的情况.**如果有人敢在团队项目里修改对象的属性描述符,早就被拖出去打死了!!!** 这部分可以看做补充知识,知道有这些奇葩设定就行.其实**这节更应该关注的是`myObject.foo `的返回值.**     \n**注意:** 书中提到的动词`屏蔽`其实指的就是在对象上创建同名属性(原型链上已有该属性).注意不要被绕晕了.还有++就相当于myObject.a=myObject.a+1,注意分解就行,不存在什么特别需要当心的.\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b5220c3a82ce?w=1375&h=962&f=png&s=207062)\n\n\n\n### 5.2 “类”\n\n - JavaScript里只有对象,没有类!\n - JavaScript不需要通过类来抽象对象.而是自己直接创建对象,并定义对象的行为.\n\n#### 5.2.1 **“类”函数**\n吐槽:模仿类竟然被说成奇怪的无耻滥用!?不这样做,js那些高级用法怎么实现?怎么会有现在前端的百花齐放(轮子满地跑)?这也是冒得办法的办法啊!毕竟当时js只是小众,不指望它有多大能耐.毕竟只是一个人用7天\"借鉴\"出来的东西.\n\n**\"类\"函数:** JavaScript用来模仿类的函数就被称为类函数,其实就是我们常说的构造函数.\t\t\n\n**\"类\"函数模拟类的关键:** 所有的函数默认都会拥有一个名为 prototype 的公有并且不可枚举(参见第 3 章)的属性，它会指向另一个对象.当我们通过new 函数(构造函数)来得到实例对象时,此时new会给实例对象一个内部的 [[Prototype]]属性，实例对象内部的[[Prototype]]属性与构造函数的prototype属性都指向同一个对象.那JS的这个特性怎么模拟类呢?首先**类的本质就是复制!**.明白这点后,我们就需要实现伪复制.我们可以将类里的属性,放在函数的prototype属性里.这样该函数的实例对象就可以通过[[Prototype]](原型链)访问这些属性.我们也经常把这种行为称为原型继承(作者后面会疯狂吐槽这个称呼,我后面再解释为什么吐槽).这样就实现了伪\"复制\". 可以达到和类相似的效果.\n\n**注意:** 虽然说所有的函数默认都会拥有一个名为 prototype属性.但也有特殊的时候.就不是默认的情况.就是通过bind()硬绑定时.所返回的**绑定函数,它是没有prototype属性的!**\n\n\n**图解真正的类与JS的模拟类:**\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b57bbca1ee25?w=523&h=523&f=png&s=68402)\n\n\n**关于原型继承这个名字的疯狂吐槽:**      作者的吐槽主要集中在\"继承\"两个字,原因是在面向类的语言中,\"继承\"意味着复制,但在JavaScript里原型继承却根本不是这个意思,它并没有复制,而是用原型链来实现.所以疯狂吐槽其误导.\n\n**什么是差异继承?** 我根本没听过这个术语,初次看作者所谓的解释,这是啥?他想说啥?后来读了好多遍,终于大概理解了.如果你也看不懂作者想在表达什么,就pass这部分.没必要理解.反而会把你看得更迷惑.\t\t\n好了,我来解释下什么叫差异继承.差异继承就是原型继承的一个不常用的别名.我们知道对象可以通过原型链继承一部分属性,但我们仍可以给对象设置其他有差异不同的属性.这也就可以称为差异继承.\n\n#### 5.2.2 **“构造函数”**\n构造函数之所以是构造函数,是因为它**被new调用**,如果没被new调用,它就是一个普通函数.实际上,new会劫持所有普通函数并用构造对象的形式来调用它,并且无论如何都会构造返回一个对象.\n\n#### 5.2.3 **技术**\n关于两种“面向类”的技巧,我这就不说明了,理解了这部分第一第二章关于this的使用,就很简单了.\n\n**prototype.constructor:**\t\n为了正确理解constructor.我特意在标题上加上prototype.是想强调:一个对象访问constructor时,会默认访问其原型对象上的constructor属性.\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b5a12dfc7024?w=573&h=463&f=png&s=87705)\n\n\n\n**注意:**\n```js \nfunction Foo() { /* .. */ }\nFoo.prototype = { /* .. */ }; // 有时候我们会需要创建一个新原型对象,因此也不会有默认的constructor属性指向构造函数\n// 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性\n// 关于 defineProperty(..)，参见第 3 章 \nObject.defineProperty( Foo.prototype, \"constructor\" , {\n  enumerable: false,//不可枚举\n  writable: true,\n  configurable: true,\n  value: Foo // 让 .constructor 指向 Foo\n} );\n//上面这种方法是比较严谨,也比较麻烦的.并且使用Object.defineProperty()风险是很大的.\n//所以我们实际是这样修改的\nFoo.prototype.constructor=Foo; //直接将其赋值Foo 唯一要注意的是此时constructor是可枚举的.会被实例对象的for..in..遍历到.\n```\n\n### 5.3 (原型)继承\n**原型对象到原型对象的继承:**\n例如:Bar.prototype 到 Foo.prototype 的委托关系，\t\n正确的JavaScript中“原型风格”:\n```js\nfunction Foo(name) {\n  this.name = name;\n}\nFoo.prototype.myName = function() { \n  return this.name;\n};\nfunction Bar(name,label) { \n  Foo.call( this, name ); \n  this.label = label;\n}\n\n// 我们创建了一个新的 Bar.prototype 对象,并且它的[[Prototype]] 关联Foo.prototype \nBar.prototype = Object.create( Foo.prototype );\n// 注意!Object.create()是返回一个新的对象,所以现在没有 Bar.prototype.constructor 了 \n// 如果你需要这个属性的话可能需要手动修复一下它\nBar.prototype.myLabel = function() { \n  return this.label;\n};\n\nvar a = new Bar( \"a\", \"obj a\" );\n\na.myName(); // \"a\"\na.myLabel(); // \"obj a\"\n```\n错误用法:\n\n - 1, `Bar.prototype = Foo.prototype;` 此时并不会创建一个关联到 Bar.prototype 的新对象，它只是让 Bar.prototype 直接引用 Foo.prototype 对象。 因此当你执行类似 Bar.prototype. myLabel = ... 的赋值语句时会直接修改 Foo.prototype 对象本身。\n - 2, `Bar.prototype = new Foo();` 它使用 了 Foo(..) 的“构造函数调用”，如果函数 Foo 有一些其他操作的话,尤其是与this有关的的话，就会影响到 Bar() 的“后代”，后果不堪设想。\n\n**结论:** 要创建一个合适的关联对象，我们**需使用 Object.create(..)** 而不是使用具有副作用的 Foo(..)。这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉(主要是需要手动设置constructor)，不能直接修改已有的默认对象。\n\n**检查\"类\"关系**\t\t\n\n - **instanceof 操作符**: 验证左边的普通对象的整条[[prototype]]链是否有指向右边函数的prototype,例如:`a instanceof Foo`。\n - **isPrototypeOf(..)  方法**: 验证在对象 a 的整条 [[Prototype]] 链中是否出现过 原型对象b.例如:`b.isPrototypeOf( a );`\n\n**注意:** 如果使用内置的 .bind(..) 函数来生成一个**硬绑定函数**(参见第 2 章)的话， 该函数**是没有 .prototype 属性的**。如果硬绑定函数instanceof 的话,则其bind的 目标函数的prototype会成为硬绑定函数的prototype.\n\n**关于__proto__**:\n我们知道函数可以直接通过prototype属性直接访问原型对象.那对象怎么访问呢?我们知道是通过[[prototype]]链.怎么访问呢?\t\n在ES5之中的标准方法:通过Object.getPrototypeOf(  )方法来获取对象原型.`Object.getPrototypeOf( a ) === Foo.prototype; // true`,\t\n另一种方法:在 ES6 之前并不是标准,但却被绝大多数浏览器支持的一种方法,可以访问内部[[prototype]]对象.那就是`__proto__`.例如:`a.__proto__ === Foo.prototype; // true`.你甚至可以通过`.__proto__.__ptoto__... `来访问整个原型链.  `.__proto__ `实际上并不存在于你正在使用的对象中.并且它看起来很像一个属性，但是实际上它更像一个 getter/setter(见第三章).\n\n### 5.4 对象关联\n[[Prototype]] 机制就是存在于对象中的一个内部链接，**它会引用其他对象。**\n\n这个链接的作用是:如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找。同理，如果在后者中也没有找到需要的 引用就会继续查找它的 [[Prototype]]，以此类推。这一系列对象的链接被称为**原型链**。\n\n\n#### 5.4.1 **创建关联**\n**问:**\"我们已经明白了为什么 JavaScript 的 [[Prototype]] 机制和类不一样，也明白了它如何建立对象间的关联。\"     \n**答:** 类的机制是复制,JavaScript里原型链的机制是引用.\t\n\n**问:**\"那 [[Prototype]] 机制的意义是什么呢?为什么 JavaScript 开发者费这么大的力气(模拟类)在代码中创建这些关联呢?\"     \n**答:** 意义就是模拟类,JavaScript不需要复制(我觉得这不是个优点)而通过原型链实现\"实例\"对\"类\"的\"继承(其实就是引用)\".这样就达到了实例对象对某些属性(即原型对象里的属性)的复用.\n\n**`Object.create(..)`**\t\t\n这个方法其实我们在前面已经使用过很多次.\"Object.create(..) 会创建一个新对象(bar)并把它关联到我们指定的对象(foo)，这样我们就可以充分发挥 [[Prototype]] 机制的威力(委托)并且避免不必要的麻烦(比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。\"实际上这个方法就是创建返回一个新对象,这个新对象的原型([[Prototype]])会绑定为我们输入的参数对象foo.并且由于不是通过构造函数的形式,所以不需要为函数单独设置prototype.虽然Object.create(..)很好,但实际我们使用的更多的还是构造函数形式.     \n**注意:**  Object.create(..) 的第二个参数指定了需要添加到新对象中的属性名以及这些属性的属性描述符(参见第 3 章)。\n\n**`Object.create(null)`**     \n这个方法其实我们在前面也讲解过几次.\"Object.create(null) 会创建一个拥有空(或者说null)[[Prototype]] 链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符(之前解释过)无法进行判断，因此总是会返回 false。 **这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。**\"\n\n\"Object.create()的polyfill代码.\"这部分我就不做解读了,因为现在都8102年,es6早就普及了,你几乎不可能再用到es5之前的语法了.所以这部分大家了解下即可.\n\n\n\n\n#### 5.4.2 **关联关系是备用**\n**[[Prototype]] 的本质作用:**      书中提到了一个观点\"处理“缺失”属性或者方法时的一种备用选项。\"(即备用设计模式).但随后进行了否定\"但是这在 JavaScript 中并不是很常见。所以如果你使用的是这种模式，那或许应当退后一步并重新思考一下这种模式是否合适。\" 作者给出的观点是:\"进行委托设计模式,即例子中的内部委托(就是在对象里套了个壳再引用了一遍,为的是将委托进行隐藏).这样可以使我们的API设计得更加清晰.\"文中的清晰是指,当我们需要引用原型对象的属性方法时,我们在对象内部设置对应专门的属性(例子中的doCool),进行内部委托(其实就是套个壳进行隐藏).这样我们**对象的属性就是\"完整\"的.**\n\n在实际工作中,我们常常就是把原型对象作为存放对象的公共属性方法的地方.对于一般比较重要的操作才会在对象里进行内部委托(隐藏委托)!\n\n### 5.5 小结\n总结得很好很全面,这里我还是直接摘抄了,不是偷懒哦!\n - 如果要访问对象中并不存在的一个属性，**[[Get]] 操作(参见第 3 章)就会查找对象内部[[Prototype]] 关联的对象。** 这个关联关系实际上定义了一条“原型链”(有点像嵌套的作用域链)，在查找属性时会对它进行遍历。\n - **所有普通对象都有内置的 Object.prototype，** 指向原型链的顶端(比如说全局作用域)，如 果在原型链中找不到指定的属性就会停止。toString()、valueOf() 和其他一些通用的功能 都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。\n - 关联两个对象最常用的方法是使用 new 关键词进行函数调用，在调用的 4 个步骤(第 2 章)中会创建一个关联其他对象的新对象。\n - 使用 new 调用函数时会把新对象的 .prototype 属性关联到“其他对象”(就是构造函数prototype所指的对象)。带 new 的函数调用 通常被称为“构造函数调用”，尽管它们实际上和传统面向类语言中的类构造函数不一样。\n - JavaScript 中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的。\n - “委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。(意思就是原先继承应该改为原先委托?)\n\n## 第六章 行为委托\n第 5 章的结论:[[Prototype]] 机制就是指对象中的一个内部链接引用另一个对象。换句话说，JavaScript 中这个机制的本质就是对象之间的关联关系。在第六章又被称为委托.\t\t\nPS:前面在讲原型的时候我就习惯用父对象指代原型对象(类似\"父类\"),用子对象指代其实例对象(类似\"子类\").本章也将采用这种称呼,故下面不再说明.(其实我觉得用父对象和子对象称呼更形象)\n### 6.1 面向委托的设计\n一句话:[[Prototype]]机制是面向委托的设计,是不同于面向类的设计. 下面将分别介绍类理论和委托理论.\n\n#### 6.1.1 **类理论**\n**类理论设计方法:** 首先定义一个通用父(基)类，在 父类类中定义所有任务都有(通用)的行为。接着定义子类 ，它们都继承自 父类并且会添加一些特殊的行为来处理对应的任务,并且在继承时子类可以使用方法重写(和多态)父类的行为.\t\t\n\n类理论中许多行为可以**先“抽象”到父类然后再用子类进行特殊化(重写)。**\t\t\nps:这部分了解即可,着重理解下面JavaScript用到的委托.\n\n#### 6.1.2 **委托理论**\n**类理论设计方法:** 首先你会定义一个\"父\"对象(相当于上节中的父类)，它会包含所有任务都可以使用(委托)的具体行为。接着，对于**每个任务**你都可以定义一个对象(\"子\"对象)来存储对应的数据和行为。你可以把特定的任务对象都关联到父对象上，让它们在需要的时候可以进行委托。\t(其实我们一般都是用父对象来定义通用的方法,子对象进行委托.然后子对象自身个性的属性方法就写在子对象本身,并避免与父对象的属性名冲突)\t\t\n\n**ps:** 这节书中这段话`但是我们并不需要把这些行为放在一起，**通过类的复制**，我们可以把它们分别放在各自独立 的对象中，需要时可以允许 XYZ 对象委托给 Task。`有个错误.\"通过类的复制\"应该改为\"通过\"[[Prototype]]机制\".这里应该是作者的手误.\t\t\n在 JavaScript 中，[[Prototype]] 机制会把对象关联到其他对象。无论你多么努力地说服自 己，JavaScript 中就是没有类似“类”的抽象机制。(其实主要原因还是是JavaScript没有完整的复制机制)\n\n**委托理论的使用建议:**     \nPS:书中这里写了3条,其实只有2条,第三条不过是对第一条的说明,这里我进行了合并.\n - 1. 通常来说，在 [[Prototype]] 委托中最好**把状态保存在委托者(子对象)而不是委托目标(父对象)上**。那怎么实现呢,就是通过\"this 的隐式绑定\".**在委托目标(父对象)上的函数里通过this定义保存状态**.当委托者(子对象)引用该函数方法时,此时的this就自动绑定到委托者上了.\n - 2.  在委托中我们会尽量避免在 [[Prototype]] 链的不同级别中使用相同的命名，否则就需要使用笨拙并且脆弱的语法来消除引用歧义(参见第 4 章)。\n - **补充**: 3. 在 API 接口的设计中，**委托最好在内部实现，不要直接暴露出去。** 这么做更多的是出于安全和接口稳定的考虑.建议**子对象将所有引用父对象的方法都套个函数隐藏起来,并取一个语义化的属性名.**\n\n\n**委托理论的使用注意:**\n - 1. **禁止两个对象互相委托**:当你将第二个对象反向委托给前一个对象时,就会报错.\n - 2. **调试**: 这个了解下就行.知道不同浏览器和工具对委托的解析结果并不一定相同.(吐槽:看了半天到后面出现`实际上，在编写本书时，这个行为被认定是 Chrome 的一个 bug， 当你读到此书时，它可能已经被修复了。`我只想说WTF! 好吧,我知道chrome以前可能出现过这个\"bug\"了=.=)\n\n#### 6.1.3 **比较思维模型**\n这节主要是比较了\"通过构造函数(模拟类)实现原型继承\"与\"通过对象关联(委托形式,Object.create( ... ))实现原型继承\"两种方式的区别.\n\n**结论:** 通过对象关联,委托形式,更加简洁,更加清晰易懂.\n\nPS:这里我原本自己对例子画出原型示意图.但是发现是真的复杂,并且和书中简洁后的示意图是差不多的,所以这里就不展示了,免得让读者看得更头大.这里建议,读者自己在草稿纸上画出原型示意图.\n\n### 6.2 类与对象\n其实这节讲得还是\"通过构造函数(模拟类)实现原型继承\"与\"通过对象关联(委托形式,Object.create( ... ))实现原型继承\"两种方式的区别.不过这次主要是以前端实际使用场景进行讲解.\n#### 6.2.1 **控件“类”**\n这里我就不以书中的例子进行讲解了,而是直接站在更高的角度对这种\"类\"风格的代码进行讲解.     \n**最大特点:** 1是通过构造函数进行模拟类,2是通过显式伪多态(硬绑定函数)关联两个函数.     \n**注意:** \n - **不管是类还是对象.这两种形式一般都需要定义两种数据.第一种就是实例对象要用到的\"初始保存的数据\";第二种就是通用行为的定义,包括对实例对象数据的增删改查.**\n - 下面提到的显式伪多态(详见第四章),其实指的就是使用call()方法这种硬绑定.\n - 注意ES6 class模拟类的写法我就没具体列出了.实际上class 仍然是通过 [[Prototype]] 机制实现的,不过是个表面简洁的语法糖.\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b5e847b943c0?w=1002&h=717&f=png&s=117669)\n\n\n虽然书中对显式伪多态称为\"丑陋的\",还用了一个语气动词\"呸!\".虽然这样不好,但有时用call真的很方便,所以用得也很多.\n\n#### 6.2.2 **委托控件对象**\n**最大特点:** 通过对象载体来模拟父子,并**通过Object,create(...)来对两个对象进行关联**.并**通过委托的形式进行引用**.与上节中提到的类形式还有一个区别:对象foo构建后,需要手动调用setUp方法进行初始化.故对象的构建与初始化是分开的.而构造函数形式则是在new 构造函数时, 同时进行了对象构建与初始化.(关于这点我下面还会再说明的)\n\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674b604328156c9?w=789&h=822&f=png&s=132960)\n\n\n\n关于书中这句`使用类构造函数的话，你需要(并不是硬性要求，但是强烈建议)在同一个步骤中实现构造和初始化。然而，在许多情况下把这两步分开(就像对象关联代码一样)更灵活。`的理解:使用类构造函数形式,当我们使用`new 构造函数`时,其实是在**一步实现**对象的构建和对象数据的初始化(通过构造函数里的call) ;使用这种委托形式,我们是分别通过`Object.create( ... );`构建对象和`foo.setUp( ...);`来初始化的.即我们是分两步实现的.这样分开的话其实是更加灵活,也更符合编程中的关注分离原则.\n\n### 6.3 更简洁的设计\n这节也是一样通过两者的对比来突显委托设计模式的各种优点.这里我就不再对书中的例子进行解读.如果你真正理解了类和委托的话,其实是很简单的.如果觉得复杂的话,可以在纸上理一下函数和对象之间的关系,下面我就只总结下这里提到委托设计模式的优点,当然核心是更简洁.\n\n**简洁体现在:**\n\n - 1, 委托重点在于只需要两个实体(两个对象相互关联)，而之前的\"类\"模式需要三个(父\"类\",子\"类\",实例对象)其实可以这么理解:委托模式将\"子类\"和\"实例对象\"合为一个对象了。\n - 2, 不需要基类(父类)来\"共享\"两个实体之间的行为.不需要实例化类,也不需要合成.其实这第二条就是对第一条这种结果的说明.\n - 额外补充强调:在使用构造函数模拟类时,子类通常会对父类的行为进行重写(属性名相同);但委托模式则不会,它会重新取个属性名,再引用父对象上的行为.\n\n### 6.4 更好的语法\n这节主要是介绍ES6提供的2个简洁写法与其中的隐患.\n\n**语法:**\n - 在 ES6 中我们可以在任意对象的字面形式中使用简洁方法声明，例如:\n ```js\n var Foo = {\n  bar() { /*..*/ },//字面形式声明\n};\n\n ```\n - 在 ES6 中我们可以用 Object. setPrototypeOf(..) 来修改对象的 [[Prototype]],具体用法可以[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)例如:\n```js \n// 使用更好的对象字面形式语法和简洁方法 \nvar AuthController = {\n         errors: [],\n         checkAuth() {\n           // ... \n         },\n         server(url,data) {\n             // ...\n         }\n         // ... \n};\n// 现在把 AuthController 关联到 LoginController \nObject.setPrototypeOf( AuthController, LoginController );\n```\n**弊端:**\n\n - **对象字面形式语法**:实际上就是一个匿名函数表达式.匿名函数会导致3个缺点:1. 调试栈更难追踪;2. 自我引用(递归、事件(解除)绑定，等等)更难; 3. 代码(稍微)更难理解。(其实我觉得这3个缺点还好,影响不是那么大).但是这种简洁语法很特殊，会给对应的函数对象设置一个内部的 name 属性，这样理论上可以用在追 踪栈中。所以实际上唯一的弊端就只剩第2条了.终极建议就是:如果你需要自我引用的话，那最好使用传统的具名函数表达式来定义对应的函数，不要使用简洁方法。\n - **Object. setPrototypeOf(..)**  这个是书中没有提的,我觉得有必要进行补充下.首先,Object. setPrototypeOf(..)可能会带来性能问题,如果关心性能,则应该使用Object.create()替代.**Object. setPrototypeOf(..)与Object.create()的主要区别**: Object. setPrototypeOf(..)会直接修改现有对象的[[prototype]],Object.create()则是返回一个新对象.所以你需要手动设置一下丢失的的constructor属性(如果你需要的话).而使用setPrototypeOf(..)则不需要.\n\n### 6.5 内省\n**吐槽:** 纵观整本书,作者关于JavaScript中模拟类和继承\"的批评,说它们具有很大误导性!更是嗤之以鼻!就差爆粗口了,JavaScript就像一个异教徒,应该绑在十字架上被烧死!但是他这样的观点,都是站在其他语言的角度来看待时,产生的.我想更多的读者可能是只接触过JavaScript.那么他其实是没有这些疑惑的!!!你反而给他们讲这一大堆其他语言的\"正确\"含义,有时候会时得其反!让读者更加困惑,如果是理解不透彻的,反而会怀疑自己本来写的是对的代码!所以读者应该做一个可以理解作者意图,并且拥有自我见解和观点立场!\n\n**什么是内省(自省)?**     \t\t\n首先,本节需要弄懂一个问题,什么是内省,或者是自省。书中的解释是`自省就是检查实例的类型。类实例的自省主要目的是通过创建方式来判断对象的结构和功能。`我这里再更通俗地解释下:当我们构建得到一个实例对象时,有时候我们是不太清除它的属性和方法的.尤其是第三方库.有时候贸然使用会导致很多错误(例如调用的方法不存在,或者报错等).这个时候我们就需要通过自省.其实就是通过一系列操作,来确认实例是不是我们想要的那个,实例的方法是不是我们想要的(存在且可用).\n\n**内省的方法:**\n\n - **1.通过 instanceof 语法:**\n```js \nfunction Foo() { \n  // ...\n}\nFoo.prototype.something = function(){\n  // ... \n}\nvar a1 = new Foo();\n// 假设我们不知道上面的过程,只知道得到实例对象a1\n//我们想知道a1是不是我所希望的函数Foo所构建的\nif (a1 instanceof Foo) { \n  a1.something();\n}\n```\n例子中我们有一个实例对象a1,但是我们不知道a1是不是我们所希望的函数Foo所构造的,此时就可以通过`instanceof`进行判断.\t\t`instanceof`比较适合判断实例对象和构造函数之间的关系.     \n**缺陷:** 但是如果我们想判断函数A是不是函数B的\"子类\"时,则会稍微麻烦点,我们需要像这样`A.prototype instanceof B`进行判断.并且也不能直接判断两个对象是否关联.\n\n- **2.通过 \"鸭子类型\":** 为什么会叫这个名字?看了作者的解释,还是不太能接受.不太理解外国人的脑回路.你在国内和别人说\"鸭子类型\",估计也是一脸懵逼.其实很简单,所谓的\"鸭子类型\"其实也是我们实际工作中常用的:\n```js \n//如果a1的something存在的话,则我们可以进行调用\nif ( a1.something) { \n  a1.something();\n}\n```\n其实这种方法是非常常用的,排除了在不知道存在性情况下,贸然调用的风险.     \n**缺陷:** 关于书中提到的缺点,四个字概括就是\"以偏概全\" .书中关于Promise的例子,就是以偏概全的例子.所以我们在使用时,在if判断a1.something存在时,才会在后面使用something方法.不要直接使用anotherthing,这种没确认过的方法.\n- **3.如果使用对象关联时:** 则可以比较简单的使用`Object.getPrototypeOf(..)`进行判断.例如`Object.getPrototypeOf(a)===A`其中a,A都是对象.如果为true,则说明a的原型链上含有对象A.\n\n### 6.6 小结\n\n - 除了类和继承设计模式,行为委托其实是更强大,更值得推广的模式(本观点仅代表作者的观点!)\n - 行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。(我觉得还是父子对象关系.我的解说里也都是父子相称)\n - 当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。\n - 对象关联(对象之前互相关联)是一种编码风格，它倡导的是直接创建和关联对象，不把它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现   \n \n\n","slug":"转-你不知道的JavaScript上卷读书笔记","published":1,"updated":"2019-04-03T09:33:33.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjus5nhhx000sed10xftft5h7","content":"<p>链接：<a href=\"https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4</a><br>来源：掘金</p>\n<h1 id=\"第一部分-作用域和闭包\"><a href=\"#第一部分-作用域和闭包\" class=\"headerlink\" title=\"第一部分 作用域和闭包\"></a>第一部分 作用域和闭包</h1><h2 id=\"第一章-作用域是什么\"><a href=\"#第一章-作用域是什么\" class=\"headerlink\" title=\"第一章 作用域是什么\"></a>第一章 作用域是什么</h2><a id=\"more\"></a>\n<h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a>1.1 编译原理</h3><p><strong>传统编译的三个步骤</strong></p>\n<ul>\n<li><strong>1,分词/词法分析(Tokenizing/Lexing) :</strong> 这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。例如，考虑程序var a = 2;。这段程序通常会被分解成 为下面这些词法单元:var、a、=、2、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。</li>\n<li><strong>2,解析/语法分析(Parsing):</strong> 这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“<strong>抽象语法树</strong>”(Abstract Syntax Tree，AST)。var a = 2; 的抽象语法树中可能会有一个叫作 VariableDeclaration 的顶级节点，接下来是一个叫作Identifier(它的值是a)的子节点，以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral(它的值是 2)的子节点。</li>\n<li><strong>3,代码生成:</strong> 将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指令，用来创建一个叫作 a 的变量(包括分配内存等)，并将一个值储存在 a 中。</li>\n</ul>\n<p><strong><em>说明:</em></strong> 此处只需记住第一步:分词/词法分析.第二步:解析/语法分析,得到抽象语法树(AST).第三步:代码生成,将抽象语法树转换为机器指令.</p>\n<p><strong>JavaScript与传统编译的不同点:</strong></p>\n<ul>\n<li>1,JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化.</li>\n<li>2,JavaScript与传统的编译语言不同，它不是在构建之前提前编译的，大部分情况下,它是在代码执行前的几微秒(甚至更短)进行编译.</li>\n<li>3,JavaScript 引擎用尽了各种办法(比如 JIT，可以延 迟编译甚至实施重编译)来保证性能最佳。</li>\n<li>4,JavaScript的编译结果不能在分布式系统中进行移植。</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a>1.2 理解作用域</h3><h4 id=\"1-2-1-演员表-代码编译到执行的参与者\"><a href=\"#1-2-1-演员表-代码编译到执行的参与者\" class=\"headerlink\" title=\"1.2.1 演员表(代码编译到执行的参与者)\"></a>1.2.1 演员表(代码编译到执行的参与者)</h4><p>首先介绍将要参与到对程序 var a = 2; 进行处理的过程中的演员们，这样才能理解接下来将要听到的对话。</p>\n<ul>\n<li>引擎<br>从头到尾负责整个 JavaScript 程序的编译及执行过程。</li>\n<li>编译器<br>引擎的好朋友之一，负责语法分析及代码生成等脏活累活(详见前一节的内容)。</li>\n<li>作用域<br>引擎的另一位好朋友，负责收集并维护由所有声明的标识符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。<h4 id=\"1-2-2-对话-代码编译执行过程\"><a href=\"#1-2-2-对话-代码编译执行过程\" class=\"headerlink\" title=\"1.2.2 对话(代码编译执行过程)\"></a>1.2.2 对话(代码编译执行过程)</h4><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b0e35937a479?w=1186&amp;h=1292&amp;f=png&amp;s=105617\" alt=\"JavaScript对var a =2;的处理过程\"></li>\n</ul>\n<h4 id=\"1-2-3-作用域的LHS查询和RHS查询\"><a href=\"#1-2-3-作用域的LHS查询和RHS查询\" class=\"headerlink\" title=\"1.2.3 作用域的LHS查询和RHS查询\"></a>1.2.3 作用域的LHS查询和RHS查询</h4><p>由上图可知,引擎在获得编译器给的代码后,还会对作用域进行询问<strong>变量</strong>.</p>\n<p>现在将例子改为var a = b;此时引擎会对变量a和变量b都向<strong>作用域</strong>进行查询.查询分为两种:LHS和RHS.其中L代表左.R代表右.即对变量a进行LHS查询.对变量b进行RHS查询.</p>\n<p>单单从表象上看.LHS就是作用域对<code>=</code>左边变量的查询.RHS就是作用域对<code>=</code>右边变量的查询.但实际上并不是这么简单,首先LHS和RHS都是对变量进行查询,这也是我为什么要将例子从var a=2;改为var a=b;两者的区别是两者最终要查询到的东西并不一致.LHS是要查询到变量的声明(而不是变量的值),从而后面可以为其赋值.RHS是要查询到变量最终的值.还有一点,LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“= 赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最 好将其理解为“赋值操作的目标是谁(LHS)”以及“谁是赋值操作的源头(RHS)”.或者这样理解如果这段代码需要得到该变量的’源值’,则会进行RHS查询.</p>\n<h4 id=\"1-2-4-引擎和作用域的对话\"><a href=\"#1-2-4-引擎和作用域的对话\" class=\"headerlink\" title=\"1.2.4 引擎和作用域的对话\"></a>1.2.4 引擎和作用域的对话</h4><p>这部分比较简单就是通过拟人方式比喻引擎和作用域的合作过程.一句话概括就是,引擎进行LHS和RHS查询时都会找作用域要.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure></p>\n<p>让我们把上面这段代码的处理过程想象成一段对话，这段对话可能是下面这样的。</p>\n<p>引擎:我说作用域，我需要为 foo 进行 RHS 引用。你见过它吗?<br>作用域:别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。<br>引擎:哥们太够意思了!好吧，我来执行一下 foo。<br>引擎:作用域，还有个事儿。我需要为 a 进行 LHS 引用，这个你见过吗?<br>作用域:这个也见过，编译器最近把它声名为 foo 的一个形式参数了，拿去吧。<br>引擎:大恩不言谢，你总是这么棒。现在我要把 2 赋值给 a。<br>引擎:哥们，不好意思又来打扰你。我要为 console 进行 RHS 引用，你见过它吗?<br>作用域:咱俩谁跟谁啊，再说我就是干这个。这个我也有，console 是个内置对象。 给你。<br>引擎:么么哒。我得看看这里面是不是有 log(..)。太好了，找到了，是一个函数。<br>引擎:哥们，能帮我再找一下对 a 的 RHS 引用吗?虽然我记得它，但想再确认一次。<br>作用域:放心吧，这个变量没有变动过，拿走，不谢。<br>引擎:真棒。我来把 a 的值，也就是 2，传递进 log(..)。</p>\n<h3 id=\"1-3作用域嵌套\"><a href=\"#1-3作用域嵌套\" class=\"headerlink\" title=\"1.3作用域嵌套\"></a>1.3作用域嵌套</h3><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。进而形成了一条作用域链.因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。</p>\n<p>当引擎需要对作用域进行查询时.引擎会从当前的执行作用域开始查找变量，如果找不到， 就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都 会停止。</p>\n<h3 id=\"1-4-异常\"><a href=\"#1-4-异常\" class=\"headerlink\" title=\"1.4 异常\"></a>1.4 异常</h3><p>例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a + b ); </span><br><span class=\"line\">  b = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 <strong>ReferenceError</strong> 异常。例如上面例子中<code>console.log(a+b)</code>由于RHS此时是找不到b的值.故会抛出ReferenceError.</li>\n<li>如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 <strong>TypeError</strong>。</li>\n<li>当引擎执行 LHS 查询时，<strong>如果在顶层(全局作用域)中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量</strong>，并将其返还给引擎，前提是程序运行<strong>在非 “严格模式”下</strong>。例如上面例子中的<code>b=a;</code>.</li>\n<li>在严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。</li>\n</ul>\n<h3 id=\"1-5-LHS与RHS小结\"><a href=\"#1-5-LHS与RHS小结\" class=\"headerlink\" title=\"1.5 LHS与RHS小结\"></a>1.5 LHS与RHS小结</h3><ul>\n<li>LHS和RHS查询都是引擎对作用域的查询</li>\n<li>LHS和RHS查询都是只对变量进行查询</li>\n<li>LHS和RHS都会沿着作用域链进行查询,直到最上层的全局作用域.如果没找到的话,在非严格模式下,LHS则会在全局创建一个相同名称的变量.RHS则会抛出ReferenceError的异常.</li>\n<li>如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。</li>\n<li>LHS只是找到变量的容器而已,方便进行赋值</li>\n<li><code>=</code>操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。此时都会进行LHS查询</li>\n<li>RHS查询则需要找到变量的值.</li>\n</ul>\n<h2 id=\"第二章-词法作用域\"><a href=\"#第二章-词法作用域\" class=\"headerlink\" title=\"第二章 词法作用域\"></a>第二章 词法作用域</h2><p>作用域分为两种工作模式:</p>\n<ul>\n<li>1,<strong>词法作用域</strong>.是目前最为普遍的，被大多数编程语言所采用的模式.当然JavaScript也是使用的词法作用域.</li>\n<li>2,动态作用域.使用较少,比如 Bash 脚本、Perl 中的一些模式等.</li>\n</ul>\n<h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a>2.1 词法阶段</h3><p><strong>词法阶段:</strong> 大部分标准语言编译器的第一个工作阶段叫作词法化(也叫单词化)。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。</p>\n<p><strong>词法作用域:</strong> 词法作用域就是定义在词法阶段的作用域也被称为静态作用域。即在JavaScript里作用域的产生是在编译器出来的第一阶段词法阶段产生的,并且是你在书写完代码时就已经确定了的.</p>\n<p><strong>词法作用域位置:</strong> 词法作用域位置范围完全由写代码期间函数所声明的位置来决定.</p>\n<p><strong>理解词法作用域及嵌套:</strong><br>看下例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = a * <span class=\"number\">2</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">c</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a, b, c );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bar( b * <span class=\"number\">3</span> ); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo( <span class=\"number\">2</span> ); <span class=\"comment\">// 2, 4, 12</span></span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们分成3个逐级包含的”气泡作用域”。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b17a466f8fb0?w=2020&amp;h=814&amp;f=png&amp;s=173375\" alt=\"\"></p>\n<ul>\n<li>1:包含着整个全局作用域，其中只有一个标识符:foo。</li>\n<li>2:包含着 foo 所创建的作用域，其中有三个标识符:a、bar 和 b。</li>\n<li>3:包含着 bar 所创建的作用域，其中只有一个标识符:c。</li>\n</ul>\n<p><strong>注意:</strong> 没有任何函数的气泡可以(部分地)同时出现在两个外部作用域的气泡中，就如同没有任何函数可以部分地同时出现在两个父级函数中一样。</p>\n<p><strong>引擎对作用域的查找:</strong><br>这一部分在上一节中已经说过,就是从当前作用域逐级向上,直到最上层的全局作用域.这里再进一步进行讲解.<strong>作用域查找会在找到第一个匹配的标识符时停止</strong>。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。抛开遮蔽效应， 作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>全局变量会自动成为全局对象(比如浏览器中的 window对象)的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引 用来对其进行访问。例如:<code>window.a</code>  通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。</li>\n<li>词法作用域查找只会查找一级标识符，比如 a、b 和 c。<strong>如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符</strong>，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a>2.2 欺骗词法</h3><p><strong>欺骗词法:</strong> 引擎在运行时来“修改”(也可以说欺骗)词法作用域.或者说就是在引擎运行时动态地修改词法作用域(本来在编译词法化就已经确定的).</p>\n<p><strong>欺骗词法的两种机制:</strong>(下面这两种机制理解了解即可,不推荐实际开发使用)</p>\n<h4 id=\"2-2-1-eval\"><a href=\"#2-2-1-eval\" class=\"headerlink\" title=\"2.2.1 eval\"></a>2.2.1 eval</h4><p>JavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。即将eval放在该词法作用域,然后eval携带的代码就会动态加入到该词法作用域.</p>\n<p>通过下面的例子加深理解:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str, a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">eval</span>( str ); <span class=\"comment\">// 欺骗! </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a, b );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">foo( <span class=\"string\">\"var b = 3;\"</span>, <span class=\"number\">1</span> ); <span class=\"comment\">// 1, 3</span></span><br></pre></td></tr></table></figure></p>\n<p>eval(..) 调用中的 “var b = 3;” 这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量 b，因此它对已经存在的 foo(..) 的词法作用域进行了修改。当 console.log(..) 被执行时，会在 foo(..) 的内部同时找到 a 和 b，但是永远也无法找到外部的 b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。</p>\n<p><strong>注意:</strong> </p>\n<ul>\n<li>eval(..) 通常被用来执行动态创建的代码.可以据程序逻辑动态地将变量和函数以字符形式拼接在一起之后传递进去。</li>\n<li>在严格模式下,eval(…)无法修改所在的作用域。</li>\n<li>与eval(…)类似,setTimeout(..)和 setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。</li>\n<li>new Function(..) 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数(前面的参数是这个新生成的函数的形参)。这种构建函数的语法比 eval(..) 略微安全一些，但也要尽量避免使用。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"return a + b;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">1111</span>));  <span class=\"comment\">//1112</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-2-2-with-不推荐实际使用\"><a href=\"#2-2-2-with-不推荐实际使用\" class=\"headerlink\" title=\"2.2.2 with(不推荐实际使用)\"></a>2.2.2 with(不推荐实际使用)</h4><p>例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">2</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; </span><br><span class=\"line\">  b: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo( o1 );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( o1.a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo( o2 );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( o2.a ); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2——不好，a 被泄漏到全局作用域上了!</span></span><br></pre></td></tr></table></figure></p>\n<p>起初你会觉得o1的a属性被with里的a进行了词法引用被遮蔽了成为了2.而o2没有a属性,此时with不能进行词法引用,所以此时o2.a就会变成undefined.但是,为什么最后console.log(a)会为2?因为在执行foo(o2)时,with会对其中的a=2进行LHS查询,但它在o2作用域,foo()作用域,全局作用域都没找到,因此就创建了一个全局变量a并随后赋值2.</p>\n<p>总的来说,with就是将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</p>\n<p><strong>注意:</strong> 使用 eval(..) 和 with 的原因是会被严格模式所影响(限制)。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval(..) 也被禁止了。</p>\n<h4 id=\"2-2-3-性能\"><a href=\"#2-2-3-性能\" class=\"headerlink\" title=\"2.2.3 性能\"></a>2.2.3 性能</h4><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行<strong>静态分析</strong>，并<strong>预先确定</strong>所有变量和函数的定义位置，才能在执行过程中快速找到标识符。但是eval(..) 和 with会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词法作用域。这么做就会导致引擎无法知道eval和with它们对词法作用域进行什么样的改动.只能对部分不进行处理和优化!因此如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢!。</p>\n<h3 id=\"2-3-小结\"><a href=\"#2-3-小结\" class=\"headerlink\" title=\"2.3 小结\"></a>2.3 小结</h3><ul>\n<li>词法作用域是在你书写代码时就已经决定了的.在编译的第一阶段词法分析阶段产生词法作用域.此时词法作用域基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。</li>\n<li>eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域(在运行时)。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域(同样是在运行时)。</li>\n<li>一般不要在实际代码中使用eval(…)和with,因为不仅危险,而且会造成性能问题!</li>\n</ul>\n<h2 id=\"第三章-函数作用域和块作用域\"><a href=\"#第三章-函数作用域和块作用域\" class=\"headerlink\" title=\"第三章 函数作用域和块作用域\"></a>第三章 函数作用域和块作用域</h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a>3.1 函数中的作用域</h3><ul>\n<li>JavaScript 具有基于函数的作用域，一般情况下每声明 一个函数都会创建一个函数作用域.</li>\n<li>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。这样的好处是JavaScript 变量可以根据需要改变值类型。</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a>3.2 隐藏内部实现</h3><p>因为</p>\n<ul>\n<li>子级函数作用域可以直接访问父级函数作用域里的标识符;</li>\n<li>父级函数作用域不能直接访问子级函数作用域里的标识符.</li>\n</ul>\n<p>所以用函数声明对代码进行包装，实际上就是把这些代码“隐藏”起来了。</p>\n<p>为什么要将代码进行”隐藏”?<br>因为最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必 要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。<br><strong>隐藏的好处:</strong></p>\n<ul>\n<li>实现代码私有化,减少外部对内部代码的干扰,保持其稳定性.</li>\n<li><strong>规避冲突:</strong> 可以避免同名标识符之间的冲突， 两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致 变量的值被意外覆盖。那么一般规避冲突的手段有哪些?<ul>\n<li><ol>\n<li><strong>全局命名空间:</strong> 变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象(命名空间)的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。 </li>\n</ol>\n</li>\n<li>2.<strong>模块管理:</strong> 另外一种避免冲突的办法和现代的模块机制很接近，就是从众多模块管理器中挑选一个来 使用。实际上就是我们常用的amd,commonjs,import模块机制.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-函数作用域\"><a href=\"#3-3-函数作用域\" class=\"headerlink\" title=\"3.3 函数作用域\"></a>3.3 函数作用域</h3><p><strong>函数声明与函数表达式:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们知道函数foo内的变量和函数被隐藏起来了,是不会对全局作用域造成污染.但是变量名foo仍然存在于全局作用域中,会造成污染.那有什么方法能避免函数名的污染呢?那就是作为函数表达式,而不是一个标准的函数声明.这样函数名只存在于它自己的函数作用域内,而不会存在于其父作用域,这样就没有了污染.举个函数声明的例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 3 </span></span><br><span class=\"line\">&#125;)(); </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们用()包裹一个函数,并立即执行.此时这个包装函数声明是从<code>(function</code>开始的而不是从function关键字开始.这样foo就会被当做一个函数表达式,而不是一个函数声明(即foo不会存在于父级作用域中).回到上面的例子中,全局作用域是访问不到foo的,foo只存在于它自己的函数作用域中.</p>\n<p><strong>补充: 什么是函数声明和函数表达式</strong><br>首先我们得了解JS声明函数的三种方式:</p>\n<ul>\n<li><strong>函数表达式(Function Expression):</strong> 将函数定义为表达式语句（通常是变量赋值,也可以是自调用形式）的一部分。通过函数表达式定义的函数可以是命名的，也可以是匿名的。因为它可以没有函数名,因此常被用作匿名函数.如果有,其函数名也只存在自身的函数作用域.并且函数表达式不能以“function”开头.函数表达式可以存储在变量或者对象属性里. (在函数声明前加上运算符是可以将其转化为函数表达式的.例如<code>!</code>,<code>+</code>,<code>-</code>,<code>()</code>.举个例子:<code>!function(){console.log(1)}()</code>的结果是1,并不会报错)</li>\n<li><strong>函数声明(Function Declaration):</strong>  函数声明是一种独立的结构,它会声明一个具名函数,并必须以function开头. 且函数声明会进行函数提升.使它能在其所在作用域的任意位置被调用,即后面的代码中可以将此函数通过函数名赋值给变量或者对象属性.</li>\n<li><strong>Function()构造器:</strong> 即使用Function构造器创建函数.不推荐这种用法, 容易出问题<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Function()构造器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f =<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f())</span><br><span class=\"line\"><span class=\"comment\">//思考一下,这里会打印出什么</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>怎么区分函数声明和函数表达式:</strong><br>看 function 关键字出现在声明中的位置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。例如上例中,是从<code>(</code>开始而不是function.</p>\n<p><strong>补充:</strong> 上面这段是原书的解释,我觉得这个解释并不完全,这里给出我自己的解释.</p>\n<ul>\n<li>表象区别:和它说的一样,只要是<strong>以function开头进行声明,并且含有函数名</strong>的就一定是函数声明.</li>\n<li>内在区别:其实我在上面补充两者的定义时已经说得很清楚了,我再对比总结下.<ul>\n<li>函数提升:函数声明,会将整个函数进行提升.而函数表达式则不会提升,它是在引擎运行时进行赋值，且要等到表达式赋值完成后才能调用。 </li>\n<li>函数表达式是可以没有函数名的,如果有,它的函数名也只存在于自身的作用域,<code>var f = function fun(){console.log(fun)}</code>其他地方是没有的.这也避免了全局污染,也方便递归.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-3-1-匿名和具名\"><a href=\"#3-3-1-匿名和具名\" class=\"headerlink\" title=\"3.3.1 匿名和具名\"></a>3.3.1 匿名和具名</h4><p>函数表达式可以是匿名的，而函数声明则不可以省略函数名.有函数名的就是具名函数,没有函数名的就是匿名函数.</p>\n<p>匿名函数的缺点:</p>\n<ul>\n<li><ol>\n<li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。</li>\n</ol>\n</li>\n</ul>\n<p>所以给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践.</p>\n<p><strong>PS:</strong> 个人意见是如果函数表达式有赋值给变量或属性名或者就是一次性调用的.其实是没必要加上函数名.因为代码里取名本来就很难,取不好反而会造成误解.</p>\n<h4 id=\"3-3-2-立即执行函数表达式\"><a href=\"#3-3-2-立即执行函数表达式\" class=\"headerlink\" title=\"3.3.2 立即执行函数表达式\"></a>3.3.2 立即执行函数表达式</h4><p>比如 (function foo(){ .. })()。第一个 ( ) 将函数变成表达式，第二个 ( ) 执行了这个函数。这就是立即执行函数表达式,也被称为IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression);</p>\n<p>IIFE可以具名也可以匿名.好处和上面提到的一样.IIFE还可以是这种形式<code>(function(){ .. }())</code>.这两种形式在功能上是一致的。</p>\n<h3 id=\"3-4-块作用域\"><a href=\"#3-4-块作用域\" class=\"headerlink\" title=\"3.4 块作用域\"></a>3.4 块作用域</h3><p>函数作用域是JavaScript最常见的作用域单元,有时我们仅会将var赋值变量在if或for的{…}内使用,而不会在其他地方使用.但它仍然会对外层的函数作用域造成污染.这个时候就会希望能有一个作用域能将其外部的函数作用域隔开,声明的变量仅在此作用域有效.块作用域(通常就是{…}包裹的内部)就可以帮我们做到这点.</p>\n<p>从 ES3 发布以来，JavaScript 中就有了块作用域，而 with 和 catch 分句就是块作用域的两个小例子。</p>\n<h4 id=\"3-4-1-with\"><a href=\"#3-4-1-with\" class=\"headerlink\" title=\"3.4.1 with\"></a>3.4.1 with</h4><p>我们在第 2 章讨论过 with 关键字。它不仅是一个难于理解的结构，同时也是块作用域的一个例子(块作用域的一种形式)，用 with 从对象中创建出的作用域仅在 with 声明中而非外部作用域中有效。</p>\n<h4 id=\"3-4-2-try-catch\"><a href=\"#3-4-2-try-catch\" class=\"headerlink\" title=\"3.4.2 try/catch\"></a>3.4.2 try/catch</h4><p>try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>(); <span class=\"comment\">// 执行一个非法操作来强制制造一个异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( err ); <span class=\"comment\">// 能够正常执行! </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( err ); <span class=\"comment\">// ReferenceError: err not found</span></span><br></pre></td></tr></table></figure></p>\n<p>err 仅存在 catch 分句内部，当试图从别处引用它时会抛出错误。<br>那么如果我们想用catch创建一个不是仅仅接收err的块作用域,该怎么做呢?<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;<span class=\"keyword\">throw</span> <span class=\"number\">2</span>;&#125;<span class=\"keyword\">catch</span>(a)&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就创建了一个块作用域,且a=2,仅在catch分句中存在.在ES6之前我们可以使用这种方法来使用块作用域.</p>\n<h4 id=\"3-4-3-let\"><a href=\"#3-4-3-let\" class=\"headerlink\" title=\"3.4.3 let\"></a>3.4.3 let</h4><p>ES6 引入了新的 let 关键字，提供了除 var 以外的另一种变量声明方式。let 关键字可以将变量绑定到所在的任意作用域中(通常是 { .. } 内部)。</p>\n<p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。例如在if的{…}内用let声明一个变量.那什么是显式地创建块作用域呢?就是单独创建<code>{}</code>来作为let的块作用域.而不是借用if或者for提供的<code>{}</code>.例如<code>{let a=2;console.log(a)}</code><br><strong>注意:</strong> 使用 let 进行的声明不会在块作用域中进行提升.<br><strong>块作用域的好处:</strong></p>\n<ul>\n<li>1,垃圾收集<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里做点有趣的事情</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> someReallyBigData=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//dosomeing</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     process(someReallyBigData);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my_button\"</span>);</span><br><span class=\"line\">     btn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"button click\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//假如我们在这里继续调用someReallyBigData就会形成闭包,导致不能垃圾回收(这段是书里没有,我加上方便理解的)</span></span><br><span class=\"line\">     &#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>click 函数的点击回调并不需要 someReallyBigData 变量。理论上这意味着当 process(..) 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于 click 函数形成了一个覆盖整个作用域的闭包，JavaScript 引擎极有可能依然保存着这个结构(取决于具体实现)。<br>但显式使用块作用域可以让引擎清楚地知道没有必要继续保存 someReallyBigData 了:<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里做点有趣的事情</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 在这个块中定义的内容可以销毁了! </span></span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> someReallyBigData = &#123; .. &#125;; </span><br><span class=\"line\">\t   process( someReallyBigData );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my_button\"</span>);</span><br><span class=\"line\">     btn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"button click\"</span>);</span><br><span class=\"line\">     &#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><ol start=\"2\">\n<li>let循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( i ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。这样就避免了i对外部函数作用域的污染.</p>\n<h4 id=\"3-4-4-const\"><a href=\"#3-4-4-const\" class=\"headerlink\" title=\"3.4.4 const\"></a>3.4.4 const</h4><p>除了 let 以外，ES6 还引入了 const，同样可以用来创建块作用域变量，但其值是固定的(常量)。之后任何试图修改值的操作都会引起错误。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"number\">3</span>; <span class=\"comment\">// 包含在 if 中的块作用域常量</span></span><br><span class=\"line\">  a = <span class=\"number\">3</span>; <span class=\"comment\">// 正常!</span></span><br><span class=\"line\">  b = <span class=\"number\">4</span>; <span class=\"comment\">// 错误! </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( b ); <span class=\"comment\">// ReferenceError!</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-小结\"><a href=\"#3-5-小结\" class=\"headerlink\" title=\"3.5 小结\"></a>3.5 小结</h3><p>函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，可以有效地与外部作用域隔开.    </p>\n<p>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)即块作用域。ES6中就提供了let和const来帮助创建块作用域.</p>\n<h2 id=\"第四章-提升\"><a href=\"#第四章-提升\" class=\"headerlink\" title=\"第四章 提升\"></a>第四章 提升</h2><h3 id=\"4-1-先有鸡-赋值-还是先有蛋-声明\"><a href=\"#4-1-先有鸡-赋值-还是先有蛋-声明\" class=\"headerlink\" title=\"4.1 先有鸡(赋值)还是先有蛋(声明)\"></a>4.1 先有鸡(赋值)还是先有蛋(声明)</h3><p>考虑第一段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a );</span><br></pre></td></tr></table></figure></p>\n<p>输出结果是2,而不是undefined</p>\n<p>考虑第二段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果是undefined,而不是ReferenceError<br>考虑完以上代码,你应该会考虑这个问题.到底是声明(蛋)在前，还是赋值(鸡)在前?</p>\n<h3 id=\"4-2-编译器再度来袭\"><a href=\"#4-2-编译器再度来袭\" class=\"headerlink\" title=\"4.2 编译器再度来袭\"></a>4.2 编译器再度来袭</h3><p>编译器的内容,回忆一下，引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是<strong>找到所有的声明，并用合适的作用域将它们关联起来。 之后引擎会询问作用域,对声明进行赋值操作.</strong></p>\n<p>那么,在编译阶段找到所有的声明后,编译器又做了什么?答案就是<strong>提升</strong><br>以上节的第一段代码为例,<strong>当你看到 var a = 2; 时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个声明:var a;和a = 2;。</strong> 第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。在第一个声明在编译阶段时,编译器会对<code>var a;</code>声明进行提升(即把<code>var a;</code>置于所在作用域的最上面).而<code>a = 2;</code>则会保持所在位置不动.此时代码会变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a; </span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a );</span><br></pre></td></tr></table></figure></p>\n<p>由此可知,<strong>在编译阶段,编译器会对声明进行提升.即先有蛋(声明)后有鸡(赋值)。</strong><br><strong>哪些声明会被进行提升?</strong></p>\n<ul>\n<li>变量声明:例如上例中的<code>var a;</code>.不包括后面的<code>a = 2;</code>即<strong>不包含有赋值操作的声明.</strong></li>\n<li>函数声明:注意<strong>是函数声明,而不是函数表达式!</strong>(不清楚可以看前面的3.3节,我有详细说明).函数声明提升,是将整个函数进行提升,而不是仅仅函数名的提升.</li>\n</ul>\n<h3 id=\"4-3-函数优先\"><a href=\"#4-3-函数优先\" class=\"headerlink\" title=\"4.3 函数优先\"></a>4.3 函数优先</h3><p>函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个“重复”声明的代码中)是函数会首先被提升，然后才是变量。<br>考虑以下代码:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">2</span> );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>会输出 1 而不是 2 !这个代码片段会被引擎理解为如下形式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">2</span> );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>注意，var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明(因此被忽略了)，因为函数声明会被提升到普通变量之前。<br><strong>注意:</strong> js会忽略前面已经声明的声明(不管是变量声明还是函数声明,只要其名称相同,则后续不会再进行重复声明).但是对该变量新的赋值,会覆盖之前的值.<br><strong>一句话概括:函数声明的优先级高于变量声明,会排在它前面.</strong></p>\n<h3 id=\"4-4-小结\"><a href=\"#4-4-小结\" class=\"headerlink\" title=\"4.4 小结\"></a>4.4 小结</h3><ul>\n<li>对于<code>var a = 2</code>  JavaScript引擎会将var a和 a = 2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</li>\n<li>论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的最顶端，这个过程被称为提升。</li>\n<li>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升(即赋值操作都不会提升)。</li>\n<li>注意:，当普通的 var 声明和函数声明混合在一起的时候，并且声明相同时(var的变量名和函数名相同时,会引发js对重复声明的忽略)!一定要注意<strong>避免重复声明!</strong></li>\n</ul>\n<h2 id=\"第五章-作用域闭包\"><a href=\"#第五章-作用域闭包\" class=\"headerlink\" title=\"第五章 作用域闭包\"></a>第五章 作用域闭包</h2><h3 id=\"5-1-启示\"><a href=\"#5-1-启示\" class=\"headerlink\" title=\"5.1 启示\"></a>5.1 启示</h3><ul>\n<li>JavaScript中闭包无处不在，你只需要能够识别并拥抱它。</li>\n<li>闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。</li>\n</ul>\n<h3 id=\"5-2-实质问题-amp-amp-5-3-现在我懂了\"><a href=\"#5-2-实质问题-amp-amp-5-3-现在我懂了\" class=\"headerlink\" title=\"5.2 实质问题 &amp;&amp; 5.3 现在我懂了\"></a>5.2 实质问题 &amp;&amp; 5.3 现在我懂了</h3><p>因为这两小节理解透了其实发现书里也没讲什么,这里就进行合并,并补充拓展我自己的理解和总结.<br><strong>什么是闭包?(广义版)</strong><br><strong>书中解释:</strong> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。<br><strong>MDN的解释:</strong> 闭包是函数和声明该函数的词法环境的组合。<br><strong>我的解释(详细版):</strong> 必须包含两点:</p>\n<ul>\n<li>1,有函数.由于函数自身的特性,它能访问所在的词法作用域.并能保存外部词法作用域的变量和函数到自己的函数作用域.</li>\n<li>2,有该函数所在的词法环境.其实在JavaScript中任何函数都会处在一个词法环境中.不管是全局作用域还是函数作用域.</li>\n</ul>\n<p>综上<strong>简单版</strong>就是:MDN的解释<strong>闭包是函数和声明该函数的词法环境的组合。</strong><br>还可以继续延伸成<strong>极简版</strong>:<strong>JavaScript中的函数就会形成闭包</strong>。<br><strong>Tips:</strong> 注意到上面对<code>词法作用域</code>和<code>词法环境</code>两词的分开使用了吗?<code>1,</code>里此时函数还没被执行,所以使用的是词法作用域即静态作用域.<code>2,</code>里,此时函数被执行,此时词法作用域就会变成词法环境(包含静态作用域与动态作用域).所以其实MDN的解释其实更准确一点,</p>\n<p><strong>我们日常使用时所说的闭包(狭义版,严格意义上的):</strong><br>为了便于对闭包作用域的观察和使用.我们实际使用时会将闭包的函数作用域暴露给当前词法作用域之外.也就是本书一直强调的<strong>闭包函数需要在它本身的词法作用域以外执行</strong>.作者认为符合这个条件才称得上是真正的闭包(也就是我们日常使用常说的’使用闭包’,并且<strong>使用任何回调函数其实也是闭包</strong>).<br>所以狭义版就是:闭包是函数和声明该函数的词法环境的组合,并且将闭包的函数作用域暴露给当前词法作用域之外.    </p>\n<p><strong>闭包暴露函数作用域的三种方式:</strong><br>下面部分是书中没有的,是自己实际使用时的总结,并且<strong>符合这三种形式之一的就是我们日常使用时所说的闭包(狭义版)</strong></p>\n<ul>\n<li><p>1,通过外部函数的参数进行暴露.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    baz(a) <span class=\"comment\">//通过外部函数的参数进行暴露</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   bar(); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\">val</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( val ); <span class=\"comment\">// 2 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2,通过外部作用域的变量进行暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    val=a <span class=\"comment\">//通过外部作用域的变量进行暴露</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   bar(); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3,通过return直接将整个函数进行暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bar <span class=\"comment\">//通过return直接将整个函数进行暴露</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> val=foo();</span><br><span class=\"line\">val()  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>关于闭包的内存泄露问题:</strong><br>首先必须声明一点:<strong>使用闭包并不一定会造成内存泄露,只有使用闭包不当才可能会造成内存泄露.</strong>(吐槽:面试很多新人时,张口就说闭包会造成内存泄露)<br>为什么闭包可能会造成内存泄露呢?原因就是上面提到的,因为它一般会暴露自身的作用域给外部使用.如果使用不当,就可能导致该内存一直被占用,无法被JS的垃圾回收机制回收.就造成了内存泄露.<br><strong>注意:</strong> <strong>即使闭包里面什么都没有,闭包仍然会隐式地引用它所在作用域里的所用变量.</strong>   正因为这个隐藏的特点,闭包经常会发生不易发现的内存泄漏问题.<br><strong>常见哪些情况使用闭包会造成内存泄露:</strong>    </p>\n<ul>\n<li>1,使用定时器未及时清除.因为计时器只有先停止才会被回收.所以决办法很简单,将定时器及时清除,并将造成内存的变量赋值为null(变成空指针)</li>\n<li>2,相互循环引用.这是经常容易犯的错误,并且也不容易发现.举个栗子:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = &#123;&#125;; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); </span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">  a.fn = bar; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里创建了一个a 的对象，该对象被内部函数bar引用。然后，a创建了一个属性fn指向了bar，最后返回了innerFn()。这样就形成了bar和a的相互循环引用.可能有人说bar里不使用<code>console.log(a)</code>不就没有引用了吗就不会造成内存泄露了.NONONO,bar作为一个闭包,即使它内部什么都没有,foo中的所有变量都还是隐使地被 bar所引用。这个知识点是我前面忘记提到的,也是书中没有提到的.算了我现在加到前面去吧.所以即使bar内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将<code>a.fn = bar</code>.</p>\n<ul>\n<li>3,将闭包引用到全局变量上.因为全局变量是只有当页面被关闭的时候才会被回收.</li>\n<li>4,在闭包中对DOM进行不当的引用.这个常见于老IE浏览器,现代浏览器已经长大了,已经学会了自己处理这种情况了.这里就不赘述了.想知道的可以自行问谷娘和度娘.</li>\n</ul>\n<p>总而言之,<strong>解决办法就是使闭包的能正常引用,能被正常回收.如果实在不行,就是在使用完后,手动将变量赋值null,强行进行垃圾回收.</strong></p>\n<h3 id=\"5-4-循环和闭包\"><a href=\"#5-4-循环和闭包\" class=\"headerlink\" title=\"5.4 循环和闭包\"></a>5.4 循环和闭包</h3><p>看如下例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">  &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们期望的结果是分别输出数字 1~5，每秒一次，每次一个。<br>但实际结果是,这段代码在运行时会以每秒一次的频率输出五次 6。<br>(关于书里的解释,我觉得有点说复杂了,没说到点子上,下面是我的解释.)<br><strong>为什么会是这样的结果?</strong><br>timer毫无疑问是一个闭包,它是可以访问到外部的变量i.在进行for循环时,timer()会被重复执行5次,也就是它会 console.log( i )5次.(关键部分来了!)这5次<code>i</code>其实是同一个<code>i</code>.它是来自于外部作用域,即for里面声明的i.在<strong>词法作用域中</strong>变量i只可能对应一个唯一的值,即<strong>变量和它的值是一一对应的.不会变化的</strong>.那这个值到底是多少呢?<strong>这个值就是最终值!</strong> i的最终值就是6即for循环完后<code>i</code>的值.当引擎执行<code>console.log( i )</code>时,它会询问i所对应的作用域,问它i的值是多少.这个时候作用域进行RHS查询得到的结果就是最终值6.        </p>\n<p><strong>为什么我们会以为分别输出1~5?</strong><br>因为在for循环中,我们错以为每一次循环时,函数所输出的i是根据循环动态变化的.即是1~5累加变化的.但实际上它所访问的i是同一个固定不变的值,即最终值6.可能你会有这样的疑惑,那我循环还有意义吗?i其实一开始就确定是6了.没有变化过!错!<code>i</code>变化过,它的确是从1逐步增加到6的.只是外部作用域的i值只可能是循环完后的最终值,并且函数timer()并没有保存每次i变化的值.它只是访问了外部作用域的i值即最终的值6. OK我们知道了出错的地方,就是我们没有把每次i的值保存在一个独立的作用域中.<br>接下来,看下这个改进的例子结果是多少.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>它的最终值仍然是5个6.为什么?我们来分析下,上例中,它用了一个匿名函数包裹了定时器,并立即执行.在进行for循环时,会创造5个独立的函数作用域(由匿名函数创建的,因为它是闭包函数).但是这5个独立的函数作用域里的i也全都是对外部作用域的引用.即它们访问的都是i的最终值6.这并不是我们想要的,我们要的是5个独立的作用域,并且每个作用域都保存一个”当时”<code>i</code>的值.</p>\n<p><strong>解决办法:</strong><br>那我们这样改写.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j =i;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">    &#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这次终于结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p>\n<p>这样改写后,匿名函数每次都通过j保存了每次i值,这样<code>i</code>值就通过j保存在了独立的作用域中.注意此时保存的i值是’当时’的值,并不是循环完后的最终值.这样循环完后,实际上就创建了5个独立的作用域,每个作用域都保存了一个’当时’i的值(通过j).当引擎执行<code>console.log( j )</code>询问其对应的独立作用域时,得到的值就是’当时’保存的值,再也不是6了.<br>我们还可以进一步简写为这样:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">    &#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>利用块作用域进行解决:</strong><br>在es6中,我们不仅可以使用函数来创建一个独立的作用域,我们还可以使用let声明来创建一个独立的块作用域(在<code>{}</code>内).所以我们还可以这样改写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">  &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p>\n<p>这样改写,在每次循环时,let都会对i进行声明.并通过循环自带的<code>{}</code>创建一个独立的块作用域.并且let声明的i,保存了’当时’<code>i</code>的值在当前块作用域里.因此当引擎执行<code>console.log( i )</code>时,它会询问对应的块作用域上i的值,得到的结果就是’当时’保存的值.</p>\n<p><strong>延伸:</strong><br>实际上块作用域可以称得上一个’伪’闭包(之所以是伪,是因为闭包规定了只能是函数).因为它几乎拥有闭包的所有特性.它也可以创建一个独立的作用域,同样外部作用域不能访问块作用域的变量.但块作用域可以访问外部作用域.举个栗子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#123;  <span class=\"comment\">//通过&#123;&#125; 显示表示块作用域</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = a;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'块作用域内'</span>,b) <span class=\"comment\">//2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'块作用域外'</span>,b) <span class=\"comment\">//b is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure></p>\n<p>说了相同点,说说不同点:1,保存变量到块作用域,必须通过let声明.2,块作用域不能和函数一样有名称(函数名)<br>很多不方便使用闭包或者比较麻烦的时候,是可以考虑通过块作用域进行解决.</p>\n<p><strong>总结一下一般什么时候考虑使用闭包:</strong><br>这部分也是自己工作使用的总结,如果有补充或者不对的地方,欢迎留言指正.</p>\n<ul>\n<li>1,需要创建一个独立的作用域并隐藏一些变量或函数,不被外部使用;或者想保存一些外部作用域的变量或函数到这个独立作用域.</li>\n<li>2,只想暴露<strong>一部分</strong>自身作用域的变量或函数给外部使用.</li>\n</ul>\n<h3 id=\"5-5-模块\"><a href=\"#5-5-模块\" class=\"headerlink\" title=\"5.5 模块\"></a>5.5 模块</h3><p>首先看下面的例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CoolModule</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> something = <span class=\"string\">\"cool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> another = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( something );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAnother</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( another.join( <span class=\"string\">\" ! \"</span> ) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      doSomething: doSomething,</span><br><span class=\"line\">\t  doAnother: doAnother</span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = CoolModule(); </span><br><span class=\"line\"></span><br><span class=\"line\">foo.doSomething(); <span class=\"comment\">// cool</span></span><br><span class=\"line\">foo.doAnother(); <span class=\"comment\">// 1 ! 2 ! 3</span></span><br></pre></td></tr></table></figure></p>\n<p>首先我们对上面这段代码进成分行分析:<br>私有数据变量:something, another<br>内部函数:doSomething, doAnother<br>直接说结论,上面这个例子就是模块模式.<strong>它return返回的这个对象也就是模块也被称为公共API(至少书中是这样称呼的).CoolModule()就是模块构造器或者叫模块函数.</strong><br><strong>注意</strong>:</p>\n<ul>\n<li><strong>这里的模块和我们所说的模块化开发不是完全一样的!</strong></li>\n<li>模块不一定非要是标准对象,也可以是一个函数,函数本质上也是对象,函数也可以有自己的属性.</li>\n<li>书中有这样一句话<code>CoolModule() 只是一个函数，必须要通过调用它来创建一个模块实例。如果不执行外部函数，内部作用域和闭包都无法被创建。</code>我觉得这句话有必要延伸说一下.函数调用一次就会创建一个该函数的作用域(不调用就不会创建),包括创建它里面的变量和函数.</li>\n</ul>\n<p><strong>模块模式:</strong><br>模块模式需要具备以下2个条件:(这里结合上面的例子,对书中的定义进行说明方便理解)</p>\n<ul>\n<li>1, 必须有外部的封闭函数(即CoolModule)，该函数必须至少被调用一次(每次调用都会创建一个新的模块实例–&gt;模块实例指的就是函数return返回的对象)。</li>\n<li>2, 封闭函数(即CoolModule)必须返回至少一个内部函数(即doSomething, doAnother)，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态(即something, another)。</li>\n</ul>\n<p><strong>模块:</strong><br>表面上看由模块函数(例子中的CoolModule)所返回的对象就是模块.但<strong>模块还必须还包含模块函数的内部函数(即闭包函数)</strong>.只有包含了才能真正称得上是模块.才强调一次这里的模块与模块化里的模块是有区别的,也不是nodejs里的模块.</p>\n<p><strong>模块函数:</strong><br>模块函数也就是模块构造器,例子中的CoolModule().一般它有两个常见用法.</p>\n<ul>\n<li>通过接受参数,对输出的模块进行修改.</li>\n<li>通过添加模块里添加相关的内部函数,实现对输出模块数据的增删改查.(书中用<code>命名将要作为公共API返回的对象</code>.我觉得<code>命名</code>应该是用错了,应该是<code>修改</code>即增删改查更好)</li>\n</ul>\n<h4 id=\"5-5-1-现代的模块机制\"><a href=\"#5-5-1-现代的模块机制\" class=\"headerlink\" title=\"5.5.1 现代的模块机制\"></a><strong>5.5.1 现代的模块机制</strong></h4><p>大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。<br>下面就介绍一个简单的模块管理器实现例子(对书中的例子进行逐行解读):<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先实例化我们的模块管理器,取名myModules</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyModules=(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//作为我们的模块池,保存所有定义的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> modules=&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *使用类似AMD的方式定义新模块，接收3个参数</span></span><br><span class=\"line\"><span class=\"comment\">     *name:模块名</span></span><br><span class=\"line\"><span class=\"comment\">     *deps:数组形式表示所依赖的其他模块</span></span><br><span class=\"line\"><span class=\"comment\">     *impl:模块功能的实现</span></span><br><span class=\"line\"><span class=\"comment\">    **/</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name,deps,impl</span>) </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//遍历依赖模块数组的每一项，从程序池中取出对应的模块,并赋值.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//循环完后,deps由保存模块名的数组变成了保存对应模块的数组.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;deps.length;i++) &#123;</span><br><span class=\"line\">            deps[i]=modules[deps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将新模块存储进模块池，并通过apply注入它所依赖的模块(即遍历后的deps,实际上就是用deps作为impl的入参)</span></span><br><span class=\"line\">        modules[name]=impl.apply(impl,deps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从模块池中取出对应模块</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modules[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//暴露定义模块和获取模块的两个api</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        define: define,</span><br><span class=\"line\">        get: get</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p><strong>说明:</strong>  后面书中说了这么一句<code>为了模块的定义引入了包装函数(可以传入任何依赖)</code>,这里包装函数指的是Manger(),同样也是我们上节提到的模块函数.首先说明下什么是包装函数.例如函数A当中还有一个函数B.当我们想要调用函数B的时候,则需要先调用函数A.那么函数A就叫做函数B的包装函数.也就是说我们想调用某个模块时,需要先调用它的包装函数即这里的Manger().接着是后面那句<code>并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。</code>注意这里的返回值是指impl的返回值.</p>\n<p>接着看通过管理器来定义和使用模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModules.define(<span class=\"string\">'bar'</span>,[],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span> (<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回公共API 即提供一个hello的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hello:hello</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">'foo'</span>,[<span class=\"string\">'bar'</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    functin awesome () &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//这里的bar为返回模块bar返回的公共API</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( bar.hello( hungry ).toUpperCase() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回公共API 即提供一个awesome的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        awesome:awesome</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar=MyModules.get(<span class=\"string\">'bar'</span>);<span class=\"comment\">//通过管理器获取模块'bar'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo=MyModules.get(<span class=\"string\">'foo'</span>);<span class=\"comment\">//通过管理器获取模块'foo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\"><span class=\"comment\">//调用模块bar的hello接口</span></span><br><span class=\"line\">         bar.hello( <span class=\"string\">\"hippo\"</span> ) </span><br><span class=\"line\">); <span class=\"comment\">// Let me introduce: hippo </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用模块foo的awesome接口</span></span><br><span class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure>\n<p>这节的主要内容还是了解现在是如何对模块进行一个规范处理.主要是两部分内容,一个是通过名称和依赖合理定义模块并储存.另一个则是通过名称对存储的模块的调用.其实还可以再增加一个删除模块的方法.</p>\n<h4 id=\"5-5-2-未来的模块机制\"><a href=\"#5-5-2-未来的模块机制\" class=\"headerlink\" title=\"5.5.2 未来的模块机制\"></a><strong>5.5.2 未来的模块机制</strong></h4><p>ok,这节说的模块,就是我们常说的模块化开发.并且主要提到的就是ES6里常用的import.没什么好说的.</p>\n<h3 id=\"5-6-小结\"><a href=\"#5-6-小结\" class=\"headerlink\" title=\"5.6 小结\"></a>5.6 小结</h3><p><strong>吐槽:</strong> 同一个函数概念在5.5这一个小节里,居然换着花样蹦出了三个名字!一会叫模块构造器!一会叫模块函数!以及最后的包装函数!每变化一次,都得想一遍它指的是啥!真的是无力吐槽了!!!!</p>\n<p>闭包:当函数可以记住并访问所在的词法作用域，并且函数是在当前词法作用域之外执行，这时 就产生了闭包。</p>\n<p>模块有两个主要特征:</p>\n<ul>\n<li>(1)为创建内部作用域而调用了一个包装函数(模块构造器的实例化,不想对频繁换名字吐槽了);</li>\n<li>(2)包装函数的返回值(也就是模块)必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>\n</ul>\n<h1 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h1><h2 id=\"第一章-关于this\"><a href=\"#第一章-关于this\" class=\"headerlink\" title=\"第一章 关于this\"></a>第一章 关于this</h2><h3 id=\"1-1-为什么要用this\"><a href=\"#1-1-为什么要用this\" class=\"headerlink\" title=\"1.1 为什么要用this\"></a>1.1 为什么要用this</h3><p>因为this 提供了一种更优雅的方式来隐式“传递”一个对象(即上下文对象)引用，因此可以将 API 设计得更加简洁并且易于复用。</p>\n<h3 id=\"1-2-误解\"><a href=\"#1-2-误解\" class=\"headerlink\" title=\"1.2 误解\"></a>1.2 误解</h3><p>下面两种常见的对于 this 的解释都是错误的(看看就好,就不过多解读了,以免增加了对错误的印象)。</p>\n<h4 id=\"1-2-1-指向自身\"><a href=\"#1-2-1-指向自身\" class=\"headerlink\" title=\"1.2.1 指向自身\"></a>1.2.1 指向自身</h4><p>人们很容易把 this 理解成指向函数自身.    </p>\n<p>具名函数，可以在它内部可以使用函数名来引用自身进行递归,添加属性等。(这个知识点其实在第三章提过,既然这里又提了一遍,我也再说一遍.)例如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo.count = <span class=\"number\">4</span>; <span class=\"comment\">// foo 指向它自身</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>匿名函数如果想要调用自身则,需要使用<code>arguments.callee</code>不过这个属性在ES5严格模式下已经禁止了,也不建议使用.详情可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee\" target=\"_blank\" rel=\"noopener\">MDN的说明.</a></p>\n<h4 id=\"1-2-2-它的作用域\"><a href=\"#1-2-2-它的作用域\" class=\"headerlink\" title=\"1.2.2 它的作用域\"></a>1.2.2 它的作用域</h4><p><strong>切记:</strong> <strong>this 在任何情况下都不指向函数的词法作用域。你不能使用 this 来引用一个词法作用域内部的东西。</strong> 这部分只需记住这一段话就行.</p>\n<p><strong>终极疑问:</strong> JavaScript里的作用域到底是对象吗?<br>这小节最令我在意的是里面这句话”在 JavaScript 内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过 JavaScript代码访问，它存在于JavaScript 引擎内部。”它让我想起了最开始学JS的一个疑问,JavaScript里的作用域到底是对象吗.虽然”在JS里万物皆对象”.但是作用域给人的感觉却不像是一个对象.更像是一个范围,由函数的<code>{}</code>围城的范围,限制了其中变量的访问.但直觉告诉我它和对象还是应该有点联系的.直到读到书中的这段话,更加印证了我的感觉.<br>在JavaScript里,作用域其实是一个比较特殊的对象,作用域里所有可见的标识符都是它的属性.只是作用域对象并不能通过JavaScript代码被我们访问,它只存在于JavaScript引擎内部.所以作用域作为一个”对象”是经常被我们忽略.</p>\n<h3 id=\"1-3-this到底是什么\"><a href=\"#1-3-this到底是什么\" class=\"headerlink\" title=\"1.3 this到底是什么\"></a>1.3 this到底是什么</h3><p>this 是在运行时(runtime)进行绑定的，<strong>并不是在编写时绑定</strong>，它的上下文(对象)取决于函数调用时的各种条件。this 的绑定和函数声明的位置没有任何关系，<strong>只取决于函数的调用方式</strong>。</p>\n<p>当一个函数被调用时，会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。<strong>this 就是记录的其中一个属性</strong>，会在函数执行的过程中用到。(PS:所以this并不等价于执行上下文)</p>\n<h3 id=\"1-4-小结\"><a href=\"#1-4-小结\" class=\"headerlink\" title=\"1.4 小结\"></a>1.4 小结</h3><ul>\n<li>学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域</li>\n<li>this 实际上是在函数被调用时发生的绑定，<strong>它指向什么完全取决于函数在哪里被调用(关于this你必须记住的话)</strong>。</li>\n</ul>\n<h2 id=\"第二章-this全面解析\"><a href=\"#第二章-this全面解析\" class=\"headerlink\" title=\"第二章 this全面解析\"></a>第二章 this全面解析</h2><h3 id=\"2-1-调用位置\"><a href=\"#2-1-调用位置\" class=\"headerlink\" title=\"2.1 调用位置\"></a>2.1 调用位置</h3><p>通过上节我们知道,this的绑定与函数的调用位置有关.那调用位置是什么.调用位置就是函数在代码中被调用的位置(<strong>而不是声明的位置</strong>)。</p>\n<p>要寻找调用位置,最重要的是要分析调用栈(就是为了到达当前执行位置所调用的所有函数)。我们关心的调用位置就在当前正在执行的函数的前一个调用中。PS:调用栈其实是一个解释起来有点复杂的概念.这里我就不过多解释,这里推荐一篇<a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener\">文章</a>,解释得不错.</p>\n<p>这节书里的例子解释得不错,这里就不复制代码了.其实分析调用栈只是为了在运行时找到我们关心的函数到底<strong>在哪里和被谁调用了.</strong> 但是实际别写代码时,其实并不会分析得这么清楚的,我们还是只需记住<code>this的指向就是我们调用该函数的上下文对象.意思就是我们在哪里调用该函数,this就指向哪里</code>.并且查看调用栈还可以通过浏览器的开发者工具,只需在疑惑的代码上一行加上debugger即可.浏览器在调试模式时,我们就可以在调用列表里查看调用栈.我们一般也仅在查找bug时,会使用该方法.</p>\n<h3 id=\"2-2-绑定规则\"><a href=\"#2-2-绑定规则\" class=\"headerlink\" title=\"2.2 绑定规则\"></a>2.2 绑定规则</h3><p>在找到调用位置后,则需要判定代码属于下面四种绑定规则中的哪一种.然后才能对this进行绑定.<br><strong>注意:</strong> this绑定的是上下文<strong>对象</strong>,<strong>并不是函数自身也不是函数的词法作用域</strong></p>\n<h4 id=\"2-2-1-默认绑定\"><a href=\"#2-2-1-默认绑定\" class=\"headerlink\" title=\"2.2.1 默认绑定\"></a>2.2.1 <strong>默认绑定</strong></h4><p><strong>什么是独立函数调用</strong>:对函数直接使用而不带任何修饰的函数引用进行调用.简单点一个函数直接是<code>func()</code>这样调用,<strong>前面什么都没有</strong>.不同于通过对象属性调用例如<code>obj.func()</code>,也没有通过new关键字<code>new Function()</code>;也没有通过apply,bind,call强制改变this指向.<br><strong>默认绑定:</strong> 当被用作独立函数调用时（不论这个函数在哪被调用,不管全局还是其他函数内），this默认指向到window；<br><strong>注意:</strong> 如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定，因此 this 会绑定到 undefined.</p>\n<h4 id=\"2-2-2-隐式绑定\"><a href=\"#2-2-2-隐式绑定\" class=\"headerlink\" title=\"2.2.2 隐式绑定\"></a>2.2.2 <strong>隐式绑定</strong></h4><p><strong>隐式绑定:</strong> 函数被某个对象拥有或者包含.也就是函数被作为对象的属性所引用.例如<code>obj.func()</code>.此时this会绑定到该对象上.<br><strong>隐式丢失:</strong> 不管是通过函数别名或是将函数作为入参造成的隐式丢失.只需找到它真正的调用位置,并且函数前没有任何修饰也没有显式绑定(下节会讲到)(非严格模式下).那么this则会进行默认绑定,指向window.<br><strong>注意:</strong> 实际工作中,大部分this使用错误都是由对隐式丢失的不理解造成的.<strong>记住函数调用前没有任何修饰和显式绑定(其实就是call、apply、bind),this就指向window</strong></p>\n<h4 id=\"2-2-3-显式绑定\"><a href=\"#2-2-3-显式绑定\" class=\"headerlink\" title=\"2.2.3 显式绑定\"></a>2.2.3 <strong>显式绑定</strong></h4><p>在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 间接(隐式)绑定到这个对象上。如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，此时则需要显式绑定.<br><strong>显式绑定:</strong>  可以直接指定 this 的绑定对象，被称之为显式绑定。基本上就是我们常使用的call、apply、bind方法都是显式绑定.(如果这三个方法不能熟练使用的,建议找度娘或者谷娘学习后,再看这节.)<br><strong>注意:</strong><br>如果你传入了一个原始值(字符串类型、布尔类型或者数字类型)来当作 this 的绑定对 象，这个原始值会被转换成它的对象形式(也就是new String(..)、new Boolean(..)或者 new Number(..))。这通常被称为“装箱”。</p>\n<p><strong>硬绑定:</strong> 使用call、apply、bind方法强制显式地将this进行绑定,称之为硬绑定。<br>硬绑定的典型应用场景就是创建一个包裹函数(其实就是常说的封装函数)，传入所有的参数并返回接收到的所有值.<br>在封装函数中,我们常使用apply.一方面是因为它可以手动绑定this,更重要的是因为可以用apply的第二个参数,方便地注入所有传入的参数.例如之前提到的<code>modules[name]=impl.apply(impl,deps)</code>.因为我们不知道传入的参数有多少个,但我们可以方便地使用一个<code>deps</code>将其全部注入.另一个常用的是<code>foo.apply( null,argue)</code>当我们将apply的第一个参数设置为null时,此时this就会默认绑定到window.切记使用这种用法时<strong>确保函数foo内没有使用this.</strong> 否则很可能会造成全局污染.如果是第三方库的函数就建议不要使用了,因为你不知道别人的函数是否使用了this(关于这部分内容,下节会继续提到).还有一种常用就是<code>foo.call( this)</code>.这样foo里的this都会指向当前调用的上下文环境.</p>\n<p><strong>API调用的“上下文”:</strong> 第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”(context)，其作用和 bind(..) 一样，确保你的回调函数使用指定的 this。</p>\n<h4 id=\"2-2-4-new绑定\"><a href=\"#2-2-4-new绑定\" class=\"headerlink\" title=\"2.2.4 new绑定\"></a><strong>2.2.4 new绑定</strong></h4><p>JavaScript 中 new 的机制实际上和面向类的语言完全不同。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，<strong>它们只是被 new 操作符调用的普通函数而已。实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”。</strong></p>\n<p>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p>\n<ul>\n<li>1,创建(或者说构造)一个全新的对象。</li>\n<li>2,这个新对象会被执行[[原型]]连接。</li>\n<li>3,这个新对象会绑定到函数调用的this。</li>\n<li>4,如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\n</ul>\n<p>示例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo(<span class=\"number\">2</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( bar.a ); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。<br><strong>说明:对于上面这句话进行解释下,如果在一个函数前面带上 new 关键字来调用， 那么背地里将会创建一个连接到该函数的 prototype 的新对象，this就指向这个新对象；</strong></p>\n<h3 id=\"2-3-优先级\"><a href=\"#2-3-优先级\" class=\"headerlink\" title=\"2.3 优先级\"></a>2.3 优先级</h3><p>直接上结论:<br>new绑定=显示绑定&gt;隐式绑定&gt;默认绑定<br><strong>说明:</strong> new绑定与显示绑定是不能直接进行测试比较,但通过分析发现new绑定内部其实是使用了硬绑定(显示绑定的一种),所以new绑定和显示绑定优先级应该差不多.但话说回来,一般实际使用时,不会这种复杂的交错绑定.所以只需记住下面的判定即可.</p>\n<p><strong>判断this:</strong><br>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断:</p>\n<ul>\n<li>1,函数是否在new中调用(new绑定)?如果是的话this绑定的是新创建的对象。  var bar = new foo()</li>\n<li>2,函数是否通过call、apply(显式绑定)或者硬绑定调用?如果是的话，this绑定的是 指定的对象。var bar = foo.call(obj2)</li>\n<li>3,函数是否在某个上下文对象中调用(隐式绑定)?如果是的话，this 绑定的是那个上 下文对象。var bar = obj1.foo()</li>\n<li>4,如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到 全局对象。var bar = foo()<br>就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白 this 的绑定原理了。</li>\n</ul>\n<h3 id=\"2-4-绑定例外\"><a href=\"#2-4-绑定例外\" class=\"headerlink\" title=\"2.4 绑定例外\"></a>2.4 绑定例外</h3><h4 id=\"2-4-1-被忽略的this\"><a href=\"#2-4-1-被忽略的this\" class=\"headerlink\" title=\"2.4.1 被忽略的this\"></a><strong>2.4.1 被忽略的this</strong></h4><p>如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则,this会绑定到window上.<br><strong>使用情景:</strong><br>一种非常常见的做法是使用 apply(..) 来“展开”一个数组(也可以用来方便地参数注入)，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数).通过自带bind方法实现柯里化是很方便的,比自己写要简化好多.</p>\n<p><strong>注意:</strong> </p>\n<ul>\n<li>在 ES6 中，可以用 … 操作符代替 apply(..) 来“展 开”数组，foo(…[1,2]) 和 foo(1,2)是一样的，这样可以避免不必要的 this 绑定。可惜，在 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。<ul>\n<li>当使用null或者undefined进行绑定时,要<strong>确保该函数内没有使用this</strong>,否则此时很容易对全局变量造成破坏!尤其是使用第三方库的方法!</li>\n</ul>\n</li>\n</ul>\n<p><strong>更安全的this</strong><br>如果函数内使用了this,直接使用null则可能会对全局造成破坏.因此我们可以通过创建一个“DMZ”(demilitarized zone，非军事区)对象——它就是一个空的非委托的对象(委托在第 5 章和第 6 章介绍)。让this绑定到这个”DMZ上.这样就不会对全局造成破坏.<br>怎么创建DMZ呢.就是通过<strong>Object.create(null)</strong> 创建一个空对象.这种方法和 {} 很像，但是并不会创建 Object.prototype 这个委托，所以它比 {}“更空”更加安全.</p>\n<p>PS:实际使用一般不会遇到这种情况(也可能是我太菜,没遇到),如果函数内有this,那肯定是有需要调用的变量或函数,直接把它绑定到一个空对象上.那什么都取不到,还有什么意义?所以函数没有this就传入null.如果有this就把它绑定到真正需要它的对象上,而不是一个空对象上.这些是我自己的见解,如果有不妥的,欢迎留言指正.</p>\n<h4 id=\"2-4-2-间接引用\"><a href=\"#2-4-2-间接引用\" class=\"headerlink\" title=\"2.4.2 间接引用\"></a><strong>2.4.2 间接引用</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">foo</span>: foo &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> p = &#123; <span class=\"attr\">a</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">o.foo(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">(p.foo = o.foo)(); <span class=\"comment\">// 2  其实就是foo()  此时this默认绑定到window</span></span><br></pre></td></tr></table></figure>\n<p>例子中的间接引用其实是对函数的理解不深造成的.其实(p.foo = o.foo)()就是(foo)(),这样就是全局调用foo()所以this默认就绑定到了window上.<br><strong>注意:</strong><br>对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是 函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则 this 会被绑定到全局对象。(对于这段话其实在2.2.1节就应该说了!)</p>\n<h4 id=\"2-4-3-软绑定\"><a href=\"#2-4-3-软绑定\" class=\"headerlink\" title=\"2.4.3 软绑定\"></a><strong>2.4.3 软绑定</strong></h4><p>硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。这时候则需要使用软绑定.<br><strong>Tips:</strong> 这里给的软绑定方法还是挺好的.但是建议还是在自己的代码里使用,并注释清除.以免别人使用,对this错误的判断.</p>\n<h3 id=\"2-5-this词法\"><a href=\"#2-5-this词法\" class=\"headerlink\" title=\"2.5 this词法\"></a>2.5 this词法</h3><p> ES6 中介绍了一种无法使用上面四条规则的特殊函数类型:箭头函数。<br> <strong>箭头函数不使用 this 的四种标准规则，而是根据外层(函数或者全局)作用域来决定 this。</strong>(而传统的this与函数作用域没有任何关系,它只与调用位置的上下文对象有关.这点在本章开头就已经反复强调了.)        </p>\n<p> <strong>重要:</strong></p>\n<ul>\n<li>箭头函数最常用于回调函数中，例如事件处理器或者定时器.</li>\n<li>箭头函数可以像 bind(..) 一样确保函数的 this 被绑定到指定对象</li>\n<li>箭头函数用更常见的词法作用域取代了传统的 this 机制。</li>\n</ul>\n<p><strong>注意:</strong> 这种情况:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">module</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">99</span>,</span><br><span class=\"line\">  bar:<span class=\"built_in\">module</span>.bind(<span class=\"keyword\">this</span>) <span class=\"comment\">//此时bind绑定的this为window.</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"string\">\"window\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.bar())<span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure></p>\n<p>在 ES6 之前我们就已经在使用一种几乎和箭头函数完全一样的模式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; <span class=\"comment\">// lexical capture of this </span></span><br><span class=\"line\">  setTimeout( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log( self.a );</span><br><span class=\"line\">         &#125;, <span class=\"number\">100</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; </span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call( obj ); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然 self = this 和箭头函数看起来都可以取代 bind(..)，但是从本质上来说，它们想替代的是 this 机制。(的确是这样,我一般会用me替代self.因为少两个单词=.=)</p>\n<p><strong>关于this的编码规范建议:</strong></p>\n<ul>\n<li><ol>\n<li>只使用词法作用域并完全抛弃错误this风格的代码;</li>\n</ol>\n<ul>\n<li><ol start=\"2\">\n<li>完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p>在自己实际工作中,其实是两种混用的,绝大部分情况下都会使用词法作用域风格.因为有时候你真的很难做到完全统一.我现在的习惯是,在写任何函数时,开头第一个就是<code>var me =this;</code>这样在看到函数第一眼,就知道:哦,这个函数是用词法作用域风格的.尤其函数内涉及到回调.这样就避免了写着写着发现this绑定到其他地方去了,一个函数里面this不统一的情况.</p>\n<h3 id=\"2-6-小结\"><a href=\"#2-6-小结\" class=\"headerlink\" title=\"2.6 小结\"></a>2.6 小结</h3><p>(这里总结得很好,我就全部copy了)<br>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p>\n<ul>\n<li><ol>\n<li>由new调用?绑定到新创建的对象。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>由call或者apply(或者bind)调用?绑定到指定的对象。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>由上下文对象调用?绑定到那个上下文对象。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>默认:在严格模式下绑定到undefined，否则绑定到全局对象。</li>\n</ol>\n</li>\n</ul>\n<p>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。    </p>\n<p>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这其实和 ES6 之前代码中的 self = this 机制一样。     </p>\n<p><strong>特别注意:</strong> 其中最需要注意的就是<strong>当你使用jquery或vue时</strong>,此时this是被动态绑定了的.大多数 jQuery 方法将 this 设置为已选择的 dom 元素。使用 Vue.js时，则方法和计算函数通常将 this 设置为 Vue 组件实例。vue文档中<code>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</code> 也包括使用第三方ajax时,例如axios.解决方法也很简单,要么使用传统的function或者使用<code>let _this=this</code>进行接管.其实当你使用vue时,你默认的思想就是this指的就是vue实例.所以除了钩子函数和axios里会有点影响外,其余还好.</p>\n<p><strong>PS</strong> 这里再补充说明<br><strong>上下文(对象)与函数作用域的区别于联系:</strong></p>\n<ul>\n<li><strong>上下文：</strong> 可以理解为一个对象，所有的变量都储存在里面.上下文环境是在函数被调用并被引擎执行时创建的.如果你没调用,那么就没有上下文.</li>\n<li><strong>作用域：</strong> 除了全局作用域，只有函数和ES6新增的let,const才能创建作用域.创建一个函数就创建了一个作用域，无论你调用不调用，函数只要创建了，它就有独立的作用域.作用域控制着被调用函数中的变量访问.</li>\n<li><strong>两者:</strong> 作用域是基于函数的，而上下文是基于对象的。作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的。上下文始终是this关键字有关， 它控制着this的引用。一个作用域下可能包含多个上下文。有可能从来没有过上下文（函数没有被调用）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了(垃圾回收)；有可能同时存在一个或多个（闭包）。</li>\n</ul>\n<h2 id=\"第三章-对象\"><a href=\"#第三章-对象\" class=\"headerlink\" title=\"第三章 对象\"></a>第三章 对象</h2><h3 id=\"3-1-语法\"><a href=\"#3-1-语法\" class=\"headerlink\" title=\"3.1 语法\"></a>3.1 语法</h3><p>对象可以通过两种形式定义:声明(文字)形式(就是常说的对象字面量)和构造形式。</p>\n<ul>\n<li>声明形式(对象字面量):<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> myObj = &#123; </span><br><span class=\"line\">   key: value</span><br><span class=\"line\">   <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>构造形式:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); </span><br><span class=\"line\">myObj.key = value;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个 键 / 值对，但是在构造形式中你必须逐个添加属性。<br>PS:其实我们绝大部分情况下都是使用对象字面量形式创建对象.</p>\n<h3 id=\"3-2-类型\"><a href=\"#3-2-类型\" class=\"headerlink\" title=\"3.2 类型\"></a>3.2 类型</h3><p>在JavaScript中一共有6中主要类型(术语是”语言类型”)</p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean  </li>\n<li>null </li>\n<li>undefined  </li>\n<li>object</li>\n</ul>\n<p><strong>简单数据类型:</strong><br>其中string、boolean、number、null 和 undefined属于简单基本类型,并不属于对象.<br>null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 “object”。实际上，null 本身是基本类型。<br><strong>PS:</strong> 原因是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。</p>\n<p><strong>对象:</strong><br>对象除了我们自己手动创建的,JavaScript其实内置了很多对象,也可以说是对象的一个子类型.<br><strong>内置对象:</strong>    </p>\n<ul>\n<li>String </li>\n<li>Number </li>\n<li>Boolean  </li>\n<li>Object </li>\n<li>Function  </li>\n<li>Array </li>\n<li>Date </li>\n<li>RegExp  </li>\n<li>Error</li>\n</ul>\n<p>在 JavaScript 中，这些内置对象实际上只是一些内置函数。这些内置函数可以当作构造函数(由 new 产生的函数调用——参见第 2 章)来使用.<br><strong>几点说明:</strong></p>\n<ul>\n<li>函数就是对象的一个子类型(从技术角度来说就是“可调用的对象”)。JavaScript 中的函数是“一等公民”，因为它们本质上和普通的对象一样(只是可以调用)，所以可以像操作其他对象一样操作函数(比如当作另一个函数的参数)。</li>\n<li>通过字面量形式创建字符串,数字,布尔时,引擎会自动把字面量转换成 String 对象,Number对象,Boolean对象，所以它们是可以访对应对象内置的问属性和方法。</li>\n<li>null 和 undefined 没有对应的构造形式，它们只有文字形式。相反，Date 只有构造，没有文字形式。</li>\n<li>对于 Object、Array、Function 和 RegExp(正则表达式)来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量(这是肯定的,因为不管哪种形式一创建出来就是对象类型,不可能是其他类型,实际上是不存在字面量这一说的)。但是使用构造形式可以提供一些额外选项(内置)。</li>\n<li>Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建。也可以使用 new Error(..) 这种构造形式来创建，不过一般来说用不着。</li>\n</ul>\n<h3 id=\"3-3-内容\"><a href=\"#3-3-内容\" class=\"headerlink\" title=\"3.3 内容\"></a>3.3 内容</h3><p>对象属性:由一些存储在特定命名位置的(任意类型的)值.<br>属性名:存储在对象容器内部的属性的名称.属性值并不会存在对象内.而是通过属性名(就像指针,从技术角度来说就是引用)来指向这些值真正的存储位置(就像房门号一样).<br><strong>属性名的两种形式:</strong></p>\n<ul>\n<li><ol>\n<li>使用<code>.</code>操作符.也是我们最常用的形式.它通常被称为”属性访问”. <code>.</code> 操作符会要求属性名满足标识符的命名规范.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用<code>[&quot;..&quot;]</code>语法进行访问.这个通常被称为”键访问”.<code>[&quot;..&quot;]</code>语法可以接受任意UTF-8/Unicode 字符串作为属性名。并且<code>[&quot;..&quot;]</code>语法使用字符串来访问属性,如果你的属性名是一个变量,则可以使用书中的例子<code>myObject[idx]</code>形式进行访问.这也是最常使用”键访问”的情况.但<strong>如果idx是属性名则还是需写成<code>myObject[&quot;idx&quot;]</code>字符串形式.</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>注意:</strong> <strong>在对象中，属性名永远都是字符串</strong>。如果你使用 string(字面量)以外的其他值作为属性 名，那它首先会被转换为一个字符串。即使是数字也不例外，虽然在数组下标中使用的的 确是数字，但是在对象属性名中数字会被转换成字符串 .</p>\n<p><strong>补充:</strong> 这里我在书中的例子基础上进行了修改,得到这个例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123; </span><br><span class=\"line\">  a:<span class=\"number\">2</span>,</span><br><span class=\"line\">  idx:<span class=\"number\">111</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> idx=<span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( myObject[idx] ); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( myObject[<span class=\"string\">\"idx\"</span>] ); <span class=\"comment\">//111</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( myObject[<span class=\"keyword\">this</span>.idx] );  <span class=\"comment\">// 2 此时this是指向window.[]里的this同样符合上一章所讲的规则</span></span><br><span class=\"line\"><span class=\"comment\">//结果是否和你所想得一样呢?</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-1-可计算属性名\"><a href=\"#3-3-1-可计算属性名\" class=\"headerlink\" title=\"3.3.1 可计算属性名\"></a>3.3.1 <strong>可计算属性名</strong></h4><p>ES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">   [prefix + <span class=\"string\">\"bar\"</span>]:<span class=\"string\">\"hello\"</span>, </span><br><span class=\"line\">   [prefix + <span class=\"string\">\"baz\"</span>]: <span class=\"string\">\"world\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myObject[<span class=\"string\">\"foobar\"</span>]; <span class=\"comment\">// hello</span></span><br><span class=\"line\">myObject[<span class=\"string\">\"foobaz\"</span>]; <span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-2-属性与方法\"><a href=\"#3-3-2-属性与方法\" class=\"headerlink\" title=\"3.3.2 属性与方法\"></a>3.3.2 <strong>属性与方法</strong></h4><ul>\n<li>我们经常把对象内部引用的函数称为“方法”(的确如此).</li>\n<li>实际上函数并不属于该对象,它不过是对函数的引用罢了.对象属性访问返回的函数和其他函数没有任何区别(除了可能发生的隐式绑定this到该对象)。</li>\n<li>即使你在对象的文字形式中声明一个函数表达式，这个函数也不会“属于”这个对象—— 它们只是对于相同函数对象的多个引用。</li>\n</ul>\n<h4 id=\"3-3-3-数组\"><a href=\"#3-3-3-数组\" class=\"headerlink\" title=\"3.3.3 数组\"></a>3.3.3 <strong>数组</strong></h4><ul>\n<li>数组支持<code>[]</code>形式访问储存的值,其中<code>[]</code>内的值默认形式为数值下标(为从0开始的整数,也就是常说的索引).例如<code>myArray[0]</code></li>\n<li>数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性.例如<code>myArray.baz = &quot;baz&quot;</code>.注意:添加新属性后,虽然可以访问,但数组的 length 值不会改变.</li>\n<li>数组可以通过<code>myArray[1]=11;myArray[&quot;2&quot;]=22;</code>这种形式对数组内容进行修改,添加.</li>\n<li>虽然数组也可以和对象一样通过<code>键/值 对</code> 形式来使用.但JS已经对数组的行为和用途进行了优化.所以还是建议使用默认的<code>下标/值 对</code> 形式来使用.</li>\n</ul>\n<h4 id=\"3-3-4-复制对象\"><a href=\"#3-3-4-复制对象\" class=\"headerlink\" title=\"3.3.4 复制对象\"></a>3.3.4 <strong>复制对象</strong></h4><ul>\n<li>复制分为浅拷贝和深拷贝.浅拷贝会对对象中的基本数据类型进行复制(在内存中开辟新的区域),对于对象则是继续引用.而不是重新创建一个”一样的”对象.深拷贝则是对其中的所有内(容包括对象)进行深层次的复制.</li>\n<li>一般情况下我们可以通过JSON来复制对象.<code>var newObj = JSON.parse( JSON.stringify( someObj ) );</code>.但需要指出的是这种方法<strong>对于包含function函数或者Date类型的对象则不管用!</strong></li>\n<li>ES6 定义了 Object.assign(..) 方法来实现浅复制。具体用法在这就不赘述了.</li>\n</ul>\n<h4 id=\"3-3-5-属性描述符\"><a href=\"#3-3-5-属性描述符\" class=\"headerlink\" title=\"3.3.5 属性描述符\"></a>3.3.5 <strong>属性描述符</strong></h4><p>从 ES5 开始，所有的属性都具备了属性描述符。</p>\n<ul>\n<li><strong>查看属性描述符:</strong> 可以使用Object.getOwnPropertyDescriptor( myObject, “a” );方法查看myObject对象里属性a的属性描述符.</li>\n<li><strong>配置属性描述符:</strong> 可以使用Object.defineProperty(..)方法对属性的属性描述符就像配置.举个例子:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> myObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( myObject, <span class=\"string\">\"a\"</span>, &#123;</span><br><span class=\"line\">         value: <span class=\"number\">2</span>,</span><br><span class=\"line\">         writable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">\t\t  configurable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">\t\t  enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125; );</span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">//该方法可以配置四个属性描述符</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>注意:</strong> 书中关于<code>属性描述符也被称为“数据描述符”</code>其实是不够准确的.<br>对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter和setter函数对描述的属性。<strong>描述符必须是这两种形式之一；不能同时是两者</strong>。(getter和setter是后面马上要讲到的两个描述符)它们的关系如下:(详情可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">MDN的解释</a>)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>configurable</th>\n<th>enumerable</th>\n<th>value</th>\n<th>writable</th>\n<th>get</th>\n<th>set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据描述符</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>存取描述符</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p><strong>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</strong></p>\n<p>value就是该属性对应的值。默认为 undefined。下面分别介绍剩下的三个属性描述符键值:</p>\n<ul>\n<li><strong>1. Writable</strong>   决定是否可以修改属性的值。当被设置为false后,再对属性值进行修改,则会静默失败(silently failed,修改不成功,也不报错)了。如果在严格模式下，则会报出TypeError错误.</li>\n<li><strong>2. Configurable</strong> 决定属性描述符是否可配置.如果为true,就可以使用 defineProperty(..) 方法来修改属性描述符.注意:不管是不是处于严格模式，修改一个不可配置的属性描述符都会出错。并且<strong>把 configurable 修改成 false 是单向操作，无法撤销!</strong> 但是有个例外即便属性是 configurable:false，我们还是可以 把 writable 的状态由 true 改为 false，但是无法由 false 改为 true。除了无法修改，<strong>configurable:false 还会禁止删除这个属性</strong>.</li>\n<li><strong>3. Enumerable</strong>  决定该属性是否会出现在对象的属性枚举中.比如说 for..in 循环。如果把 enumerable 设置成 false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。</li>\n</ul>\n<h4 id=\"3-3-6-不变性\"><a href=\"#3-3-6-不变性\" class=\"headerlink\" title=\"3.3.6 不变性\"></a>3.3.6 <strong>不变性</strong></h4><p>除了上面提到的Object.defineProperty(..),ES5还可以通过很多种方法来实现属性或者对象的不可变.<br><strong>注意:</strong> <strong>这些所有方法都是只能浅不变</strong>,如果目标对象引用了其他对象(数组、对象、函数，等)，其他对象的内容不受影响，仍然是可变的.类似于浅拷贝.</p>\n<p><strong>说明:</strong>  <strong>在 JavaScript 程序中很少需要深不可变性。</strong> 有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</p>\n<p><strong>方法:</strong></p>\n<ul>\n<li><strong>1. 对象常量(不可改)</strong> 结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性(不可修改、重定义或者删除)</li>\n<li><strong>2. 禁止扩展(不可增)</strong> 使用 Object.prevent Extensions(myObject),可以禁止一个对象添加新属性并且保留已有属性.在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。</li>\n<li><strong>3. 密封(不可配置,但可修改)</strong> 使用Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 <strong>configurable:false</strong>。密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性(虽然可以修改属性的值)。</li>\n<li><strong>4. 冻结(不可配置,也不可修改)</strong> Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用 Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值。这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改(不过就像我们之前说过的，这个对象引用的其他对象是不受影响的)。</li>\n</ul>\n<p><strong>注意:</strong> 你可以“深度冻结”一个对象(连引用的对象也冻结)，具体方法为，首先在这个对象上调用 Object.freeze(..)， 然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..)。但是一定要谨慎!因为你引用的对象可能会在其他地发也被引用.</p>\n<p><strong>说明:</strong> 在 JavaScript 程序中很少需要深不可变性。有些特殊情况可能需要这样做， 但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</p>\n<h4 id=\"3-3-7-Get\"><a href=\"#3-3-7-Get\" class=\"headerlink\" title=\"3.3.7 [[Get]]\"></a>3.3.7 <strong>[[Get]]</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123; </span><br><span class=\"line\">   a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>myObject.a是怎么取到值2的?</strong><br>myObject.a 通过对象默认内置的[[Get]] 操作(有点像函数调用:<a href=\"\">[Get]</a>).首先它会在对象中查找是否有名称相同的属性， 如果找到就会返回这个属性的值。如果没有找到名称相同的属性，按照 [[Get]] 算法的定义会执行另外一种非常重要的行为。其实就是遍历可能存在的 [[Prototype]] 链，也就是在原型链上寻找该属性。如果仍然都没有找到名称相同的属性，那 [[Get]] 操作会返回值 undefined.</p>\n<p><strong>注意:</strong> 如果你引用了一个当前词法作用域中不存在的变量，并不会像对象属性一样返回 undefined，而是会抛出一个 ReferenceError 异常.</p>\n<h4 id=\"3-3-8-Put\"><a href=\"#3-3-8-Put\" class=\"headerlink\" title=\"3.3.8 [[Put]]\"></a>3.3.8 <strong>[[Put]]</strong></h4><p>既然有可以获取属性值的 [[Get]] 操作，就一定有对应的 [[Put]] 来设置或者创建属性.        </p>\n<p> [[Put]] 被触发时的操作分为两个情况:1. 对象中已经存在这个属性 2. 对象中不存在这个属性.</p>\n<p>如果对象中已经存在这个属性,[[Put]] 算法大致会检查下面这些内容:</p>\n<ul>\n<li><ol>\n<li>属性是否是访问描述符(参见下一节)?如果是并且存在setter就调用setter。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>属性的数据描述符中writable是否是false?如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>如果都不是，将该值设置为属性的值。</li>\n</ol>\n</li>\n</ul>\n<p>如果对象中不存在这个属性，[[Put]] 操作会更加复杂。会在第 5 章讨论 [[Prototype]] 时详细进行介绍。</p>\n<h4 id=\"3-3-9-Getter和Setter\"><a href=\"#3-3-9-Getter和Setter\" class=\"headerlink\" title=\"3.3.9 Getter和Setter\"></a>3.3.9 <strong>Getter和Setter</strong></h4><p>对象默认的 [[Put]] 和 [[Get]] 操作分别可以控制属性值的设置和获取。<br>目前我们还无法操作[[Get]] 和 [[Put]]来改写整个对象 ,但是在ES5中可以使用 getter 和 setter 改写<strong>部分</strong>默认操作,<strong>只能应用在单个属性上，无法应用在整个对象上</strong>。    </p>\n<p><strong>注意:</strong> 书中后面说的<code>访问描述符</code>就是<code>存取描述符</code>.关于属性描述符,存取描述符及数据描述符可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">MDN的解释</a>)</p>\n<p><strong>getter:</strong><br>getter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Get]]操作.<strong>当你设置getter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.</strong></p>\n<p><strong>语法:</strong> <code>{get prop() { ... } }</code>或<code>{get [expression]() { ... } }</code>.其中<code>prop</code>:要设置的属性名. <code>expression</code>:从 ECMAScript 2015 开始可以使用计算属性名.<br><strong>使用方式:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1111</span>, <span class=\"comment\">//在后面会发现myObject.a为2,这是因为设置了getter所以忽略了value特性.</span></span><br><span class=\"line\">  <span class=\"comment\">//方式一:在新对象初始化时定义一个getter</span></span><br><span class=\"line\">  get a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( </span><br><span class=\"line\">  myObject, <span class=\"comment\">// 目标对象 </span></span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>, <span class=\"comment\">// 属性名</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方式二:使用defineProperty在现有对象上定义 getter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 确保 b 会出现在对象的属性列表中</span></span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a = <span class=\"number\">3</span>;  <span class=\"comment\">//因为设置了getter所以忽略了writable特性.所以这里赋值没成功</span></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.b; <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> myObject.a;<span class=\"comment\">//可以使用delete操作符删除</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>setter:</strong><br>setter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Put]]操作(也就是赋值操作).<strong>当你设置setter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.</strong>        </p>\n<p><strong>语法:</strong> <code>{set prop(val) { . . . }}</code>或<code>{set [expression](val) { . . . }}</code>.其中<code>prop</code>:要设置的属性名. <code>val</code>:用于保存尝试分配给prop的值的变量的一个别名。<code>expression</code>:从 ECMAScript 2015 开始可以使用计算属性名.<br><strong>使用方式:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注意:通常来说 getter 和 setter 是成对出现的(只定义一个的话 通常会产生意料之外的行为):</span></span><br><span class=\"line\">  <span class=\"comment\">//方式一:在新对象初始化时定义一个setter</span></span><br><span class=\"line\">  set a(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._a_ = val * <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  get a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._a_ </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( </span><br><span class=\"line\">  myObject, <span class=\"comment\">// 目标对象 </span></span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>, <span class=\"comment\">// 属性名</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123; <span class=\"keyword\">this</span>._b_ = val * <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 方式二:使用defineProperty在现有对象上定义 setter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._b_ &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 确保 b 会出现在对象的属性列表中</span></span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">myObject.b = <span class=\"number\">3</span>;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject.a); <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject.b);<span class=\"comment\">//9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject._a_);<span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject._b_);<span class=\"comment\">//9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> myObject.a;<span class=\"comment\">//可以使用delete操作符删除</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-10-存在性\"><a href=\"#3-3-10-存在性\" class=\"headerlink\" title=\"3.3.10 存在性\"></a>3.3.10 <strong>存在性</strong></h4><p><strong>属性存在性:</strong><br>如何判断一个对象是否存在某个属性(准确来说是<strong>检查这个属性名是否存在</strong>),这时就需要用到:</p>\n<ul>\n<li><ol>\n<li><code>in</code>操作符<br>in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中(参见第 5 章)。</li>\n</ol>\n<ul>\n<li><ol start=\"2\">\n<li>hasOwnProperty(..)<br>hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意:</strong></p>\n<ul>\n<li>1.如果有的对象可能没有连接到 Object.prototype( 通过Object. create(null) 来创建——参见第 5 章)。在这种情况下，形如myObejct.hasOwnProperty(..) 就会失败。这时可以使用一种更加强硬的方法来进行判断:Object.prototype.hasOwnProperty. call(myObject,”a”)，它借用基础的 hasOwnProperty(..) 方法并把它显式绑定(参见第2章)到 myObject 上。</li>\n<li>2.对于数组来说,不要使用in操作符,因为它检查的是属性名,在数组中属性名就是索引,它并不是我们所关注的重点.对于数组我们更关注的是它所存的值,所以对于数组检查某个值是否存在还是采用indexOf方法.</li>\n</ul>\n<p><strong>属性可枚举性:</strong><br>如果一个属性存在,且它的enumerable 属性描述符为true时.则它是可枚举的.并且可以被for..in 循环.<br>一个属性不仅仅需要存在,还需要它的enumerable 为true才是可枚举的,才能被for…in遍历到.<br><strong>注意:</strong> for…in不适合对数组进行遍历,对数组的遍历还是使用传统的for循环.     </p>\n<p>对属性的可枚举性判断,则需要用到以下几种方法:</p>\n<ul>\n<li><ol>\n<li>propertyIsEnumerable(..) 会检查给定的属性名是否直接存在于对象中(而不是在原型链上)并且满足 enumerable:true。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Object.keys(..) 会返回一个数组，包含所有可枚举属性.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-4-遍历\"><a href=\"#3-4-遍历\" class=\"headerlink\" title=\"3.4 遍历\"></a>3.4 遍历</h3><p>关于这节我觉得还是以理清for..in和for..of为主.后面延伸的@@iterator及Symbol.iterator的使用,没必要过于深究.注意书中123页第二行<code>done 是一个布尔值，表示是否还有可以遍历的值。</code>有个错误,应该改成<code>done 是一个布尔值，表示遍历是否结束。</code>否则你在看后面它的说明时会感觉到自相矛盾.这里我也是以for..in和for..of为主进行说明,也更贴近我们实际使用.</p>\n<p><strong>for..in</strong></p>\n<ul>\n<li>for..in 循环可以用来遍历对象的可枚举属性列表(<strong>包括 [[Prototype]] 链</strong>)。</li>\n<li>实际上for..in遍历的并不是属性值,而是属性名(即键名 key).所以你想获取属性值还是需要手动使用obj[key]来获取.</li>\n<li>一般在遍历对象时,推荐使用for..in.当然数组也是可以使用for..in的.在遍历数组时,推荐还是使用for..of.</li>\n</ul>\n<p><strong>for..of</strong></p>\n<ul>\n<li>ES6 增加了一种用来遍历<strong>数组</strong>的 for..of 循环语法(如果对象本身定义了迭代器的话也可以遍历对象)</li>\n<li>for..of与for..in最大的不同点是,<strong>它循环的是属性值,而不是属性名.不过它只循环数组里存放的值,不会涉及到对象里的key.</strong>(关于这个我后面的例子里会说具体对比明的)</li>\n<li>for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next() 方法来遍历所有返回值。数组有内置的 @@iterator，(对象没有,所以不能使用for..of,除非我们自己定义一个)因此 for..of 可以直接应用在数组上。</li>\n</ul>\n<p><strong>例子比较</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'shotCat'</span>,<span class=\"number\">111</span>,&#123;<span class=\"attr\">a</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\">arr.say=<span class=\"string\">\"IG niu pi!\"</span></span><br><span class=\"line\"><span class=\"comment\">//使用for..in循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[index]);<span class=\"comment\">//shotCat  111  &#123;a:'1',b:'2'&#125;  IG niu pi!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用for..of循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);<span class=\"comment\">//shotCat  111  &#123;a:'1',b:'2'&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注意 for..of并没有遍历得到` IG niu pi!`.原因我前面说过`它只循环数组里存放的值,不会涉及到对象里的key.`更不用说 [[Prototype]] 链.(for..in则会)</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>如何让对象也能使用for..of ?</strong><br>你可以选择使用书中的自己通过Object.defineProperty()定义一个Symbol.iterator属性来实现.这里我就不赘述了.也是最接近原生使用感受的.不过我这里要介绍一个稍微简单点的方法来实现.就是使用上节讲到的Object.keys()搭配使用.举个例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shotCat=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'shotCat'</span>,</span><br><span class=\"line\">    age:<span class=\"string\">'forever18'</span>,</span><br><span class=\"line\">    info:&#123;</span><br><span class=\"line\">\tsex:<span class=\"string\">'true man'</span>,</span><br><span class=\"line\">    city:<span class=\"string\">'wuhan'</span>,</span><br><span class=\"line\">    girlFriend:<span class=\"string\">'新垣结衣!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(shotCat))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用Object.keys()方法获取对象key的数组</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key+<span class=\"string\">\": \"</span>+shotCat[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-小结-1\"><a href=\"#3-5-小结-1\" class=\"headerlink\" title=\"3.5 小结\"></a>3.5 小结</h3><p>书中小结总结得挺全的,这里我就搬运下</p>\n<ul>\n<li>JavaScript 中的对象有<strong>字面形式</strong>(比如 var a = { .. })和<strong>构造形式</strong>(比如 var a = new Array(..))。字面形式更常用，不过有时候构造形式可以提供更多选项。</li>\n<li>对象是 6 个(或者是 7 个，取决于你的观点)基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。</li>\n<li>对象就是键 / 值对的集合。可以通过 .propName 或者 [“propName”] 语法来获取属性值。访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作(在设置属性值时是 [[Put]])， [[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话它还会查找 [[Prototype]] 链(参见第 5 章)。</li>\n<li>属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用 Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象(及其属性)的不可变性级别。</li>\n<li>属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。</li>\n<li>可以使用 ES6 的 for..of 语法来遍历数据结构(数组、对象，等等)中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。</li>\n</ul>\n<h2 id=\"第四章-混合对象”类”\"><a href=\"#第四章-混合对象”类”\" class=\"headerlink\" title=\"第四章 混合对象”类”\"></a>第四章 混合对象”类”</h2><p><strong>注意:</strong> 正如书中提示的那样,整章一半以上几乎都是讲面向对象和类的概念.会读得人云里雾里,给人<code>哦,也许大概就是这样子</code>的感觉.后面我还是会对那些抽象的概念找到在JavaScript里对应的”立足点”,不至于对这些概念太”飘”.</p>\n<h3 id=\"4-1-类理论\"><a href=\"#4-1-类理论\" class=\"headerlink\" title=\"4.1 类理论\"></a>4.1 类理论</h3><p>说明:</p>\n<ul>\n<li>类其是描述了一种代码的组织结构形式.</li>\n<li>在js中类常见的就是构造函数,也可以是通过ES6提供的class关键字;继承就是函数;实例化就是对象,常见的就是通过new构造函数实现的.</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b48db6fb628b?w=1178&amp;h=695&amp;f=png&amp;s=60553\" alt=\"类、继承和实例化\"></p>\n<p><strong>注意:</strong> Javascript语言不支持“类”，所谓的”类”也是模拟出的“类”。即使是ES6引入的”类”实质上也是 JavaScript 现有的基于原型的继承的语法糖。</p>\n<h4 id=\"4-1-1-“类”设计模式\"><a href=\"#4-1-1-“类”设计模式\" class=\"headerlink\" title=\"4.1.1 “类”设计模式\"></a>4.1.1 <strong>“类”设计模式</strong></h4><p><strong>一句话</strong>:类其实也是一种设计模式!</p>\n<ul>\n<li>类并不是必须的编程基础,而是一种可选的代码抽象.</li>\n<li>有些语言(比如 Java)并不会给你选择的机会，类并不是可选的——万物皆是类。</li>\n<li>其他语言(比如 C/C++ 或者 PHP)会提供过程化和面向类这两种语法，开发者可以选择其中一种风格或者混用两种风格。</li>\n</ul>\n<h4 id=\"4-1-2-JavaScript中的“类”\"><a href=\"#4-1-2-JavaScript中的“类”\" class=\"headerlink\" title=\"4.1.2 JavaScript中的“类”\"></a>4.1.2 <strong>JavaScript中的“类”</strong></h4><p>JavaScript 只有一些近似类的语法元素 (比如 new 和 instanceof)，不过在后来的 ES6 中新增了一些元素，比如 class 关键字,其实质上也是 JavaScript 现有的基于原型的继承的语法糖。也不是真正的类.</p>\n<h3 id=\"4-2-类的机制\"><a href=\"#4-2-类的机制\" class=\"headerlink\" title=\"4.2 类的机制\"></a>4.2 <strong>类的机制</strong></h3><p>这部分书中的描述,我理解起来也比较费劲,主要是它提到的栈,堆与我理解中内存里的栈,堆相冲突了.这里简单说下我的理解,如有误,感激指正.</p>\n<p>stack类其实是一种数据结构.它可以储存数据,并提供一些公用的方法(这和上面提到的类很相似).但是stack类其实只是一个抽象的表示,你想对它进行操作,就需要先对它进行实例化.</p>\n<h4 id=\"4-2-1-建造\"><a href=\"#4-2-1-建造\" class=\"headerlink\" title=\"4.2.1 建造\"></a>4.2.1 <strong>建造</strong></h4><p>这节主要就是说明”类”和”实例”的关系.<br>在JavaScript里”类”主要是构造函数,”实例”就是对象.    </p>\n<p>一个类就像一张蓝图。为了获得真正可以交互的对象，我们必须按照类来实例化一个东西，这个东西(对象)通常被称为实例，有需要的话，我们可以直接在实例上调用方法并访问其所有公有数据属性。</p>\n<p>总而言之:类通过实例化得到实例对象.</p>\n<h4 id=\"4-2-2-构造函数\"><a href=\"#4-2-2-构造函数\" class=\"headerlink\" title=\"4.2.2 构造函数\"></a>4.2.2 <strong>构造函数</strong></h4><ul>\n<li>类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。</li>\n<li>实例就是由构造函数实例化的: new 构造函数.</li>\n<li>构造函数大多需要用 new 来调，这样语言引擎才知道你想要构造一个新的类实例。</li>\n<li>构造函数会返回一个对象,这个对象就是实例.这个对象可以调用类的方法.</li>\n</ul>\n<h3 id=\"4-3-类的继承\"><a href=\"#4-3-类的继承\" class=\"headerlink\" title=\"4.3 类的继承\"></a>4.3 类的继承</h3><p>在面向类的语言中，你可以先定义一个类，然后定义一个继承前者的类。后者通常被称为“子类”，前者通常被称为“父类”。子类可以继承父类的行为,并且可以根据自己的需求,修改继承的行为(一般并不会修改父类的行为).注意:我们讨论的父类和子类并不是实例,在JavaScript里类一般都是构造函数。</p>\n<h4 id=\"4-3-1-多态\"><a href=\"#4-3-1-多态\" class=\"headerlink\" title=\"4.3.1 多态\"></a>4.3.1 <strong>多态</strong></h4><p>大概你看了它的”解释”,对多态还是懵懵懂懂.这里我再解释下:<br><strong>什么是多态?</strong><br>同一个操作，作用于不同的对象，会产生不同的结果。发出一个相同的指令后，不同的对象会对这个指令有不同的反应，故称为多态。<br><strong>说明:</strong> 书中例子中的inherited其实就是相当于super.并且注意书中的这些例子都是<strong>伪代码!</strong> 并不是真的在JavaScript里就是这样实现的.补充:这里是关于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super\" target=\"_blank\" rel=\"noopener\">super的mdn链接.</a></p>\n<ul>\n<li><strong>多态:</strong><ul>\n<li><strong>相对性:</strong> 其实相对性就是子类相对于父类的引用(例如使用super实现引用),并且子类对父类的引用并不会对父类的行为造成任何影响(并不会对父类<strong>自身</strong>的行为进行重新定义),例如书中例子子类对drive()的引用.</li>\n<li><strong>可重复定义:</strong> 子类继承父类的某个方法,并可以对这个方法进行再次定义,例如书中子类对drive()中的output进行修改.<code>当调用方法时会自动选择合适的定义</code>,这句话怎么理解,当子类实例化后,执行drive()方法时,它并不会直接去执行父类的drive().而是子类上的drive().简单来说就是实例来源于那个类,它就使用那个类的方法.</li>\n</ul>\n</li>\n</ul>\n<p><strong>说明:</strong> </p>\n<ul>\n<li>在 JavaScript 中“类”是属于构造函数的(类似 Foo.prototype… 这样的类型引用)。由于 JavaScript中<strong>父类和子类的关系只存在于两者构造函数对应的 .prototype 对象中</strong>，因此它们的构造函数之间并不存在直接联系，从而无法简单地实现两者的相对引用(在 ES6 的类中可以通过 super来“解决”这个问题，参见附录 A)。</li>\n<li><strong>多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是复制。</strong></li>\n<li>其实这里讨论的这些概念其实在我们实际工作中,已经使用了无数次,只是现在你需要理解”原来你是叫这个名字啊!”</li>\n</ul>\n<h4 id=\"4-3-2-多重继承\"><a href=\"#4-3-2-多重继承\" class=\"headerlink\" title=\"4.3.2 多重继承\"></a>4.3.2 <strong>多重继承</strong></h4><p><strong>多重继承:</strong> 一个子类可以继承来自多个父类的方法.<br><strong>多重继承引发的问题:</strong> 多重继承可能会出现,多个父类中方法名冲突的问题,这样<code>子类</code>到底引用哪个方法?<br><strong>多重继承与JavaScript:</strong> JavaScript本身并没有提供多重继承功能.但它可以通过其他方法来达到多重继承的效果.</p>\n<h3 id=\"4-4-混入\"><a href=\"#4-4-混入\" class=\"headerlink\" title=\"4.4 混入\"></a>4.4 <strong>混入</strong></h3><p>JavaScript 中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来(参见第 5 章)(其实就是引用,所以它的多态是”相对”的)。<br>由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入(<strong>就是通过混入来模拟实现类的多重继承</strong>)。</p>\n<h4 id=\"4-4-1-显式混入\"><a href=\"#4-4-1-显式混入\" class=\"headerlink\" title=\"4.4.1 显式混入\"></a>4.4.1 <strong>显式混入</strong></h4><p><strong>郑重提醒:</strong>     书中这里的类都是对象形式的.例子里的sourceObj, targetObj,这就可能造成一个”误导”,在JavaScript里是<strong>没有真正的类</strong>,所谓的类也不过是我们模拟出来的”类”,不过是一种语法糖(包括ES6里的class).在JavaScript里”所谓的类”经常是一个构造函数,你并不能这样进行遍历,只能对它的实例对象进行这种操作.不要被书中例子带进去了,不要混淆,毕竟我们最终使用的是JavaScript(而不是其他面向对象的语言.),它里面的类常常并不是一个对象!</p>\n<p><strong>显式混入:</strong>  书中没有给出明确的显式混入的定义,但是读完整章.基本就知道什么是显式混入了.显式混入就是通过类似mixin()方法,显式地将父对象属性逐一复制,或者有选择地复制(即例子中的存在性检查)到子对象上.          </p>\n<p><strong>显式混入常用方法:</strong> 就是书中的例子, 首先有子对象,并对其进行特殊化(定义自己的属性或方法).然后再通过mixin()方法将父对象有选择地复制(即存在性检查,过滤子对象已有的属性,避免冲突)到子对象上.</p>\n<p><strong>显式混入注意点:</strong><br>显式混入时,切记一点你要<strong>避免父对象的属性与子对象特殊化的属性冲突</strong>.这就是为什么例子中要进行存在性检查,以及后面要说的混合复制,可能存在的重写风险.</p>\n<p><strong>1. 再说多态</strong>(其实说的就是js里的多态)<br><strong>显式多态:</strong> 将父对象里的方法通过显式绑定到子对象上.就是显式多态.例如书中的例子:Vehicle.drive.call( this )。<strong>显式多态也是为了JS来模拟实现多重继承的!</strong><br><strong>说明:</strong> 在ES6之前是没有相对多态的机制。所以就使用call这种进行显式绑定实现显式动态.注意JavaScript里实现多态的方法也被称为”伪多态”.所以不要对后面突然冒出的伪多态概念而一脸懵逼(其实整本书经常做这样的事)     </p>\n<p><strong>显式多态(伪多态)的缺陷:</strong> 因为在JavaScript 中存在屏蔽(实际是函数引用的上下文不同),所以在引用的时候就需要使用显式伪多态的方法创建一个函数关联.   这些都会增加代码的复杂度和维护难度(过多的this绑定,真的会让代码很难读)。</p>\n<p><strong>2. 混合复制</strong>(显式混入另一种不常用方法)<br>前面的显式混入的方法是先有子对象并进行特殊化,然后再有选择地复制父对象属性.这个不常用的方法则是反过来的,结合书中例子,它先用一个空对象<strong>完全复制</strong>父对象的属性,然后该对象复制特殊化对象的属性,最后得到子对象.这种方法明显是比第一种麻烦的,并且在复制特殊化对象时,可能会对之前重名的属性(即复制得到的父对象属性)进行重写覆盖.所以这种方法是存在风险,且效率低下的.</p>\n<p><strong>显式混入的缺陷:</strong></p>\n<ul>\n<li><ol>\n<li><strong>无法做到真正的复制:</strong> 如果复制的对象中存在对函数的引用,那么子对象得到的是和父对象一样的,对同一个函数的引用.如果某个子对象对函数进行了修改,那么父对象及其他子对象都会受到影响.很明显这是不安全的.原因是JavaScript 中的函数无法进行真正地复制，你只能复制对共享函数对象的引用.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>函数名和属性名同名:</strong> 如果混入多个对象,则可能会出现这种情况.目前现在仍没有比较好的方式来处理函数和属性的同名问题(提问:这种情况下谁的优先级更高?滑稽脸)。</li>\n</ol>\n</li>\n</ul>\n<p><strong>3. 寄生继承</strong><br>显式混入模式的一种变体被称为“寄生继承”，它既是显式的又是隐式的.<br>首先会复制一份父类(对象)的定义，然后混入子类(对象)的定义(如果需要的话保留到父类的特殊引用)，然后用这个复合对象构建实例。<br><strong>说明:</strong> 寄生继承与混合复制是很相似的,最大的区别是寄生继承是通过实例化构造函数(JS中的”类”)来实现复制的.</p>\n<h4 id=\"4-4-2-隐式混入\"><a href=\"#4-4-2-隐式混入\" class=\"headerlink\" title=\"4.4.2 隐式混入\"></a>4.4.2 <strong>隐式混入</strong></h4><p><strong>隐式混入:</strong> 它与显示混入最大的区别,就是它没有明显的对父类(对象)属性进行复制的过程.它是通过在构造函数调用或者方法调用中使用显式绑定例如: Something.cool.call( this)来实现混入(多重继承).其本质就是通过改变this指向来实现混入.</p>\n<h3 id=\"4-5-小结\"><a href=\"#4-5-小结\" class=\"headerlink\" title=\"4.5 小结\"></a>4.5 <strong>小结</strong></h3><p>整章的重点其实就是让你理解什么叫类.除了最后一小节的混入和JavaScript有那么一点点关系.其余的小结和JavaScript都没什么关系.重要的是理解类这种思想和设计模式.<br><strong>重点:</strong></p>\n<ul>\n<li>1.<strong>类意味着复制!</strong></li>\n<li><ol start=\"2\">\n<li>传统的类被实例化时，它的行为会被复制到实例中。类被继承时，行为也会被复制到子类中。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>多态(在继承链的不同层次名称相同但是功能不同的函数)看起来似乎是从子类引用父类，但是本质上引用的其实是复制的结果。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>JavaScript 并不会(像类那样)自动创建对象的副本。(你只能自己手动复制,而且复制的还不彻底!)</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><strong>混入模式(无论显式还是隐式)可以用来模拟类的复制行为</strong>，但是通常会产生丑陋并且脆弱的语法，比如显式伪多态(OtherObj.methodName.call(this, …))，这会让代码更加难 懂并且难以维护。</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>显式混入实际上无法完全模拟类的复制行为，因为对象(和函数!别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。忽视这一点会导致许多问题。</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>在 JavaScript 中模拟类是得不偿失的，虽然能解决当前的问题，但是可能会埋下更多的隐患。(但实际,我们用得却很多)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"第五章-原型\"><a href=\"#第五章-原型\" class=\"headerlink\" title=\"第五章 原型\"></a>第五章 原型</h2><p>注意:本章的前提是你已经比较熟悉原型及原型链.不太熟或者不知道的可以,通过<a href=\"https://juejin.im/post/5835853f570c35005e413b19\" target=\"_blank\" rel=\"noopener\">这篇文章</a>熟悉下.  </p>\n<h3 id=\"5-1-Prototype\"><a href=\"#5-1-Prototype\" class=\"headerlink\" title=\"5.1 [[Prototype]]\"></a>5.1 <code>[[Prototype]]</code></h3><p>JavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引用(一般就是其构造函数prototype属性的引用)。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。<br><strong>吐槽:</strong> 书中有这样一句话 “注意:很快我们就可以看到，对象的 [[Prototype]] 链接可以为空，虽然很少见。”我前前后后看了三遍都没找到它所说的<code>对象的 [[Prototype]] 链接可以为空.</code>的情况!应该是作者写忘记了.ok,这里我来说下<code>对象的 [[Prototype]] 链接可以为空</code>的情况.就是通过Object.create(null)得到的对象.它的 [[Prototype]] 是为空的.应该说它的所有都是空的.为什么?因为null是原型链的顶端.它是没有[[Prototype]]的.对应的可以对比下<code>console.log(Object.create({}))</code>和<code>console.log(Object.create(null))</code></p>\n<p><strong>[[Prototype]]有什么用?</strong><br>我原以为作者会说可以作为存放实例对象的公共属性,然后像类一样讲得更深刻点.不过这次只是说了它表明的作用.     </p>\n<p><strong>作用:</strong> 就是存放哪些不在对象自身的属性. 当我们访问一个对象的属性时,此时对象的内部默认操作[[Get]],首先会检查对象本身是否有这个属性，如果有的话就使用它。如果没有的话,[[Get]] 就会继续访问对象的 [[Prototype]] 链.([[Prototype]]其实就是其构造函数的prototype属性.也是一个对象.)如果找到,就返回该属性值.如果没有就继续寻找下一个[[Prototype]]链.直到找完整条[[Prototype]]链.还是没有的话,[[Get]] 就会返回undefined.</p>\n<p><strong>补充:</strong></p>\n<ul>\n<li><strong>使用 for..in 遍历对象时</strong> 任何可以通过原型链访问到 (并且是 enumerable:true)的属性都会被枚举。(其实这个在第三章里我说过)</li>\n<li><strong>使用 in 操作符</strong> 同样会查找对象的整条原型链(<strong>无论属性是否可枚举</strong>)</li>\n</ul>\n<h4 id=\"5-1-1-Object-prototype\"><a href=\"#5-1-1-Object-prototype\" class=\"headerlink\" title=\"5.1.1 Object.prototype\"></a>5.1.1 <strong>Object.prototype</strong></h4><p>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。(Object.prototype的[[Prototype]] 最终会指向null.null就是最后的终点).<br>这个 Object.prototype 对象，包含了 JavaScript 中许多通用的功能,例如:toString() , valueOf(), hasOwnProperty(..)和 isPrototypeOf(..)。</p>\n<h4 id=\"5-1-2-属性设置和屏蔽\"><a href=\"#5-1-2-属性设置和屏蔽\" class=\"headerlink\" title=\"5.1.2 属性设置和屏蔽\"></a>5.1.2 <strong>属性设置和屏蔽</strong></h4><p><strong>说明:</strong> 看完本节时,切记不要对<code>myObject.foo = &quot;bar&quot;</code>这种简单的对象属性赋值产生顾虑和疑惑.这种赋值绝对不会对原型链产生任何影响!基本也不会出现赋值不成功的情况.<strong>如果有人敢在团队项目里修改对象的属性描述符,早就被拖出去打死了!!!</strong> 这部分可以看做补充知识,知道有这些奇葩设定就行.其实<strong>这节更应该关注的是<code>myObject.foo</code>的返回值.</strong><br><strong>注意:</strong> 书中提到的动词<code>屏蔽</code>其实指的就是在对象上创建同名属性(原型链上已有该属性).注意不要被绕晕了.还有++就相当于myObject.a=myObject.a+1,注意分解就行,不存在什么特别需要当心的.</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b5220c3a82ce?w=1375&amp;h=962&amp;f=png&amp;s=207062\" alt=\"\"></p>\n<h3 id=\"5-2-“类”\"><a href=\"#5-2-“类”\" class=\"headerlink\" title=\"5.2 “类”\"></a>5.2 “类”</h3><ul>\n<li>JavaScript里只有对象,没有类!</li>\n<li>JavaScript不需要通过类来抽象对象.而是自己直接创建对象,并定义对象的行为.</li>\n</ul>\n<h4 id=\"5-2-1-“类”函数\"><a href=\"#5-2-1-“类”函数\" class=\"headerlink\" title=\"5.2.1 “类”函数\"></a>5.2.1 <strong>“类”函数</strong></h4><p>吐槽:模仿类竟然被说成奇怪的无耻滥用!?不这样做,js那些高级用法怎么实现?怎么会有现在前端的百花齐放(轮子满地跑)?这也是冒得办法的办法啊!毕竟当时js只是小众,不指望它有多大能耐.毕竟只是一个人用7天”借鉴”出来的东西.</p>\n<p><strong>“类”函数:</strong> JavaScript用来模仿类的函数就被称为类函数,其实就是我们常说的构造函数.        </p>\n<p><strong>“类”函数模拟类的关键:</strong> 所有的函数默认都会拥有一个名为 prototype 的公有并且不可枚举(参见第 3 章)的属性，它会指向另一个对象.当我们通过new 函数(构造函数)来得到实例对象时,此时new会给实例对象一个内部的 [[Prototype]]属性，实例对象内部的[[Prototype]]属性与构造函数的prototype属性都指向同一个对象.那JS的这个特性怎么模拟类呢?首先<strong>类的本质就是复制!</strong>.明白这点后,我们就需要实现伪复制.我们可以将类里的属性,放在函数的prototype属性里.这样该函数的实例对象就可以通过<a href=\"原型链\">[Prototype]</a>访问这些属性.我们也经常把这种行为称为原型继承(作者后面会疯狂吐槽这个称呼,我后面再解释为什么吐槽).这样就实现了伪”复制”. 可以达到和类相似的效果.</p>\n<p><strong>注意:</strong> 虽然说所有的函数默认都会拥有一个名为 prototype属性.但也有特殊的时候.就不是默认的情况.就是通过bind()硬绑定时.所返回的<strong>绑定函数,它是没有prototype属性的!</strong></p>\n<p><strong>图解真正的类与JS的模拟类:</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b57bbca1ee25?w=523&amp;h=523&amp;f=png&amp;s=68402\" alt=\"\"></p>\n<p><strong>关于原型继承这个名字的疯狂吐槽:</strong>      作者的吐槽主要集中在”继承”两个字,原因是在面向类的语言中,”继承”意味着复制,但在JavaScript里原型继承却根本不是这个意思,它并没有复制,而是用原型链来实现.所以疯狂吐槽其误导.</p>\n<p><strong>什么是差异继承?</strong> 我根本没听过这个术语,初次看作者所谓的解释,这是啥?他想说啥?后来读了好多遍,终于大概理解了.如果你也看不懂作者想在表达什么,就pass这部分.没必要理解.反而会把你看得更迷惑.<br>好了,我来解释下什么叫差异继承.差异继承就是原型继承的一个不常用的别名.我们知道对象可以通过原型链继承一部分属性,但我们仍可以给对象设置其他有差异不同的属性.这也就可以称为差异继承.</p>\n<h4 id=\"5-2-2-“构造函数”\"><a href=\"#5-2-2-“构造函数”\" class=\"headerlink\" title=\"5.2.2 “构造函数”\"></a>5.2.2 <strong>“构造函数”</strong></h4><p>构造函数之所以是构造函数,是因为它<strong>被new调用</strong>,如果没被new调用,它就是一个普通函数.实际上,new会劫持所有普通函数并用构造对象的形式来调用它,并且无论如何都会构造返回一个对象.</p>\n<h4 id=\"5-2-3-技术\"><a href=\"#5-2-3-技术\" class=\"headerlink\" title=\"5.2.3 技术\"></a>5.2.3 <strong>技术</strong></h4><p>关于两种“面向类”的技巧,我这就不说明了,理解了这部分第一第二章关于this的使用,就很简单了.</p>\n<p><strong>prototype.constructor:</strong><br>为了正确理解constructor.我特意在标题上加上prototype.是想强调:一个对象访问constructor时,会默认访问其原型对象上的constructor属性.</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b5a12dfc7024?w=573&amp;h=463&amp;f=png&amp;s=87705\" alt=\"\"></p>\n<p><strong>注意:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* .. */</span> &#125;</span><br><span class=\"line\">Foo.prototype = &#123; <span class=\"comment\">/* .. */</span> &#125;; <span class=\"comment\">// 有时候我们会需要创建一个新原型对象,因此也不会有默认的constructor属性指向构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性</span></span><br><span class=\"line\"><span class=\"comment\">// 关于 defineProperty(..)，参见第 3 章 </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( Foo.prototype, <span class=\"string\">\"constructor\"</span> , &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,<span class=\"comment\">//不可枚举</span></span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: Foo <span class=\"comment\">// 让 .constructor 指向 Foo</span></span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"><span class=\"comment\">//上面这种方法是比较严谨,也比较麻烦的.并且使用Object.defineProperty()风险是很大的.</span></span><br><span class=\"line\"><span class=\"comment\">//所以我们实际是这样修改的</span></span><br><span class=\"line\">Foo.prototype.constructor=Foo; <span class=\"comment\">//直接将其赋值Foo 唯一要注意的是此时constructor是可枚举的.会被实例对象的for..in..遍历到.</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-3-原型-继承\"><a href=\"#5-3-原型-继承\" class=\"headerlink\" title=\"5.3 (原型)继承\"></a>5.3 (原型)继承</h3><p><strong>原型对象到原型对象的继承:</strong><br>例如:Bar.prototype 到 Foo.prototype 的委托关系，<br>正确的JavaScript中“原型风格”:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.myName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bar</span>(<span class=\"params\">name,label</span>) </span>&#123; </span><br><span class=\"line\">  Foo.call( <span class=\"keyword\">this</span>, name ); </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.label = label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们创建了一个新的 Bar.prototype 对象,并且它的[[Prototype]] 关联Foo.prototype </span></span><br><span class=\"line\">Bar.prototype = <span class=\"built_in\">Object</span>.create( Foo.prototype );</span><br><span class=\"line\"><span class=\"comment\">// 注意!Object.create()是返回一个新的对象,所以现在没有 Bar.prototype.constructor 了 </span></span><br><span class=\"line\"><span class=\"comment\">// 如果你需要这个属性的话可能需要手动修复一下它</span></span><br><span class=\"line\">Bar.prototype.myLabel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.label;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Bar( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"obj a\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">a.myName(); <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">a.myLabel(); <span class=\"comment\">// \"obj a\"</span></span><br></pre></td></tr></table></figure></p>\n<p>错误用法:</p>\n<ul>\n<li>1, <code>Bar.prototype = Foo.prototype;</code> 此时并不会创建一个关联到 Bar.prototype 的新对象，它只是让 Bar.prototype 直接引用 Foo.prototype 对象。 因此当你执行类似 Bar.prototype. myLabel = … 的赋值语句时会直接修改 Foo.prototype 对象本身。</li>\n<li>2, <code>Bar.prototype = new Foo();</code> 它使用 了 Foo(..) 的“构造函数调用”，如果函数 Foo 有一些其他操作的话,尤其是与this有关的的话，就会影响到 Bar() 的“后代”，后果不堪设想。</li>\n</ul>\n<p><strong>结论:</strong> 要创建一个合适的关联对象，我们<strong>需使用 Object.create(..)</strong> 而不是使用具有副作用的 Foo(..)。这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉(主要是需要手动设置constructor)，不能直接修改已有的默认对象。</p>\n<p><strong>检查”类”关系</strong>        </p>\n<ul>\n<li><strong>instanceof 操作符</strong>: 验证左边的普通对象的整条[[prototype]]链是否有指向右边函数的prototype,例如:<code>a instanceof Foo</code>。</li>\n<li><strong>isPrototypeOf(..)  方法</strong>: 验证在对象 a 的整条 [[Prototype]] 链中是否出现过 原型对象b.例如:<code>b.isPrototypeOf( a );</code></li>\n</ul>\n<p><strong>注意:</strong> 如果使用内置的 .bind(..) 函数来生成一个<strong>硬绑定函数</strong>(参见第 2 章)的话， 该函数<strong>是没有 .prototype 属性的</strong>。如果硬绑定函数instanceof 的话,则其bind的 目标函数的prototype会成为硬绑定函数的prototype.</p>\n<p><strong>关于<strong>proto</strong></strong>:<br>我们知道函数可以直接通过prototype属性直接访问原型对象.那对象怎么访问呢?我们知道是通过[[prototype]]链.怎么访问呢?<br>在ES5之中的标准方法:通过Object.getPrototypeOf(  )方法来获取对象原型.<code>Object.getPrototypeOf( a ) === Foo.prototype; // true</code>,<br>另一种方法:在 ES6 之前并不是标准,但却被绝大多数浏览器支持的一种方法,可以访问内部[[prototype]]对象.那就是<code>__proto__</code>.例如:<code>a.__proto__ === Foo.prototype; // true</code>.你甚至可以通过<code>.__proto__.__ptoto__...</code>来访问整个原型链.  <code>.__proto__</code>实际上并不存在于你正在使用的对象中.并且它看起来很像一个属性，但是实际上它更像一个 getter/setter(见第三章).</p>\n<h3 id=\"5-4-对象关联\"><a href=\"#5-4-对象关联\" class=\"headerlink\" title=\"5.4 对象关联\"></a>5.4 对象关联</h3><p>[[Prototype]] 机制就是存在于对象中的一个内部链接，<strong>它会引用其他对象。</strong></p>\n<p>这个链接的作用是:如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找。同理，如果在后者中也没有找到需要的 引用就会继续查找它的 [[Prototype]]，以此类推。这一系列对象的链接被称为<strong>原型链</strong>。</p>\n<h4 id=\"5-4-1-创建关联\"><a href=\"#5-4-1-创建关联\" class=\"headerlink\" title=\"5.4.1 创建关联\"></a>5.4.1 <strong>创建关联</strong></h4><p><strong>问:</strong>“我们已经明白了为什么 JavaScript 的 [[Prototype]] 机制和类不一样，也明白了它如何建立对象间的关联。”<br><strong>答:</strong> 类的机制是复制,JavaScript里原型链的机制是引用.    </p>\n<p><strong>问:</strong>“那 [[Prototype]] 机制的意义是什么呢?为什么 JavaScript 开发者费这么大的力气(模拟类)在代码中创建这些关联呢?”<br><strong>答:</strong> 意义就是模拟类,JavaScript不需要复制(我觉得这不是个优点)而通过原型链实现”实例”对”类”的”继承(其实就是引用)”.这样就达到了实例对象对某些属性(即原型对象里的属性)的复用.</p>\n<p><strong><code>Object.create(..)</code></strong><br>这个方法其实我们在前面已经使用过很多次.”Object.create(..) 会创建一个新对象(bar)并把它关联到我们指定的对象(foo)，这样我们就可以充分发挥 [[Prototype]] 机制的威力(委托)并且避免不必要的麻烦(比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。”实际上这个方法就是创建返回一个新对象,这个新对象的原型([[Prototype]])会绑定为我们输入的参数对象foo.并且由于不是通过构造函数的形式,所以不需要为函数单独设置prototype.虽然Object.create(..)很好,但实际我们使用的更多的还是构造函数形式.<br><strong>注意:</strong>  Object.create(..) 的第二个参数指定了需要添加到新对象中的属性名以及这些属性的属性描述符(参见第 3 章)。</p>\n<p><strong><code>Object.create(null)</code></strong><br>这个方法其实我们在前面也讲解过几次.”Object.create(null) 会创建一个拥有空(或者说null)[[Prototype]] 链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符(之前解释过)无法进行判断，因此总是会返回 false。 <strong>这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。</strong>“</p>\n<p>“Object.create()的polyfill代码.”这部分我就不做解读了,因为现在都8102年,es6早就普及了,你几乎不可能再用到es5之前的语法了.所以这部分大家了解下即可.</p>\n<h4 id=\"5-4-2-关联关系是备用\"><a href=\"#5-4-2-关联关系是备用\" class=\"headerlink\" title=\"5.4.2 关联关系是备用\"></a>5.4.2 <strong>关联关系是备用</strong></h4><p><strong>[[Prototype]] 的本质作用:</strong>      书中提到了一个观点”处理“缺失”属性或者方法时的一种备用选项。”(即备用设计模式).但随后进行了否定”但是这在 JavaScript 中并不是很常见。所以如果你使用的是这种模式，那或许应当退后一步并重新思考一下这种模式是否合适。” 作者给出的观点是:”进行委托设计模式,即例子中的内部委托(就是在对象里套了个壳再引用了一遍,为的是将委托进行隐藏).这样可以使我们的API设计得更加清晰.”文中的清晰是指,当我们需要引用原型对象的属性方法时,我们在对象内部设置对应专门的属性(例子中的doCool),进行内部委托(其实就是套个壳进行隐藏).这样我们<strong>对象的属性就是”完整”的.</strong></p>\n<p>在实际工作中,我们常常就是把原型对象作为存放对象的公共属性方法的地方.对于一般比较重要的操作才会在对象里进行内部委托(隐藏委托)!</p>\n<h3 id=\"5-5-小结\"><a href=\"#5-5-小结\" class=\"headerlink\" title=\"5.5 小结\"></a>5.5 小结</h3><p>总结得很好很全面,这里我还是直接摘抄了,不是偷懒哦!</p>\n<ul>\n<li>如果要访问对象中并不存在的一个属性，<strong>[[Get]] 操作(参见第 3 章)就会查找对象内部[[Prototype]] 关联的对象。</strong> 这个关联关系实际上定义了一条“原型链”(有点像嵌套的作用域链)，在查找属性时会对它进行遍历。</li>\n<li><strong>所有普通对象都有内置的 Object.prototype，</strong> 指向原型链的顶端(比如说全局作用域)，如 果在原型链中找不到指定的属性就会停止。toString()、valueOf() 和其他一些通用的功能 都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。</li>\n<li>关联两个对象最常用的方法是使用 new 关键词进行函数调用，在调用的 4 个步骤(第 2 章)中会创建一个关联其他对象的新对象。</li>\n<li>使用 new 调用函数时会把新对象的 .prototype 属性关联到“其他对象”(就是构造函数prototype所指的对象)。带 new 的函数调用 通常被称为“构造函数调用”，尽管它们实际上和传统面向类语言中的类构造函数不一样。</li>\n<li>JavaScript 中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的。</li>\n<li>“委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。(意思就是原先继承应该改为原先委托?)</li>\n</ul>\n<h2 id=\"第六章-行为委托\"><a href=\"#第六章-行为委托\" class=\"headerlink\" title=\"第六章 行为委托\"></a>第六章 行为委托</h2><p>第 5 章的结论:[[Prototype]] 机制就是指对象中的一个内部链接引用另一个对象。换句话说，JavaScript 中这个机制的本质就是对象之间的关联关系。在第六章又被称为委托.<br>PS:前面在讲原型的时候我就习惯用父对象指代原型对象(类似”父类”),用子对象指代其实例对象(类似”子类”).本章也将采用这种称呼,故下面不再说明.(其实我觉得用父对象和子对象称呼更形象)</p>\n<h3 id=\"6-1-面向委托的设计\"><a href=\"#6-1-面向委托的设计\" class=\"headerlink\" title=\"6.1 面向委托的设计\"></a>6.1 面向委托的设计</h3><p>一句话:[[Prototype]]机制是面向委托的设计,是不同于面向类的设计. 下面将分别介绍类理论和委托理论.</p>\n<h4 id=\"6-1-1-类理论\"><a href=\"#6-1-1-类理论\" class=\"headerlink\" title=\"6.1.1 类理论\"></a>6.1.1 <strong>类理论</strong></h4><p><strong>类理论设计方法:</strong> 首先定义一个通用父(基)类，在 父类类中定义所有任务都有(通用)的行为。接着定义子类 ，它们都继承自 父类并且会添加一些特殊的行为来处理对应的任务,并且在继承时子类可以使用方法重写(和多态)父类的行为.        </p>\n<p>类理论中许多行为可以<strong>先“抽象”到父类然后再用子类进行特殊化(重写)。</strong><br>ps:这部分了解即可,着重理解下面JavaScript用到的委托.</p>\n<h4 id=\"6-1-2-委托理论\"><a href=\"#6-1-2-委托理论\" class=\"headerlink\" title=\"6.1.2 委托理论\"></a>6.1.2 <strong>委托理论</strong></h4><p><strong>类理论设计方法:</strong> 首先你会定义一个”父”对象(相当于上节中的父类)，它会包含所有任务都可以使用(委托)的具体行为。接着，对于<strong>每个任务</strong>你都可以定义一个对象(“子”对象)来存储对应的数据和行为。你可以把特定的任务对象都关联到父对象上，让它们在需要的时候可以进行委托。    (其实我们一般都是用父对象来定义通用的方法,子对象进行委托.然后子对象自身个性的属性方法就写在子对象本身,并避免与父对象的属性名冲突)        </p>\n<p><strong>ps:</strong> 这节书中这段话<code>但是我们并不需要把这些行为放在一起，**通过类的复制**，我们可以把它们分别放在各自独立 的对象中，需要时可以允许 XYZ 对象委托给 Task。</code>有个错误.”通过类的复制”应该改为”通过”[[Prototype]]机制”.这里应该是作者的手误.<br>在 JavaScript 中，[[Prototype]] 机制会把对象关联到其他对象。无论你多么努力地说服自 己，JavaScript 中就是没有类似“类”的抽象机制。(其实主要原因还是是JavaScript没有完整的复制机制)</p>\n<p><strong>委托理论的使用建议:</strong><br>PS:书中这里写了3条,其实只有2条,第三条不过是对第一条的说明,这里我进行了合并.</p>\n<ul>\n<li><ol>\n<li>通常来说，在 [[Prototype]] 委托中最好<strong>把状态保存在委托者(子对象)而不是委托目标(父对象)上</strong>。那怎么实现呢,就是通过”this 的隐式绑定”.<strong>在委托目标(父对象)上的函数里通过this定义保存状态</strong>.当委托者(子对象)引用该函数方法时,此时的this就自动绑定到委托者上了.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在委托中我们会尽量避免在 [[Prototype]] 链的不同级别中使用相同的命名，否则就需要使用笨拙并且脆弱的语法来消除引用歧义(参见第 4 章)。</li>\n</ol>\n</li>\n<li><strong>补充</strong>: 3. 在 API 接口的设计中，<strong>委托最好在内部实现，不要直接暴露出去。</strong> 这么做更多的是出于安全和接口稳定的考虑.建议<strong>子对象将所有引用父对象的方法都套个函数隐藏起来,并取一个语义化的属性名.</strong></li>\n</ul>\n<p><strong>委托理论的使用注意:</strong></p>\n<ul>\n<li><ol>\n<li><strong>禁止两个对象互相委托</strong>:当你将第二个对象反向委托给前一个对象时,就会报错.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>调试</strong>: 这个了解下就行.知道不同浏览器和工具对委托的解析结果并不一定相同.(吐槽:看了半天到后面出现<code>实际上，在编写本书时，这个行为被认定是 Chrome 的一个 bug， 当你读到此书时，它可能已经被修复了。</code>我只想说WTF! 好吧,我知道chrome以前可能出现过这个”bug”了=.=)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6-1-3-比较思维模型\"><a href=\"#6-1-3-比较思维模型\" class=\"headerlink\" title=\"6.1.3 比较思维模型\"></a>6.1.3 <strong>比较思维模型</strong></h4><p>这节主要是比较了”通过构造函数(模拟类)实现原型继承”与”通过对象关联(委托形式,Object.create( … ))实现原型继承”两种方式的区别.</p>\n<p><strong>结论:</strong> 通过对象关联,委托形式,更加简洁,更加清晰易懂.</p>\n<p>PS:这里我原本自己对例子画出原型示意图.但是发现是真的复杂,并且和书中简洁后的示意图是差不多的,所以这里就不展示了,免得让读者看得更头大.这里建议,读者自己在草稿纸上画出原型示意图.</p>\n<h3 id=\"6-2-类与对象\"><a href=\"#6-2-类与对象\" class=\"headerlink\" title=\"6.2 类与对象\"></a>6.2 类与对象</h3><p>其实这节讲得还是”通过构造函数(模拟类)实现原型继承”与”通过对象关联(委托形式,Object.create( … ))实现原型继承”两种方式的区别.不过这次主要是以前端实际使用场景进行讲解.</p>\n<h4 id=\"6-2-1-控件“类”\"><a href=\"#6-2-1-控件“类”\" class=\"headerlink\" title=\"6.2.1 控件“类”\"></a>6.2.1 <strong>控件“类”</strong></h4><p>这里我就不以书中的例子进行讲解了,而是直接站在更高的角度对这种”类”风格的代码进行讲解.<br><strong>最大特点:</strong> 1是通过构造函数进行模拟类,2是通过显式伪多态(硬绑定函数)关联两个函数.<br><strong>注意:</strong> </p>\n<ul>\n<li><strong>不管是类还是对象.这两种形式一般都需要定义两种数据.第一种就是实例对象要用到的”初始保存的数据”;第二种就是通用行为的定义,包括对实例对象数据的增删改查.</strong></li>\n<li>下面提到的显式伪多态(详见第四章),其实指的就是使用call()方法这种硬绑定.</li>\n<li>注意ES6 class模拟类的写法我就没具体列出了.实际上class 仍然是通过 [[Prototype]] 机制实现的,不过是个表面简洁的语法糖.</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b5e847b943c0?w=1002&amp;h=717&amp;f=png&amp;s=117669\" alt=\"\"></p>\n<p>虽然书中对显式伪多态称为”丑陋的”,还用了一个语气动词”呸!”.虽然这样不好,但有时用call真的很方便,所以用得也很多.</p>\n<h4 id=\"6-2-2-委托控件对象\"><a href=\"#6-2-2-委托控件对象\" class=\"headerlink\" title=\"6.2.2 委托控件对象\"></a>6.2.2 <strong>委托控件对象</strong></h4><p><strong>最大特点:</strong> 通过对象载体来模拟父子,并<strong>通过Object,create(…)来对两个对象进行关联</strong>.并<strong>通过委托的形式进行引用</strong>.与上节中提到的类形式还有一个区别:对象foo构建后,需要手动调用setUp方法进行初始化.故对象的构建与初始化是分开的.而构造函数形式则是在new 构造函数时, 同时进行了对象构建与初始化.(关于这点我下面还会再说明的)</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b604328156c9?w=789&amp;h=822&amp;f=png&amp;s=132960\" alt=\"\"></p>\n<p>关于书中这句<code>使用类构造函数的话，你需要(并不是硬性要求，但是强烈建议)在同一个步骤中实现构造和初始化。然而，在许多情况下把这两步分开(就像对象关联代码一样)更灵活。</code>的理解:使用类构造函数形式,当我们使用<code>new 构造函数</code>时,其实是在<strong>一步实现</strong>对象的构建和对象数据的初始化(通过构造函数里的call) ;使用这种委托形式,我们是分别通过<code>Object.create( ... );</code>构建对象和<code>foo.setUp( ...);</code>来初始化的.即我们是分两步实现的.这样分开的话其实是更加灵活,也更符合编程中的关注分离原则.</p>\n<h3 id=\"6-3-更简洁的设计\"><a href=\"#6-3-更简洁的设计\" class=\"headerlink\" title=\"6.3 更简洁的设计\"></a>6.3 更简洁的设计</h3><p>这节也是一样通过两者的对比来突显委托设计模式的各种优点.这里我就不再对书中的例子进行解读.如果你真正理解了类和委托的话,其实是很简单的.如果觉得复杂的话,可以在纸上理一下函数和对象之间的关系,下面我就只总结下这里提到委托设计模式的优点,当然核心是更简洁.</p>\n<p><strong>简洁体现在:</strong></p>\n<ul>\n<li>1, 委托重点在于只需要两个实体(两个对象相互关联)，而之前的”类”模式需要三个(父”类”,子”类”,实例对象)其实可以这么理解:委托模式将”子类”和”实例对象”合为一个对象了。</li>\n<li>2, 不需要基类(父类)来”共享”两个实体之间的行为.不需要实例化类,也不需要合成.其实这第二条就是对第一条这种结果的说明.</li>\n<li>额外补充强调:在使用构造函数模拟类时,子类通常会对父类的行为进行重写(属性名相同);但委托模式则不会,它会重新取个属性名,再引用父对象上的行为.</li>\n</ul>\n<h3 id=\"6-4-更好的语法\"><a href=\"#6-4-更好的语法\" class=\"headerlink\" title=\"6.4 更好的语法\"></a>6.4 更好的语法</h3><p>这节主要是介绍ES6提供的2个简洁写法与其中的隐患.</p>\n<p><strong>语法:</strong></p>\n<ul>\n<li><p>在 ES6 中我们可以在任意对象的字面形式中使用简洁方法声明，例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> Foo = &#123;</span><br><span class=\"line\">  bar() &#123; <span class=\"comment\">/*..*/</span> &#125;,<span class=\"comment\">//字面形式声明</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 ES6 中我们可以用 Object. setPrototypeOf(..) 来修改对象的 [[Prototype]],具体用法可以<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"noopener\">查看MDN</a>例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用更好的对象字面形式语法和简洁方法 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AuthController = &#123;</span><br><span class=\"line\">         errors: [],</span><br><span class=\"line\">         checkAuth() &#123;</span><br><span class=\"line\">           <span class=\"comment\">// ... </span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         server(url,data) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// ...</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 现在把 AuthController 关联到 LoginController </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( AuthController, LoginController );</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>弊端:</strong></p>\n<ul>\n<li><strong>对象字面形式语法</strong>:实际上就是一个匿名函数表达式.匿名函数会导致3个缺点:1. 调试栈更难追踪;2. 自我引用(递归、事件(解除)绑定，等等)更难; 3. 代码(稍微)更难理解。(其实我觉得这3个缺点还好,影响不是那么大).但是这种简洁语法很特殊，会给对应的函数对象设置一个内部的 name 属性，这样理论上可以用在追 踪栈中。所以实际上唯一的弊端就只剩第2条了.终极建议就是:如果你需要自我引用的话，那最好使用传统的具名函数表达式来定义对应的函数，不要使用简洁方法。</li>\n<li><strong>Object. setPrototypeOf(..)</strong>  这个是书中没有提的,我觉得有必要进行补充下.首先,Object. setPrototypeOf(..)可能会带来性能问题,如果关心性能,则应该使用Object.create()替代.<strong>Object. setPrototypeOf(..)与Object.create()的主要区别</strong>: Object. setPrototypeOf(..)会直接修改现有对象的[[prototype]],Object.create()则是返回一个新对象.所以你需要手动设置一下丢失的的constructor属性(如果你需要的话).而使用setPrototypeOf(..)则不需要.</li>\n</ul>\n<h3 id=\"6-5-内省\"><a href=\"#6-5-内省\" class=\"headerlink\" title=\"6.5 内省\"></a>6.5 内省</h3><p><strong>吐槽:</strong> 纵观整本书,作者关于JavaScript中模拟类和继承”的批评,说它们具有很大误导性!更是嗤之以鼻!就差爆粗口了,JavaScript就像一个异教徒,应该绑在十字架上被烧死!但是他这样的观点,都是站在其他语言的角度来看待时,产生的.我想更多的读者可能是只接触过JavaScript.那么他其实是没有这些疑惑的!!!你反而给他们讲这一大堆其他语言的”正确”含义,有时候会时得其反!让读者更加困惑,如果是理解不透彻的,反而会怀疑自己本来写的是对的代码!所以读者应该做一个可以理解作者意图,并且拥有自我见解和观点立场!</p>\n<p><strong>什么是内省(自省)?</strong><br>首先,本节需要弄懂一个问题,什么是内省,或者是自省。书中的解释是<code>自省就是检查实例的类型。类实例的自省主要目的是通过创建方式来判断对象的结构和功能。</code>我这里再更通俗地解释下:当我们构建得到一个实例对象时,有时候我们是不太清除它的属性和方法的.尤其是第三方库.有时候贸然使用会导致很多错误(例如调用的方法不存在,或者报错等).这个时候我们就需要通过自省.其实就是通过一系列操作,来确认实例是不是我们想要的那个,实例的方法是不是我们想要的(存在且可用).</p>\n<p><strong>内省的方法:</strong></p>\n<ul>\n<li><strong>1.通过 instanceof 语法:</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.something = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"comment\">// 假设我们不知道上面的过程,只知道得到实例对象a1</span></span><br><span class=\"line\"><span class=\"comment\">//我们想知道a1是不是我所希望的函数Foo所构建的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a1 <span class=\"keyword\">instanceof</span> Foo) &#123; </span><br><span class=\"line\">  a1.something();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>例子中我们有一个实例对象a1,但是我们不知道a1是不是我们所希望的函数Foo所构造的,此时就可以通过<code>instanceof</code>进行判断.        <code>instanceof</code>比较适合判断实例对象和构造函数之间的关系.<br><strong>缺陷:</strong> 但是如果我们想判断函数A是不是函数B的”子类”时,则会稍微麻烦点,我们需要像这样<code>A.prototype instanceof B</code>进行判断.并且也不能直接判断两个对象是否关联.</p>\n<ul>\n<li><strong>2.通过 “鸭子类型”:</strong> 为什么会叫这个名字?看了作者的解释,还是不太能接受.不太理解外国人的脑回路.你在国内和别人说”鸭子类型”,估计也是一脸懵逼.其实很简单,所谓的”鸭子类型”其实也是我们实际工作中常用的:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果a1的something存在的话,则我们可以进行调用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( a1.something) &#123; </span><br><span class=\"line\">  a1.something();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实这种方法是非常常用的,排除了在不知道存在性情况下,贸然调用的风险.<br><strong>缺陷:</strong> 关于书中提到的缺点,四个字概括就是”以偏概全” .书中关于Promise的例子,就是以偏概全的例子.所以我们在使用时,在if判断a1.something存在时,才会在后面使用something方法.不要直接使用anotherthing,这种没确认过的方法.</p>\n<ul>\n<li><strong>3.如果使用对象关联时:</strong> 则可以比较简单的使用<code>Object.getPrototypeOf(..)</code>进行判断.例如<code>Object.getPrototypeOf(a)===A</code>其中a,A都是对象.如果为true,则说明a的原型链上含有对象A.</li>\n</ul>\n<h3 id=\"6-6-小结\"><a href=\"#6-6-小结\" class=\"headerlink\" title=\"6.6 小结\"></a>6.6 小结</h3><ul>\n<li>除了类和继承设计模式,行为委托其实是更强大,更值得推广的模式(本观点仅代表作者的观点!)</li>\n<li>行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。(我觉得还是父子对象关系.我的解说里也都是父子相称)</li>\n<li>当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。</li>\n<li>对象关联(对象之前互相关联)是一种编码风格，它倡导的是直接创建和关联对象，不把它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现   </li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>链接：<a href=\"https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4</a><br>来源：掘金</p>\n<h1 id=\"第一部分-作用域和闭包\"><a href=\"#第一部分-作用域和闭包\" class=\"headerlink\" title=\"第一部分 作用域和闭包\"></a>第一部分 作用域和闭包</h1><h2 id=\"第一章-作用域是什么\"><a href=\"#第一章-作用域是什么\" class=\"headerlink\" title=\"第一章 作用域是什么\"></a>第一章 作用域是什么</h2>","more":"<h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a>1.1 编译原理</h3><p><strong>传统编译的三个步骤</strong></p>\n<ul>\n<li><strong>1,分词/词法分析(Tokenizing/Lexing) :</strong> 这个过程会将由字符组成的字符串分解成(对编程语言来说)有意义的代码块，这些代码块被称为词法单元(token)。例如，考虑程序var a = 2;。这段程序通常会被分解成 为下面这些词法单元:var、a、=、2、;。空格是否会被当作词法单元，取决于空格在 这门语言中是否具有意义。</li>\n<li><strong>2,解析/语法分析(Parsing):</strong> 这个过程是将词法单元流(数组)转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为“<strong>抽象语法树</strong>”(Abstract Syntax Tree，AST)。var a = 2; 的抽象语法树中可能会有一个叫作 VariableDeclaration 的顶级节点，接下来是一个叫作Identifier(它的值是a)的子节点，以及一个叫作 AssignmentExpression 的子节点。AssignmentExpression 节点有一个叫作 NumericLiteral(它的值是 2)的子节点。</li>\n<li><strong>3,代码生成:</strong> 将 AST 转换为可执行代码的过程称被称为代码生成。这个过程与语言、目标平台等息息相关。抛开具体细节，简单来说就是有某种方法可以将 var a = 2; 的 AST 转化为一组机器指令，用来创建一个叫作 a 的变量(包括分配内存等)，并将一个值储存在 a 中。</li>\n</ul>\n<p><strong><em>说明:</em></strong> 此处只需记住第一步:分词/词法分析.第二步:解析/语法分析,得到抽象语法树(AST).第三步:代码生成,将抽象语法树转换为机器指令.</p>\n<p><strong>JavaScript与传统编译的不同点:</strong></p>\n<ul>\n<li>1,JavaScript 引擎不会有大量的(像其他语言编译器那么多的)时间用来进行优化.</li>\n<li>2,JavaScript与传统的编译语言不同，它不是在构建之前提前编译的，大部分情况下,它是在代码执行前的几微秒(甚至更短)进行编译.</li>\n<li>3,JavaScript 引擎用尽了各种办法(比如 JIT，可以延 迟编译甚至实施重编译)来保证性能最佳。</li>\n<li>4,JavaScript的编译结果不能在分布式系统中进行移植。</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a>1.2 理解作用域</h3><h4 id=\"1-2-1-演员表-代码编译到执行的参与者\"><a href=\"#1-2-1-演员表-代码编译到执行的参与者\" class=\"headerlink\" title=\"1.2.1 演员表(代码编译到执行的参与者)\"></a>1.2.1 演员表(代码编译到执行的参与者)</h4><p>首先介绍将要参与到对程序 var a = 2; 进行处理的过程中的演员们，这样才能理解接下来将要听到的对话。</p>\n<ul>\n<li>引擎<br>从头到尾负责整个 JavaScript 程序的编译及执行过程。</li>\n<li>编译器<br>引擎的好朋友之一，负责语法分析及代码生成等脏活累活(详见前一节的内容)。</li>\n<li>作用域<br>引擎的另一位好朋友，负责收集并维护由所有声明的标识符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。<h4 id=\"1-2-2-对话-代码编译执行过程\"><a href=\"#1-2-2-对话-代码编译执行过程\" class=\"headerlink\" title=\"1.2.2 对话(代码编译执行过程)\"></a>1.2.2 对话(代码编译执行过程)</h4><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b0e35937a479?w=1186&amp;h=1292&amp;f=png&amp;s=105617\" alt=\"JavaScript对var a =2;的处理过程\"></li>\n</ul>\n<h4 id=\"1-2-3-作用域的LHS查询和RHS查询\"><a href=\"#1-2-3-作用域的LHS查询和RHS查询\" class=\"headerlink\" title=\"1.2.3 作用域的LHS查询和RHS查询\"></a>1.2.3 作用域的LHS查询和RHS查询</h4><p>由上图可知,引擎在获得编译器给的代码后,还会对作用域进行询问<strong>变量</strong>.</p>\n<p>现在将例子改为var a = b;此时引擎会对变量a和变量b都向<strong>作用域</strong>进行查询.查询分为两种:LHS和RHS.其中L代表左.R代表右.即对变量a进行LHS查询.对变量b进行RHS查询.</p>\n<p>单单从表象上看.LHS就是作用域对<code>=</code>左边变量的查询.RHS就是作用域对<code>=</code>右边变量的查询.但实际上并不是这么简单,首先LHS和RHS都是对变量进行查询,这也是我为什么要将例子从var a=2;改为var a=b;两者的区别是两者最终要查询到的东西并不一致.LHS是要查询到变量的声明(而不是变量的值),从而后面可以为其赋值.RHS是要查询到变量最终的值.还有一点,LHS 和 RHS 的含义是“赋值操作的左侧或右侧”并不一定意味着就是“= 赋值操作符的左侧或右侧”。赋值操作还有其他几种形式，因此在概念上最 好将其理解为“赋值操作的目标是谁(LHS)”以及“谁是赋值操作的源头(RHS)”.或者这样理解如果这段代码需要得到该变量的’源值’,则会进行RHS查询.</p>\n<h4 id=\"1-2-4-引擎和作用域的对话\"><a href=\"#1-2-4-引擎和作用域的对话\" class=\"headerlink\" title=\"1.2.4 引擎和作用域的对话\"></a>1.2.4 引擎和作用域的对话</h4><p>这部分比较简单就是通过拟人方式比喻引擎和作用域的合作过程.一句话概括就是,引擎进行LHS和RHS查询时都会找作用域要.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure></p>\n<p>让我们把上面这段代码的处理过程想象成一段对话，这段对话可能是下面这样的。</p>\n<p>引擎:我说作用域，我需要为 foo 进行 RHS 引用。你见过它吗?<br>作用域:别说，我还真见过，编译器那小子刚刚声明了它。它是一个函数，给你。<br>引擎:哥们太够意思了!好吧，我来执行一下 foo。<br>引擎:作用域，还有个事儿。我需要为 a 进行 LHS 引用，这个你见过吗?<br>作用域:这个也见过，编译器最近把它声名为 foo 的一个形式参数了，拿去吧。<br>引擎:大恩不言谢，你总是这么棒。现在我要把 2 赋值给 a。<br>引擎:哥们，不好意思又来打扰你。我要为 console 进行 RHS 引用，你见过它吗?<br>作用域:咱俩谁跟谁啊，再说我就是干这个。这个我也有，console 是个内置对象。 给你。<br>引擎:么么哒。我得看看这里面是不是有 log(..)。太好了，找到了，是一个函数。<br>引擎:哥们，能帮我再找一下对 a 的 RHS 引用吗?虽然我记得它，但想再确认一次。<br>作用域:放心吧，这个变量没有变动过，拿走，不谢。<br>引擎:真棒。我来把 a 的值，也就是 2，传递进 log(..)。</p>\n<h3 id=\"1-3作用域嵌套\"><a href=\"#1-3作用域嵌套\" class=\"headerlink\" title=\"1.3作用域嵌套\"></a>1.3作用域嵌套</h3><p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。进而形成了一条作用域链.因此，在当前作用 域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。</p>\n<p>当引擎需要对作用域进行查询时.引擎会从当前的执行作用域开始查找变量，如果找不到， 就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都 会停止。</p>\n<h3 id=\"1-4-异常\"><a href=\"#1-4-异常\" class=\"headerlink\" title=\"1.4 异常\"></a>1.4 异常</h3><p>例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a + b ); </span><br><span class=\"line\">  b = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo( <span class=\"number\">2</span> );</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 <strong>ReferenceError</strong> 异常。例如上面例子中<code>console.log(a+b)</code>由于RHS此时是找不到b的值.故会抛出ReferenceError.</li>\n<li>如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的 属性，那么引擎会抛出另外一种类型的异常，叫作 <strong>TypeError</strong>。</li>\n<li>当引擎执行 LHS 查询时，<strong>如果在顶层(全局作用域)中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量</strong>，并将其返还给引擎，前提是程序运行<strong>在非 “严格模式”下</strong>。例如上面例子中的<code>b=a;</code>.</li>\n<li>在严格模式中 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询 失败时类似的 ReferenceError 异常。</li>\n</ul>\n<h3 id=\"1-5-LHS与RHS小结\"><a href=\"#1-5-LHS与RHS小结\" class=\"headerlink\" title=\"1.5 LHS与RHS小结\"></a>1.5 LHS与RHS小结</h3><ul>\n<li>LHS和RHS查询都是引擎对作用域的查询</li>\n<li>LHS和RHS查询都是只对变量进行查询</li>\n<li>LHS和RHS都会沿着作用域链进行查询,直到最上层的全局作用域.如果没找到的话,在非严格模式下,LHS则会在全局创建一个相同名称的变量.RHS则会抛出ReferenceError的异常.</li>\n<li>如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。</li>\n<li>LHS只是找到变量的容器而已,方便进行赋值</li>\n<li><code>=</code>操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。此时都会进行LHS查询</li>\n<li>RHS查询则需要找到变量的值.</li>\n</ul>\n<h2 id=\"第二章-词法作用域\"><a href=\"#第二章-词法作用域\" class=\"headerlink\" title=\"第二章 词法作用域\"></a>第二章 词法作用域</h2><p>作用域分为两种工作模式:</p>\n<ul>\n<li>1,<strong>词法作用域</strong>.是目前最为普遍的，被大多数编程语言所采用的模式.当然JavaScript也是使用的词法作用域.</li>\n<li>2,动态作用域.使用较少,比如 Bash 脚本、Perl 中的一些模式等.</li>\n</ul>\n<h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a>2.1 词法阶段</h3><p><strong>词法阶段:</strong> 大部分标准语言编译器的第一个工作阶段叫作词法化(也叫单词化)。词法化的过程会对源代码中的字符进行检查，如果是有状态的解析过程，还会赋予单词语义。</p>\n<p><strong>词法作用域:</strong> 词法作用域就是定义在词法阶段的作用域也被称为静态作用域。即在JavaScript里作用域的产生是在编译器出来的第一阶段词法阶段产生的,并且是你在书写完代码时就已经确定了的.</p>\n<p><strong>词法作用域位置:</strong> 词法作用域位置范围完全由写代码期间函数所声明的位置来决定.</p>\n<p><strong>理解词法作用域及嵌套:</strong><br>看下例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = a * <span class=\"number\">2</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">c</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( a, b, c );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bar( b * <span class=\"number\">3</span> ); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo( <span class=\"number\">2</span> ); <span class=\"comment\">// 2, 4, 12</span></span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们分成3个逐级包含的”气泡作用域”。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b17a466f8fb0?w=2020&amp;h=814&amp;f=png&amp;s=173375\" alt=\"\"></p>\n<ul>\n<li>1:包含着整个全局作用域，其中只有一个标识符:foo。</li>\n<li>2:包含着 foo 所创建的作用域，其中有三个标识符:a、bar 和 b。</li>\n<li>3:包含着 bar 所创建的作用域，其中只有一个标识符:c。</li>\n</ul>\n<p><strong>注意:</strong> 没有任何函数的气泡可以(部分地)同时出现在两个外部作用域的气泡中，就如同没有任何函数可以部分地同时出现在两个父级函数中一样。</p>\n<p><strong>引擎对作用域的查找:</strong><br>这一部分在上一节中已经说过,就是从当前作用域逐级向上,直到最上层的全局作用域.这里再进一步进行讲解.<strong>作用域查找会在找到第一个匹配的标识符时停止</strong>。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。抛开遮蔽效应， 作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p>\n<p><strong>注意:</strong></p>\n<ul>\n<li>全局变量会自动成为全局对象(比如浏览器中的 window对象)的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引 用来对其进行访问。例如:<code>window.a</code>  通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。</li>\n<li>词法作用域查找只会查找一级标识符，比如 a、b 和 c。<strong>如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符</strong>，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问。</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a>2.2 欺骗词法</h3><p><strong>欺骗词法:</strong> 引擎在运行时来“修改”(也可以说欺骗)词法作用域.或者说就是在引擎运行时动态地修改词法作用域(本来在编译词法化就已经确定的).</p>\n<p><strong>欺骗词法的两种机制:</strong>(下面这两种机制理解了解即可,不推荐实际开发使用)</p>\n<h4 id=\"2-2-1-eval\"><a href=\"#2-2-1-eval\" class=\"headerlink\" title=\"2.2.1 eval\"></a>2.2.1 eval</h4><p>JavaScript 中的 eval(..) 函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中这个位置的代码。即将eval放在该词法作用域,然后eval携带的代码就会动态加入到该词法作用域.</p>\n<p>通过下面的例子加深理解:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">str, a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">eval</span>( str ); <span class=\"comment\">// 欺骗! </span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a, b );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">foo( <span class=\"string\">\"var b = 3;\"</span>, <span class=\"number\">1</span> ); <span class=\"comment\">// 1, 3</span></span><br></pre></td></tr></table></figure></p>\n<p>eval(..) 调用中的 “var b = 3;” 这段代码会被当作本来就在那里一样来处理。由于那段代码声明了一个新的变量 b，因此它对已经存在的 foo(..) 的词法作用域进行了修改。当 console.log(..) 被执行时，会在 foo(..) 的内部同时找到 a 和 b，但是永远也无法找到外部的 b。因此会输出“1, 3”而不是正常情况下会输出的“1, 2”。</p>\n<p><strong>注意:</strong> </p>\n<ul>\n<li>eval(..) 通常被用来执行动态创建的代码.可以据程序逻辑动态地将变量和函数以字符形式拼接在一起之后传递进去。</li>\n<li>在严格模式下,eval(…)无法修改所在的作用域。</li>\n<li>与eval(…)类似,setTimeout(..)和 setInterval(..) 的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。</li>\n<li>new Function(..) 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数(前面的参数是这个新生成的函数的形参)。这种构建函数的语法比 eval(..) 略微安全一些，但也要尽量避免使用。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"return a + b;\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">1111</span>));  <span class=\"comment\">//1112</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2-2-2-with-不推荐实际使用\"><a href=\"#2-2-2-with-不推荐实际使用\" class=\"headerlink\" title=\"2.2.2 with(不推荐实际使用)\"></a>2.2.2 with(不推荐实际使用)</h4><p>例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">2</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = &#123; </span><br><span class=\"line\">  b: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo( o1 );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( o1.a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo( o2 );</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( o2.a ); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2——不好，a 被泄漏到全局作用域上了!</span></span><br></pre></td></tr></table></figure></p>\n<p>起初你会觉得o1的a属性被with里的a进行了词法引用被遮蔽了成为了2.而o2没有a属性,此时with不能进行词法引用,所以此时o2.a就会变成undefined.但是,为什么最后console.log(a)会为2?因为在执行foo(o2)时,with会对其中的a=2进行LHS查询,但它在o2作用域,foo()作用域,全局作用域都没找到,因此就创建了一个全局变量a并随后赋值2.</p>\n<p>总的来说,with就是将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域，因此这个对象的属性也会被处理为定义在这个作用域中的词法标识符。</p>\n<p><strong>注意:</strong> 使用 eval(..) 和 with 的原因是会被严格模式所影响(限制)。with 被完全禁止，而在保留核心功能的前提下，间接或非安全地使用 eval(..) 也被禁止了。</p>\n<h4 id=\"2-2-3-性能\"><a href=\"#2-2-3-性能\" class=\"headerlink\" title=\"2.2.3 性能\"></a>2.2.3 性能</h4><p>JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的词法进行<strong>静态分析</strong>，并<strong>预先确定</strong>所有变量和函数的定义位置，才能在执行过程中快速找到标识符。但是eval(..) 和 with会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词法作用域。这么做就会导致引擎无法知道eval和with它们对词法作用域进行什么样的改动.只能对部分不进行处理和优化!因此如果代码中大量使用 eval(..) 或 with，那么运行起来一定会变得非常慢!。</p>\n<h3 id=\"2-3-小结\"><a href=\"#2-3-小结\" class=\"headerlink\" title=\"2.3 小结\"></a>2.3 小结</h3><ul>\n<li>词法作用域是在你书写代码时就已经决定了的.在编译的第一阶段词法分析阶段产生词法作用域.此时词法作用域基本能够知道全部标识符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它 们进行查找。</li>\n<li>eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域(在运行时)。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域(同样是在运行时)。</li>\n<li>一般不要在实际代码中使用eval(…)和with,因为不仅危险,而且会造成性能问题!</li>\n</ul>\n<h2 id=\"第三章-函数作用域和块作用域\"><a href=\"#第三章-函数作用域和块作用域\" class=\"headerlink\" title=\"第三章 函数作用域和块作用域\"></a>第三章 函数作用域和块作用域</h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a>3.1 函数中的作用域</h3><ul>\n<li>JavaScript 具有基于函数的作用域，一般情况下每声明 一个函数都会创建一个函数作用域.</li>\n<li>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。这样的好处是JavaScript 变量可以根据需要改变值类型。</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a>3.2 隐藏内部实现</h3><p>因为</p>\n<ul>\n<li>子级函数作用域可以直接访问父级函数作用域里的标识符;</li>\n<li>父级函数作用域不能直接访问子级函数作用域里的标识符.</li>\n</ul>\n<p>所以用函数声明对代码进行包装，实际上就是把这些代码“隐藏”起来了。</p>\n<p>为什么要将代码进行”隐藏”?<br>因为最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必 要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。<br><strong>隐藏的好处:</strong></p>\n<ul>\n<li>实现代码私有化,减少外部对内部代码的干扰,保持其稳定性.</li>\n<li><strong>规避冲突:</strong> 可以避免同名标识符之间的冲突， 两个标识符可能具有相同的名字但用途却不一样，无意间可能造成命名冲突。冲突会导致 变量的值被意外覆盖。那么一般规避冲突的手段有哪些?<ul>\n<li><ol>\n<li><strong>全局命名空间:</strong> 变量冲突的一个典型例子存在于全局作用域中。当程序中加载了多个第三方库时，如果它们没有妥善地将内部私有的函数或变量隐藏起来，就会很容易引发冲突。这些库通常会在全局作用域中声明一个名字足够独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象(命名空间)的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。 </li>\n</ol>\n</li>\n<li>2.<strong>模块管理:</strong> 另外一种避免冲突的办法和现代的模块机制很接近，就是从众多模块管理器中挑选一个来 使用。实际上就是我们常用的amd,commonjs,import模块机制.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-函数作用域\"><a href=\"#3-3-函数作用域\" class=\"headerlink\" title=\"3.3 函数作用域\"></a>3.3 函数作用域</h3><p><strong>函数声明与函数表达式:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们知道函数foo内的变量和函数被隐藏起来了,是不会对全局作用域造成污染.但是变量名foo仍然存在于全局作用域中,会造成污染.那有什么方法能避免函数名的污染呢?那就是作为函数表达式,而不是一个标准的函数声明.这样函数名只存在于它自己的函数作用域内,而不会存在于其父作用域,这样就没有了污染.举个函数声明的例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 3 </span></span><br><span class=\"line\">&#125;)(); </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们用()包裹一个函数,并立即执行.此时这个包装函数声明是从<code>(function</code>开始的而不是从function关键字开始.这样foo就会被当做一个函数表达式,而不是一个函数声明(即foo不会存在于父级作用域中).回到上面的例子中,全局作用域是访问不到foo的,foo只存在于它自己的函数作用域中.</p>\n<p><strong>补充: 什么是函数声明和函数表达式</strong><br>首先我们得了解JS声明函数的三种方式:</p>\n<ul>\n<li><strong>函数表达式(Function Expression):</strong> 将函数定义为表达式语句（通常是变量赋值,也可以是自调用形式）的一部分。通过函数表达式定义的函数可以是命名的，也可以是匿名的。因为它可以没有函数名,因此常被用作匿名函数.如果有,其函数名也只存在自身的函数作用域.并且函数表达式不能以“function”开头.函数表达式可以存储在变量或者对象属性里. (在函数声明前加上运算符是可以将其转化为函数表达式的.例如<code>!</code>,<code>+</code>,<code>-</code>,<code>()</code>.举个例子:<code>!function(){console.log(1)}()</code>的结果是1,并不会报错)</li>\n<li><strong>函数声明(Function Declaration):</strong>  函数声明是一种独立的结构,它会声明一个具名函数,并必须以function开头. 且函数声明会进行函数提升.使它能在其所在作用域的任意位置被调用,即后面的代码中可以将此函数通过函数名赋值给变量或者对象属性.</li>\n<li><strong>Function()构造器:</strong> 即使用Function构造器创建函数.不推荐这种用法, 容易出问题<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Function()构造器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f =<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f())</span><br><span class=\"line\"><span class=\"comment\">//思考一下,这里会打印出什么</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>怎么区分函数声明和函数表达式:</strong><br>看 function 关键字出现在声明中的位置(不仅仅是一行代码，而是整个声明中的位置)。如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。例如上例中,是从<code>(</code>开始而不是function.</p>\n<p><strong>补充:</strong> 上面这段是原书的解释,我觉得这个解释并不完全,这里给出我自己的解释.</p>\n<ul>\n<li>表象区别:和它说的一样,只要是<strong>以function开头进行声明,并且含有函数名</strong>的就一定是函数声明.</li>\n<li>内在区别:其实我在上面补充两者的定义时已经说得很清楚了,我再对比总结下.<ul>\n<li>函数提升:函数声明,会将整个函数进行提升.而函数表达式则不会提升,它是在引擎运行时进行赋值，且要等到表达式赋值完成后才能调用。 </li>\n<li>函数表达式是可以没有函数名的,如果有,它的函数名也只存在于自身的作用域,<code>var f = function fun(){console.log(fun)}</code>其他地方是没有的.这也避免了全局污染,也方便递归.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-3-1-匿名和具名\"><a href=\"#3-3-1-匿名和具名\" class=\"headerlink\" title=\"3.3.1 匿名和具名\"></a>3.3.1 匿名和具名</h4><p>函数表达式可以是匿名的，而函数声明则不可以省略函数名.有函数名的就是具名函数,没有函数名的就是匿名函数.</p>\n<p>匿名函数的缺点:</p>\n<ul>\n<li><ol>\n<li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。</li>\n</ol>\n</li>\n</ul>\n<p>所以给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践.</p>\n<p><strong>PS:</strong> 个人意见是如果函数表达式有赋值给变量或属性名或者就是一次性调用的.其实是没必要加上函数名.因为代码里取名本来就很难,取不好反而会造成误解.</p>\n<h4 id=\"3-3-2-立即执行函数表达式\"><a href=\"#3-3-2-立即执行函数表达式\" class=\"headerlink\" title=\"3.3.2 立即执行函数表达式\"></a>3.3.2 立即执行函数表达式</h4><p>比如 (function foo(){ .. })()。第一个 ( ) 将函数变成表达式，第二个 ( ) 执行了这个函数。这就是立即执行函数表达式,也被称为IIFE，代表立即执行函数表达式 (Immediately Invoked Function Expression);</p>\n<p>IIFE可以具名也可以匿名.好处和上面提到的一样.IIFE还可以是这种形式<code>(function(){ .. }())</code>.这两种形式在功能上是一致的。</p>\n<h3 id=\"3-4-块作用域\"><a href=\"#3-4-块作用域\" class=\"headerlink\" title=\"3.4 块作用域\"></a>3.4 块作用域</h3><p>函数作用域是JavaScript最常见的作用域单元,有时我们仅会将var赋值变量在if或for的{…}内使用,而不会在其他地方使用.但它仍然会对外层的函数作用域造成污染.这个时候就会希望能有一个作用域能将其外部的函数作用域隔开,声明的变量仅在此作用域有效.块作用域(通常就是{…}包裹的内部)就可以帮我们做到这点.</p>\n<p>从 ES3 发布以来，JavaScript 中就有了块作用域，而 with 和 catch 分句就是块作用域的两个小例子。</p>\n<h4 id=\"3-4-1-with\"><a href=\"#3-4-1-with\" class=\"headerlink\" title=\"3.4.1 with\"></a>3.4.1 with</h4><p>我们在第 2 章讨论过 with 关键字。它不仅是一个难于理解的结构，同时也是块作用域的一个例子(块作用域的一种形式)，用 with 从对象中创建出的作用域仅在 with 声明中而非外部作用域中有效。</p>\n<h4 id=\"3-4-2-try-catch\"><a href=\"#3-4-2-try-catch\" class=\"headerlink\" title=\"3.4.2 try/catch\"></a>3.4.2 try/catch</h4><p>try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>(); <span class=\"comment\">// 执行一个非法操作来强制制造一个异常</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( err ); <span class=\"comment\">// 能够正常执行! </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( err ); <span class=\"comment\">// ReferenceError: err not found</span></span><br></pre></td></tr></table></figure></p>\n<p>err 仅存在 catch 分句内部，当试图从别处引用它时会抛出错误。<br>那么如果我们想用catch创建一个不是仅仅接收err的块作用域,该怎么做呢?<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;<span class=\"keyword\">throw</span> <span class=\"number\">2</span>;&#125;<span class=\"keyword\">catch</span>(a)&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就创建了一个块作用域,且a=2,仅在catch分句中存在.在ES6之前我们可以使用这种方法来使用块作用域.</p>\n<h4 id=\"3-4-3-let\"><a href=\"#3-4-3-let\" class=\"headerlink\" title=\"3.4.3 let\"></a>3.4.3 let</h4><p>ES6 引入了新的 let 关键字，提供了除 var 以外的另一种变量声明方式。let 关键字可以将变量绑定到所在的任意作用域中(通常是 { .. } 内部)。</p>\n<p>用 let 将变量附加在一个已经存在的块作用域上的行为是隐式的。例如在if的{…}内用let声明一个变量.那什么是显式地创建块作用域呢?就是单独创建<code>{}</code>来作为let的块作用域.而不是借用if或者for提供的<code>{}</code>.例如<code>{let a=2;console.log(a)}</code><br><strong>注意:</strong> 使用 let 进行的声明不会在块作用域中进行提升.<br><strong>块作用域的好处:</strong></p>\n<ul>\n<li>1,垃圾收集<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里做点有趣的事情</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> someReallyBigData=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//dosomeing</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     process(someReallyBigData);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my_button\"</span>);</span><br><span class=\"line\">     btn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"button click\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//假如我们在这里继续调用someReallyBigData就会形成闭包,导致不能垃圾回收(这段是书里没有,我加上方便理解的)</span></span><br><span class=\"line\">     &#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>click 函数的点击回调并不需要 someReallyBigData 变量。理论上这意味着当 process(..) 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于 click 函数形成了一个覆盖整个作用域的闭包，JavaScript 引擎极有可能依然保存着这个结构(取决于具体实现)。<br>但显式使用块作用域可以让引擎清楚地知道没有必要继续保存 someReallyBigData 了:<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">process</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里做点有趣的事情</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">// 在这个块中定义的内容可以销毁了! </span></span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> someReallyBigData = &#123; .. &#125;; </span><br><span class=\"line\">\t   process( someReallyBigData );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"my_button\"</span>);</span><br><span class=\"line\">     btn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"button click\"</span>);</span><br><span class=\"line\">     &#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><ol start=\"2\">\n<li>let循环<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( i ); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<p>for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。这样就避免了i对外部函数作用域的污染.</p>\n<h4 id=\"3-4-4-const\"><a href=\"#3-4-4-const\" class=\"headerlink\" title=\"3.4.4 const\"></a>3.4.4 const</h4><p>除了 let 以外，ES6 还引入了 const，同样可以用来创建块作用域变量，但其值是固定的(常量)。之后任何试图修改值的操作都会引起错误。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (foo) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> b = <span class=\"number\">3</span>; <span class=\"comment\">// 包含在 if 中的块作用域常量</span></span><br><span class=\"line\">  a = <span class=\"number\">3</span>; <span class=\"comment\">// 正常!</span></span><br><span class=\"line\">  b = <span class=\"number\">4</span>; <span class=\"comment\">// 错误! </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( b ); <span class=\"comment\">// ReferenceError!</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-小结\"><a href=\"#3-5-小结\" class=\"headerlink\" title=\"3.5 小结\"></a>3.5 小结</h3><p>函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，可以有效地与外部作用域隔开.    </p>\n<p>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)即块作用域。ES6中就提供了let和const来帮助创建块作用域.</p>\n<h2 id=\"第四章-提升\"><a href=\"#第四章-提升\" class=\"headerlink\" title=\"第四章 提升\"></a>第四章 提升</h2><h3 id=\"4-1-先有鸡-赋值-还是先有蛋-声明\"><a href=\"#4-1-先有鸡-赋值-还是先有蛋-声明\" class=\"headerlink\" title=\"4.1 先有鸡(赋值)还是先有蛋(声明)\"></a>4.1 先有鸡(赋值)还是先有蛋(声明)</h3><p>考虑第一段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a );</span><br></pre></td></tr></table></figure></p>\n<p>输出结果是2,而不是undefined</p>\n<p>考虑第二段代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( a ); </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果是undefined,而不是ReferenceError<br>考虑完以上代码,你应该会考虑这个问题.到底是声明(蛋)在前，还是赋值(鸡)在前?</p>\n<h3 id=\"4-2-编译器再度来袭\"><a href=\"#4-2-编译器再度来袭\" class=\"headerlink\" title=\"4.2 编译器再度来袭\"></a>4.2 编译器再度来袭</h3><p>编译器的内容,回忆一下，引擎会在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是<strong>找到所有的声明，并用合适的作用域将它们关联起来。 之后引擎会询问作用域,对声明进行赋值操作.</strong></p>\n<p>那么,在编译阶段找到所有的声明后,编译器又做了什么?答案就是<strong>提升</strong><br>以上节的第一段代码为例,<strong>当你看到 var a = 2; 时，可能会认为这是一个声明。但 JavaScript 实际上会将其看成两个声明:var a;和a = 2;。</strong> 第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。在第一个声明在编译阶段时,编译器会对<code>var a;</code>声明进行提升(即把<code>var a;</code>置于所在作用域的最上面).而<code>a = 2;</code>则会保持所在位置不动.此时代码会变成<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a; </span><br><span class=\"line\">a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( a );</span><br></pre></td></tr></table></figure></p>\n<p>由此可知,<strong>在编译阶段,编译器会对声明进行提升.即先有蛋(声明)后有鸡(赋值)。</strong><br><strong>哪些声明会被进行提升?</strong></p>\n<ul>\n<li>变量声明:例如上例中的<code>var a;</code>.不包括后面的<code>a = 2;</code>即<strong>不包含有赋值操作的声明.</strong></li>\n<li>函数声明:注意<strong>是函数声明,而不是函数表达式!</strong>(不清楚可以看前面的3.3节,我有详细说明).函数声明提升,是将整个函数进行提升,而不是仅仅函数名的提升.</li>\n</ul>\n<h3 id=\"4-3-函数优先\"><a href=\"#4-3-函数优先\" class=\"headerlink\" title=\"4.3 函数优先\"></a>4.3 函数优先</h3><p>函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个“重复”声明的代码中)是函数会首先被提升，然后才是变量。<br>考虑以下代码:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">2</span> );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>会输出 1 而不是 2 !这个代码片段会被引擎理解为如下形式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">1</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"number\">2</span> );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>注意，var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明(因此被忽略了)，因为函数声明会被提升到普通变量之前。<br><strong>注意:</strong> js会忽略前面已经声明的声明(不管是变量声明还是函数声明,只要其名称相同,则后续不会再进行重复声明).但是对该变量新的赋值,会覆盖之前的值.<br><strong>一句话概括:函数声明的优先级高于变量声明,会排在它前面.</strong></p>\n<h3 id=\"4-4-小结\"><a href=\"#4-4-小结\" class=\"headerlink\" title=\"4.4 小结\"></a>4.4 小结</h3><ul>\n<li>对于<code>var a = 2</code>  JavaScript引擎会将var a和 a = 2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</li>\n<li>论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的最顶端，这个过程被称为提升。</li>\n<li>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升(即赋值操作都不会提升)。</li>\n<li>注意:，当普通的 var 声明和函数声明混合在一起的时候，并且声明相同时(var的变量名和函数名相同时,会引发js对重复声明的忽略)!一定要注意<strong>避免重复声明!</strong></li>\n</ul>\n<h2 id=\"第五章-作用域闭包\"><a href=\"#第五章-作用域闭包\" class=\"headerlink\" title=\"第五章 作用域闭包\"></a>第五章 作用域闭包</h2><h3 id=\"5-1-启示\"><a href=\"#5-1-启示\" class=\"headerlink\" title=\"5.1 启示\"></a>5.1 启示</h3><ul>\n<li>JavaScript中闭包无处不在，你只需要能够识别并拥抱它。</li>\n<li>闭包是基于词法作用域书写代码时所产生的自然结果，你甚至不需要为了利用它们而有意识地创建闭包。</li>\n</ul>\n<h3 id=\"5-2-实质问题-amp-amp-5-3-现在我懂了\"><a href=\"#5-2-实质问题-amp-amp-5-3-现在我懂了\" class=\"headerlink\" title=\"5.2 实质问题 &amp;&amp; 5.3 现在我懂了\"></a>5.2 实质问题 &amp;&amp; 5.3 现在我懂了</h3><p>因为这两小节理解透了其实发现书里也没讲什么,这里就进行合并,并补充拓展我自己的理解和总结.<br><strong>什么是闭包?(广义版)</strong><br><strong>书中解释:</strong> 当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。<br><strong>MDN的解释:</strong> 闭包是函数和声明该函数的词法环境的组合。<br><strong>我的解释(详细版):</strong> 必须包含两点:</p>\n<ul>\n<li>1,有函数.由于函数自身的特性,它能访问所在的词法作用域.并能保存外部词法作用域的变量和函数到自己的函数作用域.</li>\n<li>2,有该函数所在的词法环境.其实在JavaScript中任何函数都会处在一个词法环境中.不管是全局作用域还是函数作用域.</li>\n</ul>\n<p>综上<strong>简单版</strong>就是:MDN的解释<strong>闭包是函数和声明该函数的词法环境的组合。</strong><br>还可以继续延伸成<strong>极简版</strong>:<strong>JavaScript中的函数就会形成闭包</strong>。<br><strong>Tips:</strong> 注意到上面对<code>词法作用域</code>和<code>词法环境</code>两词的分开使用了吗?<code>1,</code>里此时函数还没被执行,所以使用的是词法作用域即静态作用域.<code>2,</code>里,此时函数被执行,此时词法作用域就会变成词法环境(包含静态作用域与动态作用域).所以其实MDN的解释其实更准确一点,</p>\n<p><strong>我们日常使用时所说的闭包(狭义版,严格意义上的):</strong><br>为了便于对闭包作用域的观察和使用.我们实际使用时会将闭包的函数作用域暴露给当前词法作用域之外.也就是本书一直强调的<strong>闭包函数需要在它本身的词法作用域以外执行</strong>.作者认为符合这个条件才称得上是真正的闭包(也就是我们日常使用常说的’使用闭包’,并且<strong>使用任何回调函数其实也是闭包</strong>).<br>所以狭义版就是:闭包是函数和声明该函数的词法环境的组合,并且将闭包的函数作用域暴露给当前词法作用域之外.    </p>\n<p><strong>闭包暴露函数作用域的三种方式:</strong><br>下面部分是书中没有的,是自己实际使用时的总结,并且<strong>符合这三种形式之一的就是我们日常使用时所说的闭包(狭义版)</strong></p>\n<ul>\n<li><p>1,通过外部函数的参数进行暴露.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    baz(a) <span class=\"comment\">//通过外部函数的参数进行暴露</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   bar(); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\">val</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( val ); <span class=\"comment\">// 2 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2,通过外部作用域的变量进行暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    val=a <span class=\"comment\">//通过外部作用域的变量进行暴露</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   bar(); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3,通过return直接将整个函数进行暴露</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> bar <span class=\"comment\">//通过return直接将整个函数进行暴露</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> val=foo();</span><br><span class=\"line\">val()  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>关于闭包的内存泄露问题:</strong><br>首先必须声明一点:<strong>使用闭包并不一定会造成内存泄露,只有使用闭包不当才可能会造成内存泄露.</strong>(吐槽:面试很多新人时,张口就说闭包会造成内存泄露)<br>为什么闭包可能会造成内存泄露呢?原因就是上面提到的,因为它一般会暴露自身的作用域给外部使用.如果使用不当,就可能导致该内存一直被占用,无法被JS的垃圾回收机制回收.就造成了内存泄露.<br><strong>注意:</strong> <strong>即使闭包里面什么都没有,闭包仍然会隐式地引用它所在作用域里的所用变量.</strong>   正因为这个隐藏的特点,闭包经常会发生不易发现的内存泄漏问题.<br><strong>常见哪些情况使用闭包会造成内存泄露:</strong>    </p>\n<ul>\n<li>1,使用定时器未及时清除.因为计时器只有先停止才会被回收.所以决办法很简单,将定时器及时清除,并将造成内存的变量赋值为null(变成空指针)</li>\n<li>2,相互循环引用.这是经常容易犯的错误,并且也不容易发现.举个栗子:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = &#123;&#125;; </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a); </span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">  a.fn = bar; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> bar; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里创建了一个a 的对象，该对象被内部函数bar引用。然后，a创建了一个属性fn指向了bar，最后返回了innerFn()。这样就形成了bar和a的相互循环引用.可能有人说bar里不使用<code>console.log(a)</code>不就没有引用了吗就不会造成内存泄露了.NONONO,bar作为一个闭包,即使它内部什么都没有,foo中的所有变量都还是隐使地被 bar所引用。这个知识点是我前面忘记提到的,也是书中没有提到的.算了我现在加到前面去吧.所以即使bar内什么都没有还是造成了循环引用,那真正的解决办法就是,不要将<code>a.fn = bar</code>.</p>\n<ul>\n<li>3,将闭包引用到全局变量上.因为全局变量是只有当页面被关闭的时候才会被回收.</li>\n<li>4,在闭包中对DOM进行不当的引用.这个常见于老IE浏览器,现代浏览器已经长大了,已经学会了自己处理这种情况了.这里就不赘述了.想知道的可以自行问谷娘和度娘.</li>\n</ul>\n<p>总而言之,<strong>解决办法就是使闭包的能正常引用,能被正常回收.如果实在不行,就是在使用完后,手动将变量赋值null,强行进行垃圾回收.</strong></p>\n<h3 id=\"5-4-循环和闭包\"><a href=\"#5-4-循环和闭包\" class=\"headerlink\" title=\"5.4 循环和闭包\"></a>5.4 循环和闭包</h3><p>看如下例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">  &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们期望的结果是分别输出数字 1~5，每秒一次，每次一个。<br>但实际结果是,这段代码在运行时会以每秒一次的频率输出五次 6。<br>(关于书里的解释,我觉得有点说复杂了,没说到点子上,下面是我的解释.)<br><strong>为什么会是这样的结果?</strong><br>timer毫无疑问是一个闭包,它是可以访问到外部的变量i.在进行for循环时,timer()会被重复执行5次,也就是它会 console.log( i )5次.(关键部分来了!)这5次<code>i</code>其实是同一个<code>i</code>.它是来自于外部作用域,即for里面声明的i.在<strong>词法作用域中</strong>变量i只可能对应一个唯一的值,即<strong>变量和它的值是一一对应的.不会变化的</strong>.那这个值到底是多少呢?<strong>这个值就是最终值!</strong> i的最终值就是6即for循环完后<code>i</code>的值.当引擎执行<code>console.log( i )</code>时,它会询问i所对应的作用域,问它i的值是多少.这个时候作用域进行RHS查询得到的结果就是最终值6.        </p>\n<p><strong>为什么我们会以为分别输出1~5?</strong><br>因为在for循环中,我们错以为每一次循环时,函数所输出的i是根据循环动态变化的.即是1~5累加变化的.但实际上它所访问的i是同一个固定不变的值,即最终值6.可能你会有这样的疑惑,那我循环还有意义吗?i其实一开始就确定是6了.没有变化过!错!<code>i</code>变化过,它的确是从1逐步增加到6的.只是外部作用域的i值只可能是循环完后的最终值,并且函数timer()并没有保存每次i变化的值.它只是访问了外部作用域的i值即最终的值6. OK我们知道了出错的地方,就是我们没有把每次i的值保存在一个独立的作用域中.<br>接下来,看下这个改进的例子结果是多少.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>它的最终值仍然是5个6.为什么?我们来分析下,上例中,它用了一个匿名函数包裹了定时器,并立即执行.在进行for循环时,会创造5个独立的函数作用域(由匿名函数创建的,因为它是闭包函数).但是这5个独立的函数作用域里的i也全都是对外部作用域的引用.即它们访问的都是i的最终值6.这并不是我们想要的,我们要的是5个独立的作用域,并且每个作用域都保存一个”当时”<code>i</code>的值.</p>\n<p><strong>解决办法:</strong><br>那我们这样改写.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j =i;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">    &#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这次终于结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p>\n<p>这样改写后,匿名函数每次都通过j保存了每次i值,这样<code>i</code>值就通过j保存在了独立的作用域中.注意此时保存的i值是’当时’的值,并不是循环完后的最终值.这样循环完后,实际上就创建了5个独立的作用域,每个作用域都保存了一个’当时’i的值(通过j).当引擎执行<code>console.log( j )</code>询问其对应的独立作用域时,得到的值就是’当时’保存的值,再也不是6了.<br>我们还可以进一步简写为这样:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">\t  <span class=\"built_in\">console</span>.log( j );</span><br><span class=\"line\">    &#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>利用块作用域进行解决:</strong><br>在es6中,我们不仅可以使用函数来创建一个独立的作用域,我们还可以使用let声明来创建一个独立的块作用域(在<code>{}</code>内).所以我们还可以这样改写:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123; </span><br><span class=\"line\">  setTimeout( <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( i );</span><br><span class=\"line\">  &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结果是分别输出数字 1~5，每秒一次，每次一个。</span></span><br></pre></td></tr></table></figure></p>\n<p>这样改写,在每次循环时,let都会对i进行声明.并通过循环自带的<code>{}</code>创建一个独立的块作用域.并且let声明的i,保存了’当时’<code>i</code>的值在当前块作用域里.因此当引擎执行<code>console.log( i )</code>时,它会询问对应的块作用域上i的值,得到的结果就是’当时’保存的值.</p>\n<p><strong>延伸:</strong><br>实际上块作用域可以称得上一个’伪’闭包(之所以是伪,是因为闭包规定了只能是函数).因为它几乎拥有闭包的所有特性.它也可以创建一个独立的作用域,同样外部作用域不能访问块作用域的变量.但块作用域可以访问外部作用域.举个栗子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#123;  <span class=\"comment\">//通过&#123;&#125; 显示表示块作用域</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = a;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'块作用域内'</span>,b) <span class=\"comment\">//2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'块作用域外'</span>,b) <span class=\"comment\">//b is not defined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure></p>\n<p>说了相同点,说说不同点:1,保存变量到块作用域,必须通过let声明.2,块作用域不能和函数一样有名称(函数名)<br>很多不方便使用闭包或者比较麻烦的时候,是可以考虑通过块作用域进行解决.</p>\n<p><strong>总结一下一般什么时候考虑使用闭包:</strong><br>这部分也是自己工作使用的总结,如果有补充或者不对的地方,欢迎留言指正.</p>\n<ul>\n<li>1,需要创建一个独立的作用域并隐藏一些变量或函数,不被外部使用;或者想保存一些外部作用域的变量或函数到这个独立作用域.</li>\n<li>2,只想暴露<strong>一部分</strong>自身作用域的变量或函数给外部使用.</li>\n</ul>\n<h3 id=\"5-5-模块\"><a href=\"#5-5-模块\" class=\"headerlink\" title=\"5.5 模块\"></a>5.5 模块</h3><p>首先看下面的例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CoolModule</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> something = <span class=\"string\">\"cool\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> another = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( something );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doAnother</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( another.join( <span class=\"string\">\" ! \"</span> ) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      doSomething: doSomething,</span><br><span class=\"line\">\t  doAnother: doAnother</span><br><span class=\"line\">  &#125;; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = CoolModule(); </span><br><span class=\"line\"></span><br><span class=\"line\">foo.doSomething(); <span class=\"comment\">// cool</span></span><br><span class=\"line\">foo.doAnother(); <span class=\"comment\">// 1 ! 2 ! 3</span></span><br></pre></td></tr></table></figure></p>\n<p>首先我们对上面这段代码进成分行分析:<br>私有数据变量:something, another<br>内部函数:doSomething, doAnother<br>直接说结论,上面这个例子就是模块模式.<strong>它return返回的这个对象也就是模块也被称为公共API(至少书中是这样称呼的).CoolModule()就是模块构造器或者叫模块函数.</strong><br><strong>注意</strong>:</p>\n<ul>\n<li><strong>这里的模块和我们所说的模块化开发不是完全一样的!</strong></li>\n<li>模块不一定非要是标准对象,也可以是一个函数,函数本质上也是对象,函数也可以有自己的属性.</li>\n<li>书中有这样一句话<code>CoolModule() 只是一个函数，必须要通过调用它来创建一个模块实例。如果不执行外部函数，内部作用域和闭包都无法被创建。</code>我觉得这句话有必要延伸说一下.函数调用一次就会创建一个该函数的作用域(不调用就不会创建),包括创建它里面的变量和函数.</li>\n</ul>\n<p><strong>模块模式:</strong><br>模块模式需要具备以下2个条件:(这里结合上面的例子,对书中的定义进行说明方便理解)</p>\n<ul>\n<li>1, 必须有外部的封闭函数(即CoolModule)，该函数必须至少被调用一次(每次调用都会创建一个新的模块实例–&gt;模块实例指的就是函数return返回的对象)。</li>\n<li>2, 封闭函数(即CoolModule)必须返回至少一个内部函数(即doSomething, doAnother)，这样内部函数才能在私有作用域中形成闭包，并且可以访问或者修改私有的状态(即something, another)。</li>\n</ul>\n<p><strong>模块:</strong><br>表面上看由模块函数(例子中的CoolModule)所返回的对象就是模块.但<strong>模块还必须还包含模块函数的内部函数(即闭包函数)</strong>.只有包含了才能真正称得上是模块.才强调一次这里的模块与模块化里的模块是有区别的,也不是nodejs里的模块.</p>\n<p><strong>模块函数:</strong><br>模块函数也就是模块构造器,例子中的CoolModule().一般它有两个常见用法.</p>\n<ul>\n<li>通过接受参数,对输出的模块进行修改.</li>\n<li>通过添加模块里添加相关的内部函数,实现对输出模块数据的增删改查.(书中用<code>命名将要作为公共API返回的对象</code>.我觉得<code>命名</code>应该是用错了,应该是<code>修改</code>即增删改查更好)</li>\n</ul>\n<h4 id=\"5-5-1-现代的模块机制\"><a href=\"#5-5-1-现代的模块机制\" class=\"headerlink\" title=\"5.5.1 现代的模块机制\"></a><strong>5.5.1 现代的模块机制</strong></h4><p>大多数模块依赖加载器 / 管理器本质上都是将这种模块定义封装进一个友好的 API。<br>下面就介绍一个简单的模块管理器实现例子(对书中的例子进行逐行解读):<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先实例化我们的模块管理器,取名myModules</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyModules=(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//作为我们的模块池,保存所有定义的模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> modules=&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *使用类似AMD的方式定义新模块，接收3个参数</span></span><br><span class=\"line\"><span class=\"comment\">     *name:模块名</span></span><br><span class=\"line\"><span class=\"comment\">     *deps:数组形式表示所依赖的其他模块</span></span><br><span class=\"line\"><span class=\"comment\">     *impl:模块功能的实现</span></span><br><span class=\"line\"><span class=\"comment\">    **/</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name,deps,impl</span>) </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//遍历依赖模块数组的每一项，从程序池中取出对应的模块,并赋值.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//循环完后,deps由保存模块名的数组变成了保存对应模块的数组.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;deps.length;i++) &#123;</span><br><span class=\"line\">            deps[i]=modules[deps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将新模块存储进模块池，并通过apply注入它所依赖的模块(即遍历后的deps,实际上就是用deps作为impl的入参)</span></span><br><span class=\"line\">        modules[name]=impl.apply(impl,deps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从模块池中取出对应模块</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modules[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//暴露定义模块和获取模块的两个api</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        define: define,</span><br><span class=\"line\">        get: get</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<p><strong>说明:</strong>  后面书中说了这么一句<code>为了模块的定义引入了包装函数(可以传入任何依赖)</code>,这里包装函数指的是Manger(),同样也是我们上节提到的模块函数.首先说明下什么是包装函数.例如函数A当中还有一个函数B.当我们想要调用函数B的时候,则需要先调用函数A.那么函数A就叫做函数B的包装函数.也就是说我们想调用某个模块时,需要先调用它的包装函数即这里的Manger().接着是后面那句<code>并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。</code>注意这里的返回值是指impl的返回值.</p>\n<p>接着看通过管理器来定义和使用模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyModules.define(<span class=\"string\">'bar'</span>,[],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span> (<span class=\"params\">who</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回公共API 即提供一个hello的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        hello:hello</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MyModules.define(<span class=\"string\">'foo'</span>,[<span class=\"string\">'bar'</span>],<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    functin awesome () &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//这里的bar为返回模块bar返回的公共API</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( bar.hello( hungry ).toUpperCase() );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回公共API 即提供一个awesome的接口</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        awesome:awesome</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar=MyModules.get(<span class=\"string\">'bar'</span>);<span class=\"comment\">//通过管理器获取模块'bar'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo=MyModules.get(<span class=\"string\">'foo'</span>);<span class=\"comment\">//通过管理器获取模块'foo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\"><span class=\"comment\">//调用模块bar的hello接口</span></span><br><span class=\"line\">         bar.hello( <span class=\"string\">\"hippo\"</span> ) </span><br><span class=\"line\">); <span class=\"comment\">// Let me introduce: hippo </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用模块foo的awesome接口</span></span><br><span class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></span><br></pre></td></tr></table></figure>\n<p>这节的主要内容还是了解现在是如何对模块进行一个规范处理.主要是两部分内容,一个是通过名称和依赖合理定义模块并储存.另一个则是通过名称对存储的模块的调用.其实还可以再增加一个删除模块的方法.</p>\n<h4 id=\"5-5-2-未来的模块机制\"><a href=\"#5-5-2-未来的模块机制\" class=\"headerlink\" title=\"5.5.2 未来的模块机制\"></a><strong>5.5.2 未来的模块机制</strong></h4><p>ok,这节说的模块,就是我们常说的模块化开发.并且主要提到的就是ES6里常用的import.没什么好说的.</p>\n<h3 id=\"5-6-小结\"><a href=\"#5-6-小结\" class=\"headerlink\" title=\"5.6 小结\"></a>5.6 小结</h3><p><strong>吐槽:</strong> 同一个函数概念在5.5这一个小节里,居然换着花样蹦出了三个名字!一会叫模块构造器!一会叫模块函数!以及最后的包装函数!每变化一次,都得想一遍它指的是啥!真的是无力吐槽了!!!!</p>\n<p>闭包:当函数可以记住并访问所在的词法作用域，并且函数是在当前词法作用域之外执行，这时 就产生了闭包。</p>\n<p>模块有两个主要特征:</p>\n<ul>\n<li>(1)为创建内部作用域而调用了一个包装函数(模块构造器的实例化,不想对频繁换名字吐槽了);</li>\n<li>(2)包装函数的返回值(也就是模块)必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>\n</ul>\n<h1 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h1><h2 id=\"第一章-关于this\"><a href=\"#第一章-关于this\" class=\"headerlink\" title=\"第一章 关于this\"></a>第一章 关于this</h2><h3 id=\"1-1-为什么要用this\"><a href=\"#1-1-为什么要用this\" class=\"headerlink\" title=\"1.1 为什么要用this\"></a>1.1 为什么要用this</h3><p>因为this 提供了一种更优雅的方式来隐式“传递”一个对象(即上下文对象)引用，因此可以将 API 设计得更加简洁并且易于复用。</p>\n<h3 id=\"1-2-误解\"><a href=\"#1-2-误解\" class=\"headerlink\" title=\"1.2 误解\"></a>1.2 误解</h3><p>下面两种常见的对于 this 的解释都是错误的(看看就好,就不过多解读了,以免增加了对错误的印象)。</p>\n<h4 id=\"1-2-1-指向自身\"><a href=\"#1-2-1-指向自身\" class=\"headerlink\" title=\"1.2.1 指向自身\"></a>1.2.1 指向自身</h4><p>人们很容易把 this 理解成指向函数自身.    </p>\n<p>具名函数，可以在它内部可以使用函数名来引用自身进行递归,添加属性等。(这个知识点其实在第三章提过,既然这里又提了一遍,我也再说一遍.)例如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo.count = <span class=\"number\">4</span>; <span class=\"comment\">// foo 指向它自身</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>匿名函数如果想要调用自身则,需要使用<code>arguments.callee</code>不过这个属性在ES5严格模式下已经禁止了,也不建议使用.详情可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee\" target=\"_blank\" rel=\"noopener\">MDN的说明.</a></p>\n<h4 id=\"1-2-2-它的作用域\"><a href=\"#1-2-2-它的作用域\" class=\"headerlink\" title=\"1.2.2 它的作用域\"></a>1.2.2 它的作用域</h4><p><strong>切记:</strong> <strong>this 在任何情况下都不指向函数的词法作用域。你不能使用 this 来引用一个词法作用域内部的东西。</strong> 这部分只需记住这一段话就行.</p>\n<p><strong>终极疑问:</strong> JavaScript里的作用域到底是对象吗?<br>这小节最令我在意的是里面这句话”在 JavaScript 内部，作用域确实和对象类似，可见的标识符都是它的属性。但是作用域“对象”无法通过 JavaScript代码访问，它存在于JavaScript 引擎内部。”它让我想起了最开始学JS的一个疑问,JavaScript里的作用域到底是对象吗.虽然”在JS里万物皆对象”.但是作用域给人的感觉却不像是一个对象.更像是一个范围,由函数的<code>{}</code>围城的范围,限制了其中变量的访问.但直觉告诉我它和对象还是应该有点联系的.直到读到书中的这段话,更加印证了我的感觉.<br>在JavaScript里,作用域其实是一个比较特殊的对象,作用域里所有可见的标识符都是它的属性.只是作用域对象并不能通过JavaScript代码被我们访问,它只存在于JavaScript引擎内部.所以作用域作为一个”对象”是经常被我们忽略.</p>\n<h3 id=\"1-3-this到底是什么\"><a href=\"#1-3-this到底是什么\" class=\"headerlink\" title=\"1.3 this到底是什么\"></a>1.3 this到底是什么</h3><p>this 是在运行时(runtime)进行绑定的，<strong>并不是在编写时绑定</strong>，它的上下文(对象)取决于函数调用时的各种条件。this 的绑定和函数声明的位置没有任何关系，<strong>只取决于函数的调用方式</strong>。</p>\n<p>当一个函数被调用时，会创建一个活动记录(有时候也称为执行上下文)。这个记录会包含函数在哪里被调用(调用栈)、函数的调用方法、传入的参数等信息。<strong>this 就是记录的其中一个属性</strong>，会在函数执行的过程中用到。(PS:所以this并不等价于执行上下文)</p>\n<h3 id=\"1-4-小结\"><a href=\"#1-4-小结\" class=\"headerlink\" title=\"1.4 小结\"></a>1.4 小结</h3><ul>\n<li>学习 this 的第一步是明白 this 既不指向函数自身也不指向函数的词法作用域</li>\n<li>this 实际上是在函数被调用时发生的绑定，<strong>它指向什么完全取决于函数在哪里被调用(关于this你必须记住的话)</strong>。</li>\n</ul>\n<h2 id=\"第二章-this全面解析\"><a href=\"#第二章-this全面解析\" class=\"headerlink\" title=\"第二章 this全面解析\"></a>第二章 this全面解析</h2><h3 id=\"2-1-调用位置\"><a href=\"#2-1-调用位置\" class=\"headerlink\" title=\"2.1 调用位置\"></a>2.1 调用位置</h3><p>通过上节我们知道,this的绑定与函数的调用位置有关.那调用位置是什么.调用位置就是函数在代码中被调用的位置(<strong>而不是声明的位置</strong>)。</p>\n<p>要寻找调用位置,最重要的是要分析调用栈(就是为了到达当前执行位置所调用的所有函数)。我们关心的调用位置就在当前正在执行的函数的前一个调用中。PS:调用栈其实是一个解释起来有点复杂的概念.这里我就不过多解释,这里推荐一篇<a href=\"https://juejin.im/post/5a05b4576fb9a04519690d42\" target=\"_blank\" rel=\"noopener\">文章</a>,解释得不错.</p>\n<p>这节书里的例子解释得不错,这里就不复制代码了.其实分析调用栈只是为了在运行时找到我们关心的函数到底<strong>在哪里和被谁调用了.</strong> 但是实际别写代码时,其实并不会分析得这么清楚的,我们还是只需记住<code>this的指向就是我们调用该函数的上下文对象.意思就是我们在哪里调用该函数,this就指向哪里</code>.并且查看调用栈还可以通过浏览器的开发者工具,只需在疑惑的代码上一行加上debugger即可.浏览器在调试模式时,我们就可以在调用列表里查看调用栈.我们一般也仅在查找bug时,会使用该方法.</p>\n<h3 id=\"2-2-绑定规则\"><a href=\"#2-2-绑定规则\" class=\"headerlink\" title=\"2.2 绑定规则\"></a>2.2 绑定规则</h3><p>在找到调用位置后,则需要判定代码属于下面四种绑定规则中的哪一种.然后才能对this进行绑定.<br><strong>注意:</strong> this绑定的是上下文<strong>对象</strong>,<strong>并不是函数自身也不是函数的词法作用域</strong></p>\n<h4 id=\"2-2-1-默认绑定\"><a href=\"#2-2-1-默认绑定\" class=\"headerlink\" title=\"2.2.1 默认绑定\"></a>2.2.1 <strong>默认绑定</strong></h4><p><strong>什么是独立函数调用</strong>:对函数直接使用而不带任何修饰的函数引用进行调用.简单点一个函数直接是<code>func()</code>这样调用,<strong>前面什么都没有</strong>.不同于通过对象属性调用例如<code>obj.func()</code>,也没有通过new关键字<code>new Function()</code>;也没有通过apply,bind,call强制改变this指向.<br><strong>默认绑定:</strong> 当被用作独立函数调用时（不论这个函数在哪被调用,不管全局还是其他函数内），this默认指向到window；<br><strong>注意:</strong> 如果使用严格模式(strict mode)，那么全局对象将无法使用默认绑定，因此 this 会绑定到 undefined.</p>\n<h4 id=\"2-2-2-隐式绑定\"><a href=\"#2-2-2-隐式绑定\" class=\"headerlink\" title=\"2.2.2 隐式绑定\"></a>2.2.2 <strong>隐式绑定</strong></h4><p><strong>隐式绑定:</strong> 函数被某个对象拥有或者包含.也就是函数被作为对象的属性所引用.例如<code>obj.func()</code>.此时this会绑定到该对象上.<br><strong>隐式丢失:</strong> 不管是通过函数别名或是将函数作为入参造成的隐式丢失.只需找到它真正的调用位置,并且函数前没有任何修饰也没有显式绑定(下节会讲到)(非严格模式下).那么this则会进行默认绑定,指向window.<br><strong>注意:</strong> 实际工作中,大部分this使用错误都是由对隐式丢失的不理解造成的.<strong>记住函数调用前没有任何修饰和显式绑定(其实就是call、apply、bind),this就指向window</strong></p>\n<h4 id=\"2-2-3-显式绑定\"><a href=\"#2-2-3-显式绑定\" class=\"headerlink\" title=\"2.2.3 显式绑定\"></a>2.2.3 <strong>显式绑定</strong></h4><p>在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 间接(隐式)绑定到这个对象上。如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，此时则需要显式绑定.<br><strong>显式绑定:</strong>  可以直接指定 this 的绑定对象，被称之为显式绑定。基本上就是我们常使用的call、apply、bind方法都是显式绑定.(如果这三个方法不能熟练使用的,建议找度娘或者谷娘学习后,再看这节.)<br><strong>注意:</strong><br>如果你传入了一个原始值(字符串类型、布尔类型或者数字类型)来当作 this 的绑定对 象，这个原始值会被转换成它的对象形式(也就是new String(..)、new Boolean(..)或者 new Number(..))。这通常被称为“装箱”。</p>\n<p><strong>硬绑定:</strong> 使用call、apply、bind方法强制显式地将this进行绑定,称之为硬绑定。<br>硬绑定的典型应用场景就是创建一个包裹函数(其实就是常说的封装函数)，传入所有的参数并返回接收到的所有值.<br>在封装函数中,我们常使用apply.一方面是因为它可以手动绑定this,更重要的是因为可以用apply的第二个参数,方便地注入所有传入的参数.例如之前提到的<code>modules[name]=impl.apply(impl,deps)</code>.因为我们不知道传入的参数有多少个,但我们可以方便地使用一个<code>deps</code>将其全部注入.另一个常用的是<code>foo.apply( null,argue)</code>当我们将apply的第一个参数设置为null时,此时this就会默认绑定到window.切记使用这种用法时<strong>确保函数foo内没有使用this.</strong> 否则很可能会造成全局污染.如果是第三方库的函数就建议不要使用了,因为你不知道别人的函数是否使用了this(关于这部分内容,下节会继续提到).还有一种常用就是<code>foo.call( this)</code>.这样foo里的this都会指向当前调用的上下文环境.</p>\n<p><strong>API调用的“上下文”:</strong> 第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被称为“上下文”(context)，其作用和 bind(..) 一样，确保你的回调函数使用指定的 this。</p>\n<h4 id=\"2-2-4-new绑定\"><a href=\"#2-2-4-new绑定\" class=\"headerlink\" title=\"2.2.4 new绑定\"></a><strong>2.2.4 new绑定</strong></h4><p>JavaScript 中 new 的机制实际上和面向类的语言完全不同。在 JavaScript 中，构造函数只是一些 使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上， 它们甚至都不能说是一种特殊的函数类型，<strong>它们只是被 new 操作符调用的普通函数而已。实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”。</strong></p>\n<p>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p>\n<ul>\n<li>1,创建(或者说构造)一个全新的对象。</li>\n<li>2,这个新对象会被执行[[原型]]连接。</li>\n<li>3,这个新对象会绑定到函数调用的this。</li>\n<li>4,如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>\n</ul>\n<p>示例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo(<span class=\"number\">2</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( bar.a ); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。<br><strong>说明:对于上面这句话进行解释下,如果在一个函数前面带上 new 关键字来调用， 那么背地里将会创建一个连接到该函数的 prototype 的新对象，this就指向这个新对象；</strong></p>\n<h3 id=\"2-3-优先级\"><a href=\"#2-3-优先级\" class=\"headerlink\" title=\"2.3 优先级\"></a>2.3 优先级</h3><p>直接上结论:<br>new绑定=显示绑定&gt;隐式绑定&gt;默认绑定<br><strong>说明:</strong> new绑定与显示绑定是不能直接进行测试比较,但通过分析发现new绑定内部其实是使用了硬绑定(显示绑定的一种),所以new绑定和显示绑定优先级应该差不多.但话说回来,一般实际使用时,不会这种复杂的交错绑定.所以只需记住下面的判定即可.</p>\n<p><strong>判断this:</strong><br>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断:</p>\n<ul>\n<li>1,函数是否在new中调用(new绑定)?如果是的话this绑定的是新创建的对象。  var bar = new foo()</li>\n<li>2,函数是否通过call、apply(显式绑定)或者硬绑定调用?如果是的话，this绑定的是 指定的对象。var bar = foo.call(obj2)</li>\n<li>3,函数是否在某个上下文对象中调用(隐式绑定)?如果是的话，this 绑定的是那个上 下文对象。var bar = obj1.foo()</li>\n<li>4,如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到 全局对象。var bar = foo()<br>就是这样。对于正常的函数调用来说，理解了这些知识你就可以明白 this 的绑定原理了。</li>\n</ul>\n<h3 id=\"2-4-绑定例外\"><a href=\"#2-4-绑定例外\" class=\"headerlink\" title=\"2.4 绑定例外\"></a>2.4 绑定例外</h3><h4 id=\"2-4-1-被忽略的this\"><a href=\"#2-4-1-被忽略的this\" class=\"headerlink\" title=\"2.4.1 被忽略的this\"></a><strong>2.4.1 被忽略的this</strong></h4><p>如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认绑定规则,this会绑定到window上.<br><strong>使用情景:</strong><br>一种非常常见的做法是使用 apply(..) 来“展开”一个数组(也可以用来方便地参数注入)，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数).通过自带bind方法实现柯里化是很方便的,比自己写要简化好多.</p>\n<p><strong>注意:</strong> </p>\n<ul>\n<li>在 ES6 中，可以用 … 操作符代替 apply(..) 来“展 开”数组，foo(…[1,2]) 和 foo(1,2)是一样的，这样可以避免不必要的 this 绑定。可惜，在 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。<ul>\n<li>当使用null或者undefined进行绑定时,要<strong>确保该函数内没有使用this</strong>,否则此时很容易对全局变量造成破坏!尤其是使用第三方库的方法!</li>\n</ul>\n</li>\n</ul>\n<p><strong>更安全的this</strong><br>如果函数内使用了this,直接使用null则可能会对全局造成破坏.因此我们可以通过创建一个“DMZ”(demilitarized zone，非军事区)对象——它就是一个空的非委托的对象(委托在第 5 章和第 6 章介绍)。让this绑定到这个”DMZ上.这样就不会对全局造成破坏.<br>怎么创建DMZ呢.就是通过<strong>Object.create(null)</strong> 创建一个空对象.这种方法和 {} 很像，但是并不会创建 Object.prototype 这个委托，所以它比 {}“更空”更加安全.</p>\n<p>PS:实际使用一般不会遇到这种情况(也可能是我太菜,没遇到),如果函数内有this,那肯定是有需要调用的变量或函数,直接把它绑定到一个空对象上.那什么都取不到,还有什么意义?所以函数没有this就传入null.如果有this就把它绑定到真正需要它的对象上,而不是一个空对象上.这些是我自己的见解,如果有不妥的,欢迎留言指正.</p>\n<h4 id=\"2-4-2-间接引用\"><a href=\"#2-4-2-间接引用\" class=\"headerlink\" title=\"2.4.2 间接引用\"></a><strong>2.4.2 间接引用</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.a );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span>, <span class=\"attr\">foo</span>: foo &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> p = &#123; <span class=\"attr\">a</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">o.foo(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">(p.foo = o.foo)(); <span class=\"comment\">// 2  其实就是foo()  此时this默认绑定到window</span></span><br></pre></td></tr></table></figure>\n<p>例子中的间接引用其实是对函数的理解不深造成的.其实(p.foo = o.foo)()就是(foo)(),这样就是全局调用foo()所以this默认就绑定到了window上.<br><strong>注意:</strong><br>对于默认绑定来说，决定 this 绑定对象的并不是调用位置是否处于严格模式，而是 函数体是否处于严格模式。如果函数体处于严格模式，this 会被绑定到 undefined，否则 this 会被绑定到全局对象。(对于这段话其实在2.2.1节就应该说了!)</p>\n<h4 id=\"2-4-3-软绑定\"><a href=\"#2-4-3-软绑定\" class=\"headerlink\" title=\"2.4.3 软绑定\"></a><strong>2.4.3 软绑定</strong></h4><p>硬绑定会大大降低函数的灵活性，使用硬绑定之后就无法使用隐式绑定或者显式绑定来修改 this。这时候则需要使用软绑定.<br><strong>Tips:</strong> 这里给的软绑定方法还是挺好的.但是建议还是在自己的代码里使用,并注释清除.以免别人使用,对this错误的判断.</p>\n<h3 id=\"2-5-this词法\"><a href=\"#2-5-this词法\" class=\"headerlink\" title=\"2.5 this词法\"></a>2.5 this词法</h3><p> ES6 中介绍了一种无法使用上面四条规则的特殊函数类型:箭头函数。<br> <strong>箭头函数不使用 this 的四种标准规则，而是根据外层(函数或者全局)作用域来决定 this。</strong>(而传统的this与函数作用域没有任何关系,它只与调用位置的上下文对象有关.这点在本章开头就已经反复强调了.)        </p>\n<p> <strong>重要:</strong></p>\n<ul>\n<li>箭头函数最常用于回调函数中，例如事件处理器或者定时器.</li>\n<li>箭头函数可以像 bind(..) 一样确保函数的 this 被绑定到指定对象</li>\n<li>箭头函数用更常见的词法作用域取代了传统的 this 机制。</li>\n</ul>\n<p><strong>注意:</strong> 这种情况:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">module</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">99</span>,</span><br><span class=\"line\">  bar:<span class=\"built_in\">module</span>.bind(<span class=\"keyword\">this</span>) <span class=\"comment\">//此时bind绑定的this为window.</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"string\">\"window\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.bar())<span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure></p>\n<p>在 ES6 之前我们就已经在使用一种几乎和箭头函数完全一样的模式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; <span class=\"comment\">// lexical capture of this </span></span><br><span class=\"line\">  setTimeout( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"built_in\">console</span>.log( self.a );</span><br><span class=\"line\">         &#125;, <span class=\"number\">100</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; </span><br><span class=\"line\">    a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">foo.call( obj ); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然 self = this 和箭头函数看起来都可以取代 bind(..)，但是从本质上来说，它们想替代的是 this 机制。(的确是这样,我一般会用me替代self.因为少两个单词=.=)</p>\n<p><strong>关于this的编码规范建议:</strong></p>\n<ul>\n<li><ol>\n<li>只使用词法作用域并完全抛弃错误this风格的代码;</li>\n</ol>\n<ul>\n<li><ol start=\"2\">\n<li>完全采用 this 风格，在必要时使用 bind(..)，尽量避免使用 self = this 和箭头函数。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p>在自己实际工作中,其实是两种混用的,绝大部分情况下都会使用词法作用域风格.因为有时候你真的很难做到完全统一.我现在的习惯是,在写任何函数时,开头第一个就是<code>var me =this;</code>这样在看到函数第一眼,就知道:哦,这个函数是用词法作用域风格的.尤其函数内涉及到回调.这样就避免了写着写着发现this绑定到其他地方去了,一个函数里面this不统一的情况.</p>\n<h3 id=\"2-6-小结\"><a href=\"#2-6-小结\" class=\"headerlink\" title=\"2.6 小结\"></a>2.6 小结</h3><p>(这里总结得很好,我就全部copy了)<br>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p>\n<ul>\n<li><ol>\n<li>由new调用?绑定到新创建的对象。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>由call或者apply(或者bind)调用?绑定到指定的对象。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>由上下文对象调用?绑定到那个上下文对象。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>默认:在严格模式下绑定到undefined，否则绑定到全局对象。</li>\n</ol>\n</li>\n</ul>\n<p>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想“更安全”地忽略 this 绑定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。    </p>\n<p>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这其实和 ES6 之前代码中的 self = this 机制一样。     </p>\n<p><strong>特别注意:</strong> 其中最需要注意的就是<strong>当你使用jquery或vue时</strong>,此时this是被动态绑定了的.大多数 jQuery 方法将 this 设置为已选择的 dom 元素。使用 Vue.js时，则方法和计算函数通常将 this 设置为 Vue 组件实例。vue文档中<code>所有的生命周期钩子自动绑定 this 上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () =&gt; this.fetchTodos())。这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同，this.fetchTodos 的行为未定义。</code> 也包括使用第三方ajax时,例如axios.解决方法也很简单,要么使用传统的function或者使用<code>let _this=this</code>进行接管.其实当你使用vue时,你默认的思想就是this指的就是vue实例.所以除了钩子函数和axios里会有点影响外,其余还好.</p>\n<p><strong>PS</strong> 这里再补充说明<br><strong>上下文(对象)与函数作用域的区别于联系:</strong></p>\n<ul>\n<li><strong>上下文：</strong> 可以理解为一个对象，所有的变量都储存在里面.上下文环境是在函数被调用并被引擎执行时创建的.如果你没调用,那么就没有上下文.</li>\n<li><strong>作用域：</strong> 除了全局作用域，只有函数和ES6新增的let,const才能创建作用域.创建一个函数就创建了一个作用域，无论你调用不调用，函数只要创建了，它就有独立的作用域.作用域控制着被调用函数中的变量访问.</li>\n<li><strong>两者:</strong> 作用域是基于函数的，而上下文是基于对象的。作用域涉及到所被调用函数中的变量访问，并且不同的调用场景是不一样的。上下文始终是this关键字有关， 它控制着this的引用。一个作用域下可能包含多个上下文。有可能从来没有过上下文（函数没有被调用）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了(垃圾回收)；有可能同时存在一个或多个（闭包）。</li>\n</ul>\n<h2 id=\"第三章-对象\"><a href=\"#第三章-对象\" class=\"headerlink\" title=\"第三章 对象\"></a>第三章 对象</h2><h3 id=\"3-1-语法\"><a href=\"#3-1-语法\" class=\"headerlink\" title=\"3.1 语法\"></a>3.1 语法</h3><p>对象可以通过两种形式定义:声明(文字)形式(就是常说的对象字面量)和构造形式。</p>\n<ul>\n<li>声明形式(对象字面量):<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> myObj = &#123; </span><br><span class=\"line\">   key: value</span><br><span class=\"line\">   <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>构造形式:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(); </span><br><span class=\"line\">myObj.key = value;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>构造形式和文字形式生成的对象是一样的。唯一的区别是，在文字声明中你可以添加多个 键 / 值对，但是在构造形式中你必须逐个添加属性。<br>PS:其实我们绝大部分情况下都是使用对象字面量形式创建对象.</p>\n<h3 id=\"3-2-类型\"><a href=\"#3-2-类型\" class=\"headerlink\" title=\"3.2 类型\"></a>3.2 类型</h3><p>在JavaScript中一共有6中主要类型(术语是”语言类型”)</p>\n<ul>\n<li>string</li>\n<li>number</li>\n<li>boolean  </li>\n<li>null </li>\n<li>undefined  </li>\n<li>object</li>\n</ul>\n<p><strong>简单数据类型:</strong><br>其中string、boolean、number、null 和 undefined属于简单基本类型,并不属于对象.<br>null 有时会被当作一种对象类型，但是这其实只是语言本身的一个 bug，即对 null 执行typeof null 时会返回字符串 “object”。实际上，null 本身是基本类型。<br><strong>PS:</strong> 原因是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判 断为 object 类型，null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。</p>\n<p><strong>对象:</strong><br>对象除了我们自己手动创建的,JavaScript其实内置了很多对象,也可以说是对象的一个子类型.<br><strong>内置对象:</strong>    </p>\n<ul>\n<li>String </li>\n<li>Number </li>\n<li>Boolean  </li>\n<li>Object </li>\n<li>Function  </li>\n<li>Array </li>\n<li>Date </li>\n<li>RegExp  </li>\n<li>Error</li>\n</ul>\n<p>在 JavaScript 中，这些内置对象实际上只是一些内置函数。这些内置函数可以当作构造函数(由 new 产生的函数调用——参见第 2 章)来使用.<br><strong>几点说明:</strong></p>\n<ul>\n<li>函数就是对象的一个子类型(从技术角度来说就是“可调用的对象”)。JavaScript 中的函数是“一等公民”，因为它们本质上和普通的对象一样(只是可以调用)，所以可以像操作其他对象一样操作函数(比如当作另一个函数的参数)。</li>\n<li>通过字面量形式创建字符串,数字,布尔时,引擎会自动把字面量转换成 String 对象,Number对象,Boolean对象，所以它们是可以访对应对象内置的问属性和方法。</li>\n<li>null 和 undefined 没有对应的构造形式，它们只有文字形式。相反，Date 只有构造，没有文字形式。</li>\n<li>对于 Object、Array、Function 和 RegExp(正则表达式)来说，无论使用文字形式还是构造形式，它们都是对象，不是字面量(这是肯定的,因为不管哪种形式一创建出来就是对象类型,不可能是其他类型,实际上是不存在字面量这一说的)。但是使用构造形式可以提供一些额外选项(内置)。</li>\n<li>Error 对象很少在代码中显式创建，一般是在抛出异常时被自动创建。也可以使用 new Error(..) 这种构造形式来创建，不过一般来说用不着。</li>\n</ul>\n<h3 id=\"3-3-内容\"><a href=\"#3-3-内容\" class=\"headerlink\" title=\"3.3 内容\"></a>3.3 内容</h3><p>对象属性:由一些存储在特定命名位置的(任意类型的)值.<br>属性名:存储在对象容器内部的属性的名称.属性值并不会存在对象内.而是通过属性名(就像指针,从技术角度来说就是引用)来指向这些值真正的存储位置(就像房门号一样).<br><strong>属性名的两种形式:</strong></p>\n<ul>\n<li><ol>\n<li>使用<code>.</code>操作符.也是我们最常用的形式.它通常被称为”属性访问”. <code>.</code> 操作符会要求属性名满足标识符的命名规范.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>使用<code>[&quot;..&quot;]</code>语法进行访问.这个通常被称为”键访问”.<code>[&quot;..&quot;]</code>语法可以接受任意UTF-8/Unicode 字符串作为属性名。并且<code>[&quot;..&quot;]</code>语法使用字符串来访问属性,如果你的属性名是一个变量,则可以使用书中的例子<code>myObject[idx]</code>形式进行访问.这也是最常使用”键访问”的情况.但<strong>如果idx是属性名则还是需写成<code>myObject[&quot;idx&quot;]</code>字符串形式.</strong></li>\n</ol>\n</li>\n</ul>\n<p><strong>注意:</strong> <strong>在对象中，属性名永远都是字符串</strong>。如果你使用 string(字面量)以外的其他值作为属性 名，那它首先会被转换为一个字符串。即使是数字也不例外，虽然在数组下标中使用的的 确是数字，但是在对象属性名中数字会被转换成字符串 .</p>\n<p><strong>补充:</strong> 这里我在书中的例子基础上进行了修改,得到这个例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123; </span><br><span class=\"line\">  a:<span class=\"number\">2</span>,</span><br><span class=\"line\">  idx:<span class=\"number\">111</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> idx=<span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( myObject[idx] ); <span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( myObject[<span class=\"string\">\"idx\"</span>] ); <span class=\"comment\">//111</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( myObject[<span class=\"keyword\">this</span>.idx] );  <span class=\"comment\">// 2 此时this是指向window.[]里的this同样符合上一章所讲的规则</span></span><br><span class=\"line\"><span class=\"comment\">//结果是否和你所想得一样呢?</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-1-可计算属性名\"><a href=\"#3-3-1-可计算属性名\" class=\"headerlink\" title=\"3.3.1 可计算属性名\"></a>3.3.1 <strong>可计算属性名</strong></h4><p>ES6 增加了可计算属性名，可以在文字形式中使用 [] 包裹一个表达式来当作属性名:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">   [prefix + <span class=\"string\">\"bar\"</span>]:<span class=\"string\">\"hello\"</span>, </span><br><span class=\"line\">   [prefix + <span class=\"string\">\"baz\"</span>]: <span class=\"string\">\"world\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myObject[<span class=\"string\">\"foobar\"</span>]; <span class=\"comment\">// hello</span></span><br><span class=\"line\">myObject[<span class=\"string\">\"foobaz\"</span>]; <span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-2-属性与方法\"><a href=\"#3-3-2-属性与方法\" class=\"headerlink\" title=\"3.3.2 属性与方法\"></a>3.3.2 <strong>属性与方法</strong></h4><ul>\n<li>我们经常把对象内部引用的函数称为“方法”(的确如此).</li>\n<li>实际上函数并不属于该对象,它不过是对函数的引用罢了.对象属性访问返回的函数和其他函数没有任何区别(除了可能发生的隐式绑定this到该对象)。</li>\n<li>即使你在对象的文字形式中声明一个函数表达式，这个函数也不会“属于”这个对象—— 它们只是对于相同函数对象的多个引用。</li>\n</ul>\n<h4 id=\"3-3-3-数组\"><a href=\"#3-3-3-数组\" class=\"headerlink\" title=\"3.3.3 数组\"></a>3.3.3 <strong>数组</strong></h4><ul>\n<li>数组支持<code>[]</code>形式访问储存的值,其中<code>[]</code>内的值默认形式为数值下标(为从0开始的整数,也就是常说的索引).例如<code>myArray[0]</code></li>\n<li>数组也是对象，所以虽然每个下标都是整数，你仍然可以给数组添加属性.例如<code>myArray.baz = &quot;baz&quot;</code>.注意:添加新属性后,虽然可以访问,但数组的 length 值不会改变.</li>\n<li>数组可以通过<code>myArray[1]=11;myArray[&quot;2&quot;]=22;</code>这种形式对数组内容进行修改,添加.</li>\n<li>虽然数组也可以和对象一样通过<code>键/值 对</code> 形式来使用.但JS已经对数组的行为和用途进行了优化.所以还是建议使用默认的<code>下标/值 对</code> 形式来使用.</li>\n</ul>\n<h4 id=\"3-3-4-复制对象\"><a href=\"#3-3-4-复制对象\" class=\"headerlink\" title=\"3.3.4 复制对象\"></a>3.3.4 <strong>复制对象</strong></h4><ul>\n<li>复制分为浅拷贝和深拷贝.浅拷贝会对对象中的基本数据类型进行复制(在内存中开辟新的区域),对于对象则是继续引用.而不是重新创建一个”一样的”对象.深拷贝则是对其中的所有内(容包括对象)进行深层次的复制.</li>\n<li>一般情况下我们可以通过JSON来复制对象.<code>var newObj = JSON.parse( JSON.stringify( someObj ) );</code>.但需要指出的是这种方法<strong>对于包含function函数或者Date类型的对象则不管用!</strong></li>\n<li>ES6 定义了 Object.assign(..) 方法来实现浅复制。具体用法在这就不赘述了.</li>\n</ul>\n<h4 id=\"3-3-5-属性描述符\"><a href=\"#3-3-5-属性描述符\" class=\"headerlink\" title=\"3.3.5 属性描述符\"></a>3.3.5 <strong>属性描述符</strong></h4><p>从 ES5 开始，所有的属性都具备了属性描述符。</p>\n<ul>\n<li><strong>查看属性描述符:</strong> 可以使用Object.getOwnPropertyDescriptor( myObject, “a” );方法查看myObject对象里属性a的属性描述符.</li>\n<li><strong>配置属性描述符:</strong> 可以使用Object.defineProperty(..)方法对属性的属性描述符就像配置.举个例子:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> myObject = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( myObject, <span class=\"string\">\"a\"</span>, &#123;</span><br><span class=\"line\">         value: <span class=\"number\">2</span>,</span><br><span class=\"line\">         writable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">\t\t  configurable: <span class=\"literal\">true</span>, </span><br><span class=\"line\">\t\t  enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125; );</span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">//该方法可以配置四个属性描述符</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>注意:</strong> 书中关于<code>属性描述符也被称为“数据描述符”</code>其实是不够准确的.<br>对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter和setter函数对描述的属性。<strong>描述符必须是这两种形式之一；不能同时是两者</strong>。(getter和setter是后面马上要讲到的两个描述符)它们的关系如下:(详情可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">MDN的解释</a>)</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>configurable</th>\n<th>enumerable</th>\n<th>value</th>\n<th>writable</th>\n<th>get</th>\n<th>set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据描述符</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>存取描述符</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p><strong>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。</strong></p>\n<p>value就是该属性对应的值。默认为 undefined。下面分别介绍剩下的三个属性描述符键值:</p>\n<ul>\n<li><strong>1. Writable</strong>   决定是否可以修改属性的值。当被设置为false后,再对属性值进行修改,则会静默失败(silently failed,修改不成功,也不报错)了。如果在严格模式下，则会报出TypeError错误.</li>\n<li><strong>2. Configurable</strong> 决定属性描述符是否可配置.如果为true,就可以使用 defineProperty(..) 方法来修改属性描述符.注意:不管是不是处于严格模式，修改一个不可配置的属性描述符都会出错。并且<strong>把 configurable 修改成 false 是单向操作，无法撤销!</strong> 但是有个例外即便属性是 configurable:false，我们还是可以 把 writable 的状态由 true 改为 false，但是无法由 false 改为 true。除了无法修改，<strong>configurable:false 还会禁止删除这个属性</strong>.</li>\n<li><strong>3. Enumerable</strong>  决定该属性是否会出现在对象的属性枚举中.比如说 for..in 循环。如果把 enumerable 设置成 false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。相对地，设置成 true 就会让它出现在枚举中。</li>\n</ul>\n<h4 id=\"3-3-6-不变性\"><a href=\"#3-3-6-不变性\" class=\"headerlink\" title=\"3.3.6 不变性\"></a>3.3.6 <strong>不变性</strong></h4><p>除了上面提到的Object.defineProperty(..),ES5还可以通过很多种方法来实现属性或者对象的不可变.<br><strong>注意:</strong> <strong>这些所有方法都是只能浅不变</strong>,如果目标对象引用了其他对象(数组、对象、函数，等)，其他对象的内容不受影响，仍然是可变的.类似于浅拷贝.</p>\n<p><strong>说明:</strong>  <strong>在 JavaScript 程序中很少需要深不可变性。</strong> 有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</p>\n<p><strong>方法:</strong></p>\n<ul>\n<li><strong>1. 对象常量(不可改)</strong> 结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性(不可修改、重定义或者删除)</li>\n<li><strong>2. 禁止扩展(不可增)</strong> 使用 Object.prevent Extensions(myObject),可以禁止一个对象添加新属性并且保留已有属性.在非严格模式下，创建属性 b 会静默失败。在严格模式下，将会抛出 TypeError 错误。</li>\n<li><strong>3. 密封(不可配置,但可修改)</strong> 使用Object.seal(..) 会创建一个“密封”的对象，这个方法实际上会在一个现有对象上调用Object.preventExtensions(..) 并把所有现有属性标记为 <strong>configurable:false</strong>。密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性(虽然可以修改属性的值)。</li>\n<li><strong>4. 冻结(不可配置,也不可修改)</strong> Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用 Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们的值。这个方法是你可以应用在对象上的级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改(不过就像我们之前说过的，这个对象引用的其他对象是不受影响的)。</li>\n</ul>\n<p><strong>注意:</strong> 你可以“深度冻结”一个对象(连引用的对象也冻结)，具体方法为，首先在这个对象上调用 Object.freeze(..)， 然后遍历它引用的所有对象并在这些对象上调用 Object.freeze(..)。但是一定要谨慎!因为你引用的对象可能会在其他地发也被引用.</p>\n<p><strong>说明:</strong> 在 JavaScript 程序中很少需要深不可变性。有些特殊情况可能需要这样做， 但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</p>\n<h4 id=\"3-3-7-Get\"><a href=\"#3-3-7-Get\" class=\"headerlink\" title=\"3.3.7 [[Get]]\"></a>3.3.7 <strong>[[Get]]</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123; </span><br><span class=\"line\">   a: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>myObject.a是怎么取到值2的?</strong><br>myObject.a 通过对象默认内置的[[Get]] 操作(有点像函数调用:<a href=\"\">[Get]</a>).首先它会在对象中查找是否有名称相同的属性， 如果找到就会返回这个属性的值。如果没有找到名称相同的属性，按照 [[Get]] 算法的定义会执行另外一种非常重要的行为。其实就是遍历可能存在的 [[Prototype]] 链，也就是在原型链上寻找该属性。如果仍然都没有找到名称相同的属性，那 [[Get]] 操作会返回值 undefined.</p>\n<p><strong>注意:</strong> 如果你引用了一个当前词法作用域中不存在的变量，并不会像对象属性一样返回 undefined，而是会抛出一个 ReferenceError 异常.</p>\n<h4 id=\"3-3-8-Put\"><a href=\"#3-3-8-Put\" class=\"headerlink\" title=\"3.3.8 [[Put]]\"></a>3.3.8 <strong>[[Put]]</strong></h4><p>既然有可以获取属性值的 [[Get]] 操作，就一定有对应的 [[Put]] 来设置或者创建属性.        </p>\n<p> [[Put]] 被触发时的操作分为两个情况:1. 对象中已经存在这个属性 2. 对象中不存在这个属性.</p>\n<p>如果对象中已经存在这个属性,[[Put]] 算法大致会检查下面这些内容:</p>\n<ul>\n<li><ol>\n<li>属性是否是访问描述符(参见下一节)?如果是并且存在setter就调用setter。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>属性的数据描述符中writable是否是false?如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>如果都不是，将该值设置为属性的值。</li>\n</ol>\n</li>\n</ul>\n<p>如果对象中不存在这个属性，[[Put]] 操作会更加复杂。会在第 5 章讨论 [[Prototype]] 时详细进行介绍。</p>\n<h4 id=\"3-3-9-Getter和Setter\"><a href=\"#3-3-9-Getter和Setter\" class=\"headerlink\" title=\"3.3.9 Getter和Setter\"></a>3.3.9 <strong>Getter和Setter</strong></h4><p>对象默认的 [[Put]] 和 [[Get]] 操作分别可以控制属性值的设置和获取。<br>目前我们还无法操作[[Get]] 和 [[Put]]来改写整个对象 ,但是在ES5中可以使用 getter 和 setter 改写<strong>部分</strong>默认操作,<strong>只能应用在单个属性上，无法应用在整个对象上</strong>。    </p>\n<p><strong>注意:</strong> 书中后面说的<code>访问描述符</code>就是<code>存取描述符</code>.关于属性描述符,存取描述符及数据描述符可以查看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\">MDN的解释</a>)</p>\n<p><strong>getter:</strong><br>getter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Get]]操作.<strong>当你设置getter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.</strong></p>\n<p><strong>语法:</strong> <code>{get prop() { ... } }</code>或<code>{get [expression]() { ... } }</code>.其中<code>prop</code>:要设置的属性名. <code>expression</code>:从 ECMAScript 2015 开始可以使用计算属性名.<br><strong>使用方式:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1111</span>, <span class=\"comment\">//在后面会发现myObject.a为2,这是因为设置了getter所以忽略了value特性.</span></span><br><span class=\"line\">  <span class=\"comment\">//方式一:在新对象初始化时定义一个getter</span></span><br><span class=\"line\">  get a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( </span><br><span class=\"line\">  myObject, <span class=\"comment\">// 目标对象 </span></span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>, <span class=\"comment\">// 属性名</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方式二:使用defineProperty在现有对象上定义 getter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a * <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 确保 b 会出现在对象的属性列表中</span></span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a = <span class=\"number\">3</span>;  <span class=\"comment\">//因为设置了getter所以忽略了writable特性.所以这里赋值没成功</span></span><br><span class=\"line\">myObject.a; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.b; <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> myObject.a;<span class=\"comment\">//可以使用delete操作符删除</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>setter:</strong><br>setter 是一个隐藏函数，会在获取属性值时调用。同时会覆盖该单个属性默认的 [[Put]]操作(也就是赋值操作).<strong>当你设置setter时,不能同时再设置value或writable,否则就会产生一个异常.并且当你设置getter或setter时,JavaScript 会忽略它们的 value 和 writable 特性.</strong>        </p>\n<p><strong>语法:</strong> <code>{set prop(val) { . . . }}</code>或<code>{set [expression](val) { . . . }}</code>.其中<code>prop</code>:要设置的属性名. <code>val</code>:用于保存尝试分配给prop的值的变量的一个别名。<code>expression</code>:从 ECMAScript 2015 开始可以使用计算属性名.<br><strong>使用方式:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注意:通常来说 getter 和 setter 是成对出现的(只定义一个的话 通常会产生意料之外的行为):</span></span><br><span class=\"line\">  <span class=\"comment\">//方式一:在新对象初始化时定义一个setter</span></span><br><span class=\"line\">  set a(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._a_ = val * <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  get a() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._a_ </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( </span><br><span class=\"line\">  myObject, <span class=\"comment\">// 目标对象 </span></span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>, <span class=\"comment\">// 属性名</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123; <span class=\"keyword\">this</span>._b_ = val * <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 方式二:使用defineProperty在现有对象上定义 setter</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._b_ &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 确保 b 会出现在对象的属性列表中</span></span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">myObject.a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">myObject.b = <span class=\"number\">3</span>;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject.a); <span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject.b);<span class=\"comment\">//9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject._a_);<span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject._b_);<span class=\"comment\">//9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> myObject.a;<span class=\"comment\">//可以使用delete操作符删除</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-3-10-存在性\"><a href=\"#3-3-10-存在性\" class=\"headerlink\" title=\"3.3.10 存在性\"></a>3.3.10 <strong>存在性</strong></h4><p><strong>属性存在性:</strong><br>如何判断一个对象是否存在某个属性(准确来说是<strong>检查这个属性名是否存在</strong>),这时就需要用到:</p>\n<ul>\n<li><ol>\n<li><code>in</code>操作符<br>in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中(参见第 5 章)。</li>\n</ol>\n<ul>\n<li><ol start=\"2\">\n<li>hasOwnProperty(..)<br>hasOwnProperty(..) 只会检查属性是否在 myObject 对象中，不会检查 [[Prototype]] 链。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意:</strong></p>\n<ul>\n<li>1.如果有的对象可能没有连接到 Object.prototype( 通过Object. create(null) 来创建——参见第 5 章)。在这种情况下，形如myObejct.hasOwnProperty(..) 就会失败。这时可以使用一种更加强硬的方法来进行判断:Object.prototype.hasOwnProperty. call(myObject,”a”)，它借用基础的 hasOwnProperty(..) 方法并把它显式绑定(参见第2章)到 myObject 上。</li>\n<li>2.对于数组来说,不要使用in操作符,因为它检查的是属性名,在数组中属性名就是索引,它并不是我们所关注的重点.对于数组我们更关注的是它所存的值,所以对于数组检查某个值是否存在还是采用indexOf方法.</li>\n</ul>\n<p><strong>属性可枚举性:</strong><br>如果一个属性存在,且它的enumerable 属性描述符为true时.则它是可枚举的.并且可以被for..in 循环.<br>一个属性不仅仅需要存在,还需要它的enumerable 为true才是可枚举的,才能被for…in遍历到.<br><strong>注意:</strong> for…in不适合对数组进行遍历,对数组的遍历还是使用传统的for循环.     </p>\n<p>对属性的可枚举性判断,则需要用到以下几种方法:</p>\n<ul>\n<li><ol>\n<li>propertyIsEnumerable(..) 会检查给定的属性名是否直接存在于对象中(而不是在原型链上)并且满足 enumerable:true。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Object.keys(..) 会返回一个数组，包含所有可枚举属性.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Object.getOwnPropertyNames(..)会返回一个数组，包含所有属性，无论它们是否可枚举。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-4-遍历\"><a href=\"#3-4-遍历\" class=\"headerlink\" title=\"3.4 遍历\"></a>3.4 遍历</h3><p>关于这节我觉得还是以理清for..in和for..of为主.后面延伸的@@iterator及Symbol.iterator的使用,没必要过于深究.注意书中123页第二行<code>done 是一个布尔值，表示是否还有可以遍历的值。</code>有个错误,应该改成<code>done 是一个布尔值，表示遍历是否结束。</code>否则你在看后面它的说明时会感觉到自相矛盾.这里我也是以for..in和for..of为主进行说明,也更贴近我们实际使用.</p>\n<p><strong>for..in</strong></p>\n<ul>\n<li>for..in 循环可以用来遍历对象的可枚举属性列表(<strong>包括 [[Prototype]] 链</strong>)。</li>\n<li>实际上for..in遍历的并不是属性值,而是属性名(即键名 key).所以你想获取属性值还是需要手动使用obj[key]来获取.</li>\n<li>一般在遍历对象时,推荐使用for..in.当然数组也是可以使用for..in的.在遍历数组时,推荐还是使用for..of.</li>\n</ul>\n<p><strong>for..of</strong></p>\n<ul>\n<li>ES6 增加了一种用来遍历<strong>数组</strong>的 for..of 循环语法(如果对象本身定义了迭代器的话也可以遍历对象)</li>\n<li>for..of与for..in最大的不同点是,<strong>它循环的是属性值,而不是属性名.不过它只循环数组里存放的值,不会涉及到对象里的key.</strong>(关于这个我后面的例子里会说具体对比明的)</li>\n<li>for..of 循环首先会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的next() 方法来遍历所有返回值。数组有内置的 @@iterator，(对象没有,所以不能使用for..of,除非我们自己定义一个)因此 for..of 可以直接应用在数组上。</li>\n</ul>\n<p><strong>例子比较</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'shotCat'</span>,<span class=\"number\">111</span>,&#123;<span class=\"attr\">a</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">b</span>:<span class=\"string\">'2'</span>&#125;]</span><br><span class=\"line\">arr.say=<span class=\"string\">\"IG niu pi!\"</span></span><br><span class=\"line\"><span class=\"comment\">//使用for..in循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[index]);<span class=\"comment\">//shotCat  111  &#123;a:'1',b:'2'&#125;  IG niu pi!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用for..of循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);<span class=\"comment\">//shotCat  111  &#123;a:'1',b:'2'&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//注意 for..of并没有遍历得到` IG niu pi!`.原因我前面说过`它只循环数组里存放的值,不会涉及到对象里的key.`更不用说 [[Prototype]] 链.(for..in则会)</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>如何让对象也能使用for..of ?</strong><br>你可以选择使用书中的自己通过Object.defineProperty()定义一个Symbol.iterator属性来实现.这里我就不赘述了.也是最接近原生使用感受的.不过我这里要介绍一个稍微简单点的方法来实现.就是使用上节讲到的Object.keys()搭配使用.举个例子:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> shotCat=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'shotCat'</span>,</span><br><span class=\"line\">    age:<span class=\"string\">'forever18'</span>,</span><br><span class=\"line\">    info:&#123;</span><br><span class=\"line\">\tsex:<span class=\"string\">'true man'</span>,</span><br><span class=\"line\">    city:<span class=\"string\">'wuhan'</span>,</span><br><span class=\"line\">    girlFriend:<span class=\"string\">'新垣结衣!'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.keys(shotCat))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用Object.keys()方法获取对象key的数组</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key+<span class=\"string\">\": \"</span>+shotCat[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-小结-1\"><a href=\"#3-5-小结-1\" class=\"headerlink\" title=\"3.5 小结\"></a>3.5 小结</h3><p>书中小结总结得挺全的,这里我就搬运下</p>\n<ul>\n<li>JavaScript 中的对象有<strong>字面形式</strong>(比如 var a = { .. })和<strong>构造形式</strong>(比如 var a = new Array(..))。字面形式更常用，不过有时候构造形式可以提供更多选项。</li>\n<li>对象是 6 个(或者是 7 个，取决于你的观点)基础类型之一。对象有包括 function 在内的子类型，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。</li>\n<li>对象就是键 / 值对的集合。可以通过 .propName 或者 [“propName”] 语法来获取属性值。访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作(在设置属性值时是 [[Put]])， [[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话它还会查找 [[Prototype]] 链(参见第 5 章)。</li>\n<li>属性的特性可以通过属性描述符来控制，比如 writable 和 configurable。此外，可以使用 Object.preventExtensions(..)、Object.seal(..) 和 Object.freeze(..) 来设置对象(及其属性)的不可变性级别。</li>\n<li>属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。此外，属性可以是可枚举或者不可枚举的，这决定了它们是否会出现在 for..in 循环中。</li>\n<li>可以使用 ES6 的 for..of 语法来遍历数据结构(数组、对象，等等)中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。</li>\n</ul>\n<h2 id=\"第四章-混合对象”类”\"><a href=\"#第四章-混合对象”类”\" class=\"headerlink\" title=\"第四章 混合对象”类”\"></a>第四章 混合对象”类”</h2><p><strong>注意:</strong> 正如书中提示的那样,整章一半以上几乎都是讲面向对象和类的概念.会读得人云里雾里,给人<code>哦,也许大概就是这样子</code>的感觉.后面我还是会对那些抽象的概念找到在JavaScript里对应的”立足点”,不至于对这些概念太”飘”.</p>\n<h3 id=\"4-1-类理论\"><a href=\"#4-1-类理论\" class=\"headerlink\" title=\"4.1 类理论\"></a>4.1 类理论</h3><p>说明:</p>\n<ul>\n<li>类其是描述了一种代码的组织结构形式.</li>\n<li>在js中类常见的就是构造函数,也可以是通过ES6提供的class关键字;继承就是函数;实例化就是对象,常见的就是通过new构造函数实现的.</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b48db6fb628b?w=1178&amp;h=695&amp;f=png&amp;s=60553\" alt=\"类、继承和实例化\"></p>\n<p><strong>注意:</strong> Javascript语言不支持“类”，所谓的”类”也是模拟出的“类”。即使是ES6引入的”类”实质上也是 JavaScript 现有的基于原型的继承的语法糖。</p>\n<h4 id=\"4-1-1-“类”设计模式\"><a href=\"#4-1-1-“类”设计模式\" class=\"headerlink\" title=\"4.1.1 “类”设计模式\"></a>4.1.1 <strong>“类”设计模式</strong></h4><p><strong>一句话</strong>:类其实也是一种设计模式!</p>\n<ul>\n<li>类并不是必须的编程基础,而是一种可选的代码抽象.</li>\n<li>有些语言(比如 Java)并不会给你选择的机会，类并不是可选的——万物皆是类。</li>\n<li>其他语言(比如 C/C++ 或者 PHP)会提供过程化和面向类这两种语法，开发者可以选择其中一种风格或者混用两种风格。</li>\n</ul>\n<h4 id=\"4-1-2-JavaScript中的“类”\"><a href=\"#4-1-2-JavaScript中的“类”\" class=\"headerlink\" title=\"4.1.2 JavaScript中的“类”\"></a>4.1.2 <strong>JavaScript中的“类”</strong></h4><p>JavaScript 只有一些近似类的语法元素 (比如 new 和 instanceof)，不过在后来的 ES6 中新增了一些元素，比如 class 关键字,其实质上也是 JavaScript 现有的基于原型的继承的语法糖。也不是真正的类.</p>\n<h3 id=\"4-2-类的机制\"><a href=\"#4-2-类的机制\" class=\"headerlink\" title=\"4.2 类的机制\"></a>4.2 <strong>类的机制</strong></h3><p>这部分书中的描述,我理解起来也比较费劲,主要是它提到的栈,堆与我理解中内存里的栈,堆相冲突了.这里简单说下我的理解,如有误,感激指正.</p>\n<p>stack类其实是一种数据结构.它可以储存数据,并提供一些公用的方法(这和上面提到的类很相似).但是stack类其实只是一个抽象的表示,你想对它进行操作,就需要先对它进行实例化.</p>\n<h4 id=\"4-2-1-建造\"><a href=\"#4-2-1-建造\" class=\"headerlink\" title=\"4.2.1 建造\"></a>4.2.1 <strong>建造</strong></h4><p>这节主要就是说明”类”和”实例”的关系.<br>在JavaScript里”类”主要是构造函数,”实例”就是对象.    </p>\n<p>一个类就像一张蓝图。为了获得真正可以交互的对象，我们必须按照类来实例化一个东西，这个东西(对象)通常被称为实例，有需要的话，我们可以直接在实例上调用方法并访问其所有公有数据属性。</p>\n<p>总而言之:类通过实例化得到实例对象.</p>\n<h4 id=\"4-2-2-构造函数\"><a href=\"#4-2-2-构造函数\" class=\"headerlink\" title=\"4.2.2 构造函数\"></a>4.2.2 <strong>构造函数</strong></h4><ul>\n<li>类实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为构造函数。</li>\n<li>实例就是由构造函数实例化的: new 构造函数.</li>\n<li>构造函数大多需要用 new 来调，这样语言引擎才知道你想要构造一个新的类实例。</li>\n<li>构造函数会返回一个对象,这个对象就是实例.这个对象可以调用类的方法.</li>\n</ul>\n<h3 id=\"4-3-类的继承\"><a href=\"#4-3-类的继承\" class=\"headerlink\" title=\"4.3 类的继承\"></a>4.3 类的继承</h3><p>在面向类的语言中，你可以先定义一个类，然后定义一个继承前者的类。后者通常被称为“子类”，前者通常被称为“父类”。子类可以继承父类的行为,并且可以根据自己的需求,修改继承的行为(一般并不会修改父类的行为).注意:我们讨论的父类和子类并不是实例,在JavaScript里类一般都是构造函数。</p>\n<h4 id=\"4-3-1-多态\"><a href=\"#4-3-1-多态\" class=\"headerlink\" title=\"4.3.1 多态\"></a>4.3.1 <strong>多态</strong></h4><p>大概你看了它的”解释”,对多态还是懵懵懂懂.这里我再解释下:<br><strong>什么是多态?</strong><br>同一个操作，作用于不同的对象，会产生不同的结果。发出一个相同的指令后，不同的对象会对这个指令有不同的反应，故称为多态。<br><strong>说明:</strong> 书中例子中的inherited其实就是相当于super.并且注意书中的这些例子都是<strong>伪代码!</strong> 并不是真的在JavaScript里就是这样实现的.补充:这里是关于<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super\" target=\"_blank\" rel=\"noopener\">super的mdn链接.</a></p>\n<ul>\n<li><strong>多态:</strong><ul>\n<li><strong>相对性:</strong> 其实相对性就是子类相对于父类的引用(例如使用super实现引用),并且子类对父类的引用并不会对父类的行为造成任何影响(并不会对父类<strong>自身</strong>的行为进行重新定义),例如书中例子子类对drive()的引用.</li>\n<li><strong>可重复定义:</strong> 子类继承父类的某个方法,并可以对这个方法进行再次定义,例如书中子类对drive()中的output进行修改.<code>当调用方法时会自动选择合适的定义</code>,这句话怎么理解,当子类实例化后,执行drive()方法时,它并不会直接去执行父类的drive().而是子类上的drive().简单来说就是实例来源于那个类,它就使用那个类的方法.</li>\n</ul>\n</li>\n</ul>\n<p><strong>说明:</strong> </p>\n<ul>\n<li>在 JavaScript 中“类”是属于构造函数的(类似 Foo.prototype… 这样的类型引用)。由于 JavaScript中<strong>父类和子类的关系只存在于两者构造函数对应的 .prototype 对象中</strong>，因此它们的构造函数之间并不存在直接联系，从而无法简单地实现两者的相对引用(在 ES6 的类中可以通过 super来“解决”这个问题，参见附录 A)。</li>\n<li><strong>多态并不表示子类和父类有关联，子类得到的只是父类的一份副本。类的继承其实就是复制。</strong></li>\n<li>其实这里讨论的这些概念其实在我们实际工作中,已经使用了无数次,只是现在你需要理解”原来你是叫这个名字啊!”</li>\n</ul>\n<h4 id=\"4-3-2-多重继承\"><a href=\"#4-3-2-多重继承\" class=\"headerlink\" title=\"4.3.2 多重继承\"></a>4.3.2 <strong>多重继承</strong></h4><p><strong>多重继承:</strong> 一个子类可以继承来自多个父类的方法.<br><strong>多重继承引发的问题:</strong> 多重继承可能会出现,多个父类中方法名冲突的问题,这样<code>子类</code>到底引用哪个方法?<br><strong>多重继承与JavaScript:</strong> JavaScript本身并没有提供多重继承功能.但它可以通过其他方法来达到多重继承的效果.</p>\n<h3 id=\"4-4-混入\"><a href=\"#4-4-混入\" class=\"headerlink\" title=\"4.4 混入\"></a>4.4 <strong>混入</strong></h3><p>JavaScript 中只有对象，并不存在可以被实例化的“类”。一个对象并不会被复制到其他对象，它们会被关联起来(参见第 5 章)(其实就是引用,所以它的多态是”相对”的)。<br>由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来模拟类的复制行为，这个方法就是混入(<strong>就是通过混入来模拟实现类的多重继承</strong>)。</p>\n<h4 id=\"4-4-1-显式混入\"><a href=\"#4-4-1-显式混入\" class=\"headerlink\" title=\"4.4.1 显式混入\"></a>4.4.1 <strong>显式混入</strong></h4><p><strong>郑重提醒:</strong>     书中这里的类都是对象形式的.例子里的sourceObj, targetObj,这就可能造成一个”误导”,在JavaScript里是<strong>没有真正的类</strong>,所谓的类也不过是我们模拟出来的”类”,不过是一种语法糖(包括ES6里的class).在JavaScript里”所谓的类”经常是一个构造函数,你并不能这样进行遍历,只能对它的实例对象进行这种操作.不要被书中例子带进去了,不要混淆,毕竟我们最终使用的是JavaScript(而不是其他面向对象的语言.),它里面的类常常并不是一个对象!</p>\n<p><strong>显式混入:</strong>  书中没有给出明确的显式混入的定义,但是读完整章.基本就知道什么是显式混入了.显式混入就是通过类似mixin()方法,显式地将父对象属性逐一复制,或者有选择地复制(即例子中的存在性检查)到子对象上.          </p>\n<p><strong>显式混入常用方法:</strong> 就是书中的例子, 首先有子对象,并对其进行特殊化(定义自己的属性或方法).然后再通过mixin()方法将父对象有选择地复制(即存在性检查,过滤子对象已有的属性,避免冲突)到子对象上.</p>\n<p><strong>显式混入注意点:</strong><br>显式混入时,切记一点你要<strong>避免父对象的属性与子对象特殊化的属性冲突</strong>.这就是为什么例子中要进行存在性检查,以及后面要说的混合复制,可能存在的重写风险.</p>\n<p><strong>1. 再说多态</strong>(其实说的就是js里的多态)<br><strong>显式多态:</strong> 将父对象里的方法通过显式绑定到子对象上.就是显式多态.例如书中的例子:Vehicle.drive.call( this )。<strong>显式多态也是为了JS来模拟实现多重继承的!</strong><br><strong>说明:</strong> 在ES6之前是没有相对多态的机制。所以就使用call这种进行显式绑定实现显式动态.注意JavaScript里实现多态的方法也被称为”伪多态”.所以不要对后面突然冒出的伪多态概念而一脸懵逼(其实整本书经常做这样的事)     </p>\n<p><strong>显式多态(伪多态)的缺陷:</strong> 因为在JavaScript 中存在屏蔽(实际是函数引用的上下文不同),所以在引用的时候就需要使用显式伪多态的方法创建一个函数关联.   这些都会增加代码的复杂度和维护难度(过多的this绑定,真的会让代码很难读)。</p>\n<p><strong>2. 混合复制</strong>(显式混入另一种不常用方法)<br>前面的显式混入的方法是先有子对象并进行特殊化,然后再有选择地复制父对象属性.这个不常用的方法则是反过来的,结合书中例子,它先用一个空对象<strong>完全复制</strong>父对象的属性,然后该对象复制特殊化对象的属性,最后得到子对象.这种方法明显是比第一种麻烦的,并且在复制特殊化对象时,可能会对之前重名的属性(即复制得到的父对象属性)进行重写覆盖.所以这种方法是存在风险,且效率低下的.</p>\n<p><strong>显式混入的缺陷:</strong></p>\n<ul>\n<li><ol>\n<li><strong>无法做到真正的复制:</strong> 如果复制的对象中存在对函数的引用,那么子对象得到的是和父对象一样的,对同一个函数的引用.如果某个子对象对函数进行了修改,那么父对象及其他子对象都会受到影响.很明显这是不安全的.原因是JavaScript 中的函数无法进行真正地复制，你只能复制对共享函数对象的引用.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>函数名和属性名同名:</strong> 如果混入多个对象,则可能会出现这种情况.目前现在仍没有比较好的方式来处理函数和属性的同名问题(提问:这种情况下谁的优先级更高?滑稽脸)。</li>\n</ol>\n</li>\n</ul>\n<p><strong>3. 寄生继承</strong><br>显式混入模式的一种变体被称为“寄生继承”，它既是显式的又是隐式的.<br>首先会复制一份父类(对象)的定义，然后混入子类(对象)的定义(如果需要的话保留到父类的特殊引用)，然后用这个复合对象构建实例。<br><strong>说明:</strong> 寄生继承与混合复制是很相似的,最大的区别是寄生继承是通过实例化构造函数(JS中的”类”)来实现复制的.</p>\n<h4 id=\"4-4-2-隐式混入\"><a href=\"#4-4-2-隐式混入\" class=\"headerlink\" title=\"4.4.2 隐式混入\"></a>4.4.2 <strong>隐式混入</strong></h4><p><strong>隐式混入:</strong> 它与显示混入最大的区别,就是它没有明显的对父类(对象)属性进行复制的过程.它是通过在构造函数调用或者方法调用中使用显式绑定例如: Something.cool.call( this)来实现混入(多重继承).其本质就是通过改变this指向来实现混入.</p>\n<h3 id=\"4-5-小结\"><a href=\"#4-5-小结\" class=\"headerlink\" title=\"4.5 小结\"></a>4.5 <strong>小结</strong></h3><p>整章的重点其实就是让你理解什么叫类.除了最后一小节的混入和JavaScript有那么一点点关系.其余的小结和JavaScript都没什么关系.重要的是理解类这种思想和设计模式.<br><strong>重点:</strong></p>\n<ul>\n<li>1.<strong>类意味着复制!</strong></li>\n<li><ol start=\"2\">\n<li>传统的类被实例化时，它的行为会被复制到实例中。类被继承时，行为也会被复制到子类中。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>多态(在继承链的不同层次名称相同但是功能不同的函数)看起来似乎是从子类引用父类，但是本质上引用的其实是复制的结果。</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>JavaScript 并不会(像类那样)自动创建对象的副本。(你只能自己手动复制,而且复制的还不彻底!)</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li><strong>混入模式(无论显式还是隐式)可以用来模拟类的复制行为</strong>，但是通常会产生丑陋并且脆弱的语法，比如显式伪多态(OtherObj.methodName.call(this, …))，这会让代码更加难 懂并且难以维护。</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>显式混入实际上无法完全模拟类的复制行为，因为对象(和函数!别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。忽视这一点会导致许多问题。</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>在 JavaScript 中模拟类是得不偿失的，虽然能解决当前的问题，但是可能会埋下更多的隐患。(但实际,我们用得却很多)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"第五章-原型\"><a href=\"#第五章-原型\" class=\"headerlink\" title=\"第五章 原型\"></a>第五章 原型</h2><p>注意:本章的前提是你已经比较熟悉原型及原型链.不太熟或者不知道的可以,通过<a href=\"https://juejin.im/post/5835853f570c35005e413b19\" target=\"_blank\" rel=\"noopener\">这篇文章</a>熟悉下.  </p>\n<h3 id=\"5-1-Prototype\"><a href=\"#5-1-Prototype\" class=\"headerlink\" title=\"5.1 [[Prototype]]\"></a>5.1 <code>[[Prototype]]</code></h3><p>JavaScript 中的对象有一个特殊的 [[Prototype]] 内置属性，其实就是对于其他对象的引用(一般就是其构造函数prototype属性的引用)。几乎所有的对象在创建时 [[Prototype]] 属性都会被赋予一个非空的值。<br><strong>吐槽:</strong> 书中有这样一句话 “注意:很快我们就可以看到，对象的 [[Prototype]] 链接可以为空，虽然很少见。”我前前后后看了三遍都没找到它所说的<code>对象的 [[Prototype]] 链接可以为空.</code>的情况!应该是作者写忘记了.ok,这里我来说下<code>对象的 [[Prototype]] 链接可以为空</code>的情况.就是通过Object.create(null)得到的对象.它的 [[Prototype]] 是为空的.应该说它的所有都是空的.为什么?因为null是原型链的顶端.它是没有[[Prototype]]的.对应的可以对比下<code>console.log(Object.create({}))</code>和<code>console.log(Object.create(null))</code></p>\n<p><strong>[[Prototype]]有什么用?</strong><br>我原以为作者会说可以作为存放实例对象的公共属性,然后像类一样讲得更深刻点.不过这次只是说了它表明的作用.     </p>\n<p><strong>作用:</strong> 就是存放哪些不在对象自身的属性. 当我们访问一个对象的属性时,此时对象的内部默认操作[[Get]],首先会检查对象本身是否有这个属性，如果有的话就使用它。如果没有的话,[[Get]] 就会继续访问对象的 [[Prototype]] 链.([[Prototype]]其实就是其构造函数的prototype属性.也是一个对象.)如果找到,就返回该属性值.如果没有就继续寻找下一个[[Prototype]]链.直到找完整条[[Prototype]]链.还是没有的话,[[Get]] 就会返回undefined.</p>\n<p><strong>补充:</strong></p>\n<ul>\n<li><strong>使用 for..in 遍历对象时</strong> 任何可以通过原型链访问到 (并且是 enumerable:true)的属性都会被枚举。(其实这个在第三章里我说过)</li>\n<li><strong>使用 in 操作符</strong> 同样会查找对象的整条原型链(<strong>无论属性是否可枚举</strong>)</li>\n</ul>\n<h4 id=\"5-1-1-Object-prototype\"><a href=\"#5-1-1-Object-prototype\" class=\"headerlink\" title=\"5.1.1 Object.prototype\"></a>5.1.1 <strong>Object.prototype</strong></h4><p>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype。(Object.prototype的[[Prototype]] 最终会指向null.null就是最后的终点).<br>这个 Object.prototype 对象，包含了 JavaScript 中许多通用的功能,例如:toString() , valueOf(), hasOwnProperty(..)和 isPrototypeOf(..)。</p>\n<h4 id=\"5-1-2-属性设置和屏蔽\"><a href=\"#5-1-2-属性设置和屏蔽\" class=\"headerlink\" title=\"5.1.2 属性设置和屏蔽\"></a>5.1.2 <strong>属性设置和屏蔽</strong></h4><p><strong>说明:</strong> 看完本节时,切记不要对<code>myObject.foo = &quot;bar&quot;</code>这种简单的对象属性赋值产生顾虑和疑惑.这种赋值绝对不会对原型链产生任何影响!基本也不会出现赋值不成功的情况.<strong>如果有人敢在团队项目里修改对象的属性描述符,早就被拖出去打死了!!!</strong> 这部分可以看做补充知识,知道有这些奇葩设定就行.其实<strong>这节更应该关注的是<code>myObject.foo</code>的返回值.</strong><br><strong>注意:</strong> 书中提到的动词<code>屏蔽</code>其实指的就是在对象上创建同名属性(原型链上已有该属性).注意不要被绕晕了.还有++就相当于myObject.a=myObject.a+1,注意分解就行,不存在什么特别需要当心的.</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b5220c3a82ce?w=1375&amp;h=962&amp;f=png&amp;s=207062\" alt=\"\"></p>\n<h3 id=\"5-2-“类”\"><a href=\"#5-2-“类”\" class=\"headerlink\" title=\"5.2 “类”\"></a>5.2 “类”</h3><ul>\n<li>JavaScript里只有对象,没有类!</li>\n<li>JavaScript不需要通过类来抽象对象.而是自己直接创建对象,并定义对象的行为.</li>\n</ul>\n<h4 id=\"5-2-1-“类”函数\"><a href=\"#5-2-1-“类”函数\" class=\"headerlink\" title=\"5.2.1 “类”函数\"></a>5.2.1 <strong>“类”函数</strong></h4><p>吐槽:模仿类竟然被说成奇怪的无耻滥用!?不这样做,js那些高级用法怎么实现?怎么会有现在前端的百花齐放(轮子满地跑)?这也是冒得办法的办法啊!毕竟当时js只是小众,不指望它有多大能耐.毕竟只是一个人用7天”借鉴”出来的东西.</p>\n<p><strong>“类”函数:</strong> JavaScript用来模仿类的函数就被称为类函数,其实就是我们常说的构造函数.        </p>\n<p><strong>“类”函数模拟类的关键:</strong> 所有的函数默认都会拥有一个名为 prototype 的公有并且不可枚举(参见第 3 章)的属性，它会指向另一个对象.当我们通过new 函数(构造函数)来得到实例对象时,此时new会给实例对象一个内部的 [[Prototype]]属性，实例对象内部的[[Prototype]]属性与构造函数的prototype属性都指向同一个对象.那JS的这个特性怎么模拟类呢?首先<strong>类的本质就是复制!</strong>.明白这点后,我们就需要实现伪复制.我们可以将类里的属性,放在函数的prototype属性里.这样该函数的实例对象就可以通过<a href=\"原型链\">[Prototype]</a>访问这些属性.我们也经常把这种行为称为原型继承(作者后面会疯狂吐槽这个称呼,我后面再解释为什么吐槽).这样就实现了伪”复制”. 可以达到和类相似的效果.</p>\n<p><strong>注意:</strong> 虽然说所有的函数默认都会拥有一个名为 prototype属性.但也有特殊的时候.就不是默认的情况.就是通过bind()硬绑定时.所返回的<strong>绑定函数,它是没有prototype属性的!</strong></p>\n<p><strong>图解真正的类与JS的模拟类:</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b57bbca1ee25?w=523&amp;h=523&amp;f=png&amp;s=68402\" alt=\"\"></p>\n<p><strong>关于原型继承这个名字的疯狂吐槽:</strong>      作者的吐槽主要集中在”继承”两个字,原因是在面向类的语言中,”继承”意味着复制,但在JavaScript里原型继承却根本不是这个意思,它并没有复制,而是用原型链来实现.所以疯狂吐槽其误导.</p>\n<p><strong>什么是差异继承?</strong> 我根本没听过这个术语,初次看作者所谓的解释,这是啥?他想说啥?后来读了好多遍,终于大概理解了.如果你也看不懂作者想在表达什么,就pass这部分.没必要理解.反而会把你看得更迷惑.<br>好了,我来解释下什么叫差异继承.差异继承就是原型继承的一个不常用的别名.我们知道对象可以通过原型链继承一部分属性,但我们仍可以给对象设置其他有差异不同的属性.这也就可以称为差异继承.</p>\n<h4 id=\"5-2-2-“构造函数”\"><a href=\"#5-2-2-“构造函数”\" class=\"headerlink\" title=\"5.2.2 “构造函数”\"></a>5.2.2 <strong>“构造函数”</strong></h4><p>构造函数之所以是构造函数,是因为它<strong>被new调用</strong>,如果没被new调用,它就是一个普通函数.实际上,new会劫持所有普通函数并用构造对象的形式来调用它,并且无论如何都会构造返回一个对象.</p>\n<h4 id=\"5-2-3-技术\"><a href=\"#5-2-3-技术\" class=\"headerlink\" title=\"5.2.3 技术\"></a>5.2.3 <strong>技术</strong></h4><p>关于两种“面向类”的技巧,我这就不说明了,理解了这部分第一第二章关于this的使用,就很简单了.</p>\n<p><strong>prototype.constructor:</strong><br>为了正确理解constructor.我特意在标题上加上prototype.是想强调:一个对象访问constructor时,会默认访问其原型对象上的constructor属性.</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b5a12dfc7024?w=573&amp;h=463&amp;f=png&amp;s=87705\" alt=\"\"></p>\n<p><strong>注意:</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* .. */</span> &#125;</span><br><span class=\"line\">Foo.prototype = &#123; <span class=\"comment\">/* .. */</span> &#125;; <span class=\"comment\">// 有时候我们会需要创建一个新原型对象,因此也不会有默认的constructor属性指向构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// 需要在 Foo.prototype 上“修复”丢失的 .constructor 属性</span></span><br><span class=\"line\"><span class=\"comment\">// 关于 defineProperty(..)，参见第 3 章 </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty( Foo.prototype, <span class=\"string\">\"constructor\"</span> , &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,<span class=\"comment\">//不可枚举</span></span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  value: Foo <span class=\"comment\">// 让 .constructor 指向 Foo</span></span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"><span class=\"comment\">//上面这种方法是比较严谨,也比较麻烦的.并且使用Object.defineProperty()风险是很大的.</span></span><br><span class=\"line\"><span class=\"comment\">//所以我们实际是这样修改的</span></span><br><span class=\"line\">Foo.prototype.constructor=Foo; <span class=\"comment\">//直接将其赋值Foo 唯一要注意的是此时constructor是可枚举的.会被实例对象的for..in..遍历到.</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-3-原型-继承\"><a href=\"#5-3-原型-继承\" class=\"headerlink\" title=\"5.3 (原型)继承\"></a>5.3 (原型)继承</h3><p><strong>原型对象到原型对象的继承:</strong><br>例如:Bar.prototype 到 Foo.prototype 的委托关系，<br>正确的JavaScript中“原型风格”:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.myName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bar</span>(<span class=\"params\">name,label</span>) </span>&#123; </span><br><span class=\"line\">  Foo.call( <span class=\"keyword\">this</span>, name ); </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.label = label;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们创建了一个新的 Bar.prototype 对象,并且它的[[Prototype]] 关联Foo.prototype </span></span><br><span class=\"line\">Bar.prototype = <span class=\"built_in\">Object</span>.create( Foo.prototype );</span><br><span class=\"line\"><span class=\"comment\">// 注意!Object.create()是返回一个新的对象,所以现在没有 Bar.prototype.constructor 了 </span></span><br><span class=\"line\"><span class=\"comment\">// 如果你需要这个属性的话可能需要手动修复一下它</span></span><br><span class=\"line\">Bar.prototype.myLabel = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.label;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> Bar( <span class=\"string\">\"a\"</span>, <span class=\"string\">\"obj a\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">a.myName(); <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">a.myLabel(); <span class=\"comment\">// \"obj a\"</span></span><br></pre></td></tr></table></figure></p>\n<p>错误用法:</p>\n<ul>\n<li>1, <code>Bar.prototype = Foo.prototype;</code> 此时并不会创建一个关联到 Bar.prototype 的新对象，它只是让 Bar.prototype 直接引用 Foo.prototype 对象。 因此当你执行类似 Bar.prototype. myLabel = … 的赋值语句时会直接修改 Foo.prototype 对象本身。</li>\n<li>2, <code>Bar.prototype = new Foo();</code> 它使用 了 Foo(..) 的“构造函数调用”，如果函数 Foo 有一些其他操作的话,尤其是与this有关的的话，就会影响到 Bar() 的“后代”，后果不堪设想。</li>\n</ul>\n<p><strong>结论:</strong> 要创建一个合适的关联对象，我们<strong>需使用 Object.create(..)</strong> 而不是使用具有副作用的 Foo(..)。这样做唯一的缺点就是需要创建一个新对象然后把旧对象抛弃掉(主要是需要手动设置constructor)，不能直接修改已有的默认对象。</p>\n<p><strong>检查”类”关系</strong>        </p>\n<ul>\n<li><strong>instanceof 操作符</strong>: 验证左边的普通对象的整条[[prototype]]链是否有指向右边函数的prototype,例如:<code>a instanceof Foo</code>。</li>\n<li><strong>isPrototypeOf(..)  方法</strong>: 验证在对象 a 的整条 [[Prototype]] 链中是否出现过 原型对象b.例如:<code>b.isPrototypeOf( a );</code></li>\n</ul>\n<p><strong>注意:</strong> 如果使用内置的 .bind(..) 函数来生成一个<strong>硬绑定函数</strong>(参见第 2 章)的话， 该函数<strong>是没有 .prototype 属性的</strong>。如果硬绑定函数instanceof 的话,则其bind的 目标函数的prototype会成为硬绑定函数的prototype.</p>\n<p><strong>关于<strong>proto</strong></strong>:<br>我们知道函数可以直接通过prototype属性直接访问原型对象.那对象怎么访问呢?我们知道是通过[[prototype]]链.怎么访问呢?<br>在ES5之中的标准方法:通过Object.getPrototypeOf(  )方法来获取对象原型.<code>Object.getPrototypeOf( a ) === Foo.prototype; // true</code>,<br>另一种方法:在 ES6 之前并不是标准,但却被绝大多数浏览器支持的一种方法,可以访问内部[[prototype]]对象.那就是<code>__proto__</code>.例如:<code>a.__proto__ === Foo.prototype; // true</code>.你甚至可以通过<code>.__proto__.__ptoto__...</code>来访问整个原型链.  <code>.__proto__</code>实际上并不存在于你正在使用的对象中.并且它看起来很像一个属性，但是实际上它更像一个 getter/setter(见第三章).</p>\n<h3 id=\"5-4-对象关联\"><a href=\"#5-4-对象关联\" class=\"headerlink\" title=\"5.4 对象关联\"></a>5.4 对象关联</h3><p>[[Prototype]] 机制就是存在于对象中的一个内部链接，<strong>它会引用其他对象。</strong></p>\n<p>这个链接的作用是:如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在 [[Prototype]] 关联的对象上进行查找。同理，如果在后者中也没有找到需要的 引用就会继续查找它的 [[Prototype]]，以此类推。这一系列对象的链接被称为<strong>原型链</strong>。</p>\n<h4 id=\"5-4-1-创建关联\"><a href=\"#5-4-1-创建关联\" class=\"headerlink\" title=\"5.4.1 创建关联\"></a>5.4.1 <strong>创建关联</strong></h4><p><strong>问:</strong>“我们已经明白了为什么 JavaScript 的 [[Prototype]] 机制和类不一样，也明白了它如何建立对象间的关联。”<br><strong>答:</strong> 类的机制是复制,JavaScript里原型链的机制是引用.    </p>\n<p><strong>问:</strong>“那 [[Prototype]] 机制的意义是什么呢?为什么 JavaScript 开发者费这么大的力气(模拟类)在代码中创建这些关联呢?”<br><strong>答:</strong> 意义就是模拟类,JavaScript不需要复制(我觉得这不是个优点)而通过原型链实现”实例”对”类”的”继承(其实就是引用)”.这样就达到了实例对象对某些属性(即原型对象里的属性)的复用.</p>\n<p><strong><code>Object.create(..)</code></strong><br>这个方法其实我们在前面已经使用过很多次.”Object.create(..) 会创建一个新对象(bar)并把它关联到我们指定的对象(foo)，这样我们就可以充分发挥 [[Prototype]] 机制的威力(委托)并且避免不必要的麻烦(比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。”实际上这个方法就是创建返回一个新对象,这个新对象的原型([[Prototype]])会绑定为我们输入的参数对象foo.并且由于不是通过构造函数的形式,所以不需要为函数单独设置prototype.虽然Object.create(..)很好,但实际我们使用的更多的还是构造函数形式.<br><strong>注意:</strong>  Object.create(..) 的第二个参数指定了需要添加到新对象中的属性名以及这些属性的属性描述符(参见第 3 章)。</p>\n<p><strong><code>Object.create(null)</code></strong><br>这个方法其实我们在前面也讲解过几次.”Object.create(null) 会创建一个拥有空(或者说null)[[Prototype]] 链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符(之前解释过)无法进行判断，因此总是会返回 false。 <strong>这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。</strong>“</p>\n<p>“Object.create()的polyfill代码.”这部分我就不做解读了,因为现在都8102年,es6早就普及了,你几乎不可能再用到es5之前的语法了.所以这部分大家了解下即可.</p>\n<h4 id=\"5-4-2-关联关系是备用\"><a href=\"#5-4-2-关联关系是备用\" class=\"headerlink\" title=\"5.4.2 关联关系是备用\"></a>5.4.2 <strong>关联关系是备用</strong></h4><p><strong>[[Prototype]] 的本质作用:</strong>      书中提到了一个观点”处理“缺失”属性或者方法时的一种备用选项。”(即备用设计模式).但随后进行了否定”但是这在 JavaScript 中并不是很常见。所以如果你使用的是这种模式，那或许应当退后一步并重新思考一下这种模式是否合适。” 作者给出的观点是:”进行委托设计模式,即例子中的内部委托(就是在对象里套了个壳再引用了一遍,为的是将委托进行隐藏).这样可以使我们的API设计得更加清晰.”文中的清晰是指,当我们需要引用原型对象的属性方法时,我们在对象内部设置对应专门的属性(例子中的doCool),进行内部委托(其实就是套个壳进行隐藏).这样我们<strong>对象的属性就是”完整”的.</strong></p>\n<p>在实际工作中,我们常常就是把原型对象作为存放对象的公共属性方法的地方.对于一般比较重要的操作才会在对象里进行内部委托(隐藏委托)!</p>\n<h3 id=\"5-5-小结\"><a href=\"#5-5-小结\" class=\"headerlink\" title=\"5.5 小结\"></a>5.5 小结</h3><p>总结得很好很全面,这里我还是直接摘抄了,不是偷懒哦!</p>\n<ul>\n<li>如果要访问对象中并不存在的一个属性，<strong>[[Get]] 操作(参见第 3 章)就会查找对象内部[[Prototype]] 关联的对象。</strong> 这个关联关系实际上定义了一条“原型链”(有点像嵌套的作用域链)，在查找属性时会对它进行遍历。</li>\n<li><strong>所有普通对象都有内置的 Object.prototype，</strong> 指向原型链的顶端(比如说全局作用域)，如 果在原型链中找不到指定的属性就会停止。toString()、valueOf() 和其他一些通用的功能 都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。</li>\n<li>关联两个对象最常用的方法是使用 new 关键词进行函数调用，在调用的 4 个步骤(第 2 章)中会创建一个关联其他对象的新对象。</li>\n<li>使用 new 调用函数时会把新对象的 .prototype 属性关联到“其他对象”(就是构造函数prototype所指的对象)。带 new 的函数调用 通常被称为“构造函数调用”，尽管它们实际上和传统面向类语言中的类构造函数不一样。</li>\n<li>JavaScript 中的机制有一个核心区别，那就是不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的。</li>\n<li>“委托”是一个更合适的术语，因为对象之间的关系不是复制而是委托。(意思就是原先继承应该改为原先委托?)</li>\n</ul>\n<h2 id=\"第六章-行为委托\"><a href=\"#第六章-行为委托\" class=\"headerlink\" title=\"第六章 行为委托\"></a>第六章 行为委托</h2><p>第 5 章的结论:[[Prototype]] 机制就是指对象中的一个内部链接引用另一个对象。换句话说，JavaScript 中这个机制的本质就是对象之间的关联关系。在第六章又被称为委托.<br>PS:前面在讲原型的时候我就习惯用父对象指代原型对象(类似”父类”),用子对象指代其实例对象(类似”子类”).本章也将采用这种称呼,故下面不再说明.(其实我觉得用父对象和子对象称呼更形象)</p>\n<h3 id=\"6-1-面向委托的设计\"><a href=\"#6-1-面向委托的设计\" class=\"headerlink\" title=\"6.1 面向委托的设计\"></a>6.1 面向委托的设计</h3><p>一句话:[[Prototype]]机制是面向委托的设计,是不同于面向类的设计. 下面将分别介绍类理论和委托理论.</p>\n<h4 id=\"6-1-1-类理论\"><a href=\"#6-1-1-类理论\" class=\"headerlink\" title=\"6.1.1 类理论\"></a>6.1.1 <strong>类理论</strong></h4><p><strong>类理论设计方法:</strong> 首先定义一个通用父(基)类，在 父类类中定义所有任务都有(通用)的行为。接着定义子类 ，它们都继承自 父类并且会添加一些特殊的行为来处理对应的任务,并且在继承时子类可以使用方法重写(和多态)父类的行为.        </p>\n<p>类理论中许多行为可以<strong>先“抽象”到父类然后再用子类进行特殊化(重写)。</strong><br>ps:这部分了解即可,着重理解下面JavaScript用到的委托.</p>\n<h4 id=\"6-1-2-委托理论\"><a href=\"#6-1-2-委托理论\" class=\"headerlink\" title=\"6.1.2 委托理论\"></a>6.1.2 <strong>委托理论</strong></h4><p><strong>类理论设计方法:</strong> 首先你会定义一个”父”对象(相当于上节中的父类)，它会包含所有任务都可以使用(委托)的具体行为。接着，对于<strong>每个任务</strong>你都可以定义一个对象(“子”对象)来存储对应的数据和行为。你可以把特定的任务对象都关联到父对象上，让它们在需要的时候可以进行委托。    (其实我们一般都是用父对象来定义通用的方法,子对象进行委托.然后子对象自身个性的属性方法就写在子对象本身,并避免与父对象的属性名冲突)        </p>\n<p><strong>ps:</strong> 这节书中这段话<code>但是我们并不需要把这些行为放在一起，**通过类的复制**，我们可以把它们分别放在各自独立 的对象中，需要时可以允许 XYZ 对象委托给 Task。</code>有个错误.”通过类的复制”应该改为”通过”[[Prototype]]机制”.这里应该是作者的手误.<br>在 JavaScript 中，[[Prototype]] 机制会把对象关联到其他对象。无论你多么努力地说服自 己，JavaScript 中就是没有类似“类”的抽象机制。(其实主要原因还是是JavaScript没有完整的复制机制)</p>\n<p><strong>委托理论的使用建议:</strong><br>PS:书中这里写了3条,其实只有2条,第三条不过是对第一条的说明,这里我进行了合并.</p>\n<ul>\n<li><ol>\n<li>通常来说，在 [[Prototype]] 委托中最好<strong>把状态保存在委托者(子对象)而不是委托目标(父对象)上</strong>。那怎么实现呢,就是通过”this 的隐式绑定”.<strong>在委托目标(父对象)上的函数里通过this定义保存状态</strong>.当委托者(子对象)引用该函数方法时,此时的this就自动绑定到委托者上了.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在委托中我们会尽量避免在 [[Prototype]] 链的不同级别中使用相同的命名，否则就需要使用笨拙并且脆弱的语法来消除引用歧义(参见第 4 章)。</li>\n</ol>\n</li>\n<li><strong>补充</strong>: 3. 在 API 接口的设计中，<strong>委托最好在内部实现，不要直接暴露出去。</strong> 这么做更多的是出于安全和接口稳定的考虑.建议<strong>子对象将所有引用父对象的方法都套个函数隐藏起来,并取一个语义化的属性名.</strong></li>\n</ul>\n<p><strong>委托理论的使用注意:</strong></p>\n<ul>\n<li><ol>\n<li><strong>禁止两个对象互相委托</strong>:当你将第二个对象反向委托给前一个对象时,就会报错.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>调试</strong>: 这个了解下就行.知道不同浏览器和工具对委托的解析结果并不一定相同.(吐槽:看了半天到后面出现<code>实际上，在编写本书时，这个行为被认定是 Chrome 的一个 bug， 当你读到此书时，它可能已经被修复了。</code>我只想说WTF! 好吧,我知道chrome以前可能出现过这个”bug”了=.=)</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6-1-3-比较思维模型\"><a href=\"#6-1-3-比较思维模型\" class=\"headerlink\" title=\"6.1.3 比较思维模型\"></a>6.1.3 <strong>比较思维模型</strong></h4><p>这节主要是比较了”通过构造函数(模拟类)实现原型继承”与”通过对象关联(委托形式,Object.create( … ))实现原型继承”两种方式的区别.</p>\n<p><strong>结论:</strong> 通过对象关联,委托形式,更加简洁,更加清晰易懂.</p>\n<p>PS:这里我原本自己对例子画出原型示意图.但是发现是真的复杂,并且和书中简洁后的示意图是差不多的,所以这里就不展示了,免得让读者看得更头大.这里建议,读者自己在草稿纸上画出原型示意图.</p>\n<h3 id=\"6-2-类与对象\"><a href=\"#6-2-类与对象\" class=\"headerlink\" title=\"6.2 类与对象\"></a>6.2 类与对象</h3><p>其实这节讲得还是”通过构造函数(模拟类)实现原型继承”与”通过对象关联(委托形式,Object.create( … ))实现原型继承”两种方式的区别.不过这次主要是以前端实际使用场景进行讲解.</p>\n<h4 id=\"6-2-1-控件“类”\"><a href=\"#6-2-1-控件“类”\" class=\"headerlink\" title=\"6.2.1 控件“类”\"></a>6.2.1 <strong>控件“类”</strong></h4><p>这里我就不以书中的例子进行讲解了,而是直接站在更高的角度对这种”类”风格的代码进行讲解.<br><strong>最大特点:</strong> 1是通过构造函数进行模拟类,2是通过显式伪多态(硬绑定函数)关联两个函数.<br><strong>注意:</strong> </p>\n<ul>\n<li><strong>不管是类还是对象.这两种形式一般都需要定义两种数据.第一种就是实例对象要用到的”初始保存的数据”;第二种就是通用行为的定义,包括对实例对象数据的增删改查.</strong></li>\n<li>下面提到的显式伪多态(详见第四章),其实指的就是使用call()方法这种硬绑定.</li>\n<li>注意ES6 class模拟类的写法我就没具体列出了.实际上class 仍然是通过 [[Prototype]] 机制实现的,不过是个表面简洁的语法糖.</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b5e847b943c0?w=1002&amp;h=717&amp;f=png&amp;s=117669\" alt=\"\"></p>\n<p>虽然书中对显式伪多态称为”丑陋的”,还用了一个语气动词”呸!”.虽然这样不好,但有时用call真的很方便,所以用得也很多.</p>\n<h4 id=\"6-2-2-委托控件对象\"><a href=\"#6-2-2-委托控件对象\" class=\"headerlink\" title=\"6.2.2 委托控件对象\"></a>6.2.2 <strong>委托控件对象</strong></h4><p><strong>最大特点:</strong> 通过对象载体来模拟父子,并<strong>通过Object,create(…)来对两个对象进行关联</strong>.并<strong>通过委托的形式进行引用</strong>.与上节中提到的类形式还有一个区别:对象foo构建后,需要手动调用setUp方法进行初始化.故对象的构建与初始化是分开的.而构造函数形式则是在new 构造函数时, 同时进行了对象构建与初始化.(关于这点我下面还会再说明的)</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674b604328156c9?w=789&amp;h=822&amp;f=png&amp;s=132960\" alt=\"\"></p>\n<p>关于书中这句<code>使用类构造函数的话，你需要(并不是硬性要求，但是强烈建议)在同一个步骤中实现构造和初始化。然而，在许多情况下把这两步分开(就像对象关联代码一样)更灵活。</code>的理解:使用类构造函数形式,当我们使用<code>new 构造函数</code>时,其实是在<strong>一步实现</strong>对象的构建和对象数据的初始化(通过构造函数里的call) ;使用这种委托形式,我们是分别通过<code>Object.create( ... );</code>构建对象和<code>foo.setUp( ...);</code>来初始化的.即我们是分两步实现的.这样分开的话其实是更加灵活,也更符合编程中的关注分离原则.</p>\n<h3 id=\"6-3-更简洁的设计\"><a href=\"#6-3-更简洁的设计\" class=\"headerlink\" title=\"6.3 更简洁的设计\"></a>6.3 更简洁的设计</h3><p>这节也是一样通过两者的对比来突显委托设计模式的各种优点.这里我就不再对书中的例子进行解读.如果你真正理解了类和委托的话,其实是很简单的.如果觉得复杂的话,可以在纸上理一下函数和对象之间的关系,下面我就只总结下这里提到委托设计模式的优点,当然核心是更简洁.</p>\n<p><strong>简洁体现在:</strong></p>\n<ul>\n<li>1, 委托重点在于只需要两个实体(两个对象相互关联)，而之前的”类”模式需要三个(父”类”,子”类”,实例对象)其实可以这么理解:委托模式将”子类”和”实例对象”合为一个对象了。</li>\n<li>2, 不需要基类(父类)来”共享”两个实体之间的行为.不需要实例化类,也不需要合成.其实这第二条就是对第一条这种结果的说明.</li>\n<li>额外补充强调:在使用构造函数模拟类时,子类通常会对父类的行为进行重写(属性名相同);但委托模式则不会,它会重新取个属性名,再引用父对象上的行为.</li>\n</ul>\n<h3 id=\"6-4-更好的语法\"><a href=\"#6-4-更好的语法\" class=\"headerlink\" title=\"6.4 更好的语法\"></a>6.4 更好的语法</h3><p>这节主要是介绍ES6提供的2个简洁写法与其中的隐患.</p>\n<p><strong>语法:</strong></p>\n<ul>\n<li><p>在 ES6 中我们可以在任意对象的字面形式中使用简洁方法声明，例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> Foo = &#123;</span><br><span class=\"line\">  bar() &#123; <span class=\"comment\">/*..*/</span> &#125;,<span class=\"comment\">//字面形式声明</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 ES6 中我们可以用 Object. setPrototypeOf(..) 来修改对象的 [[Prototype]],具体用法可以<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"noopener\">查看MDN</a>例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用更好的对象字面形式语法和简洁方法 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> AuthController = &#123;</span><br><span class=\"line\">         errors: [],</span><br><span class=\"line\">         checkAuth() &#123;</span><br><span class=\"line\">           <span class=\"comment\">// ... </span></span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         server(url,data) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// ...</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 现在把 AuthController 关联到 LoginController </span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf( AuthController, LoginController );</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>弊端:</strong></p>\n<ul>\n<li><strong>对象字面形式语法</strong>:实际上就是一个匿名函数表达式.匿名函数会导致3个缺点:1. 调试栈更难追踪;2. 自我引用(递归、事件(解除)绑定，等等)更难; 3. 代码(稍微)更难理解。(其实我觉得这3个缺点还好,影响不是那么大).但是这种简洁语法很特殊，会给对应的函数对象设置一个内部的 name 属性，这样理论上可以用在追 踪栈中。所以实际上唯一的弊端就只剩第2条了.终极建议就是:如果你需要自我引用的话，那最好使用传统的具名函数表达式来定义对应的函数，不要使用简洁方法。</li>\n<li><strong>Object. setPrototypeOf(..)</strong>  这个是书中没有提的,我觉得有必要进行补充下.首先,Object. setPrototypeOf(..)可能会带来性能问题,如果关心性能,则应该使用Object.create()替代.<strong>Object. setPrototypeOf(..)与Object.create()的主要区别</strong>: Object. setPrototypeOf(..)会直接修改现有对象的[[prototype]],Object.create()则是返回一个新对象.所以你需要手动设置一下丢失的的constructor属性(如果你需要的话).而使用setPrototypeOf(..)则不需要.</li>\n</ul>\n<h3 id=\"6-5-内省\"><a href=\"#6-5-内省\" class=\"headerlink\" title=\"6.5 内省\"></a>6.5 内省</h3><p><strong>吐槽:</strong> 纵观整本书,作者关于JavaScript中模拟类和继承”的批评,说它们具有很大误导性!更是嗤之以鼻!就差爆粗口了,JavaScript就像一个异教徒,应该绑在十字架上被烧死!但是他这样的观点,都是站在其他语言的角度来看待时,产生的.我想更多的读者可能是只接触过JavaScript.那么他其实是没有这些疑惑的!!!你反而给他们讲这一大堆其他语言的”正确”含义,有时候会时得其反!让读者更加困惑,如果是理解不透彻的,反而会怀疑自己本来写的是对的代码!所以读者应该做一个可以理解作者意图,并且拥有自我见解和观点立场!</p>\n<p><strong>什么是内省(自省)?</strong><br>首先,本节需要弄懂一个问题,什么是内省,或者是自省。书中的解释是<code>自省就是检查实例的类型。类实例的自省主要目的是通过创建方式来判断对象的结构和功能。</code>我这里再更通俗地解释下:当我们构建得到一个实例对象时,有时候我们是不太清除它的属性和方法的.尤其是第三方库.有时候贸然使用会导致很多错误(例如调用的方法不存在,或者报错等).这个时候我们就需要通过自省.其实就是通过一系列操作,来确认实例是不是我们想要的那个,实例的方法是不是我们想要的(存在且可用).</p>\n<p><strong>内省的方法:</strong></p>\n<ul>\n<li><strong>1.通过 instanceof 语法:</strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.something = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"comment\">// 假设我们不知道上面的过程,只知道得到实例对象a1</span></span><br><span class=\"line\"><span class=\"comment\">//我们想知道a1是不是我所希望的函数Foo所构建的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a1 <span class=\"keyword\">instanceof</span> Foo) &#123; </span><br><span class=\"line\">  a1.something();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>例子中我们有一个实例对象a1,但是我们不知道a1是不是我们所希望的函数Foo所构造的,此时就可以通过<code>instanceof</code>进行判断.        <code>instanceof</code>比较适合判断实例对象和构造函数之间的关系.<br><strong>缺陷:</strong> 但是如果我们想判断函数A是不是函数B的”子类”时,则会稍微麻烦点,我们需要像这样<code>A.prototype instanceof B</code>进行判断.并且也不能直接判断两个对象是否关联.</p>\n<ul>\n<li><strong>2.通过 “鸭子类型”:</strong> 为什么会叫这个名字?看了作者的解释,还是不太能接受.不太理解外国人的脑回路.你在国内和别人说”鸭子类型”,估计也是一脸懵逼.其实很简单,所谓的”鸭子类型”其实也是我们实际工作中常用的:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果a1的something存在的话,则我们可以进行调用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( a1.something) &#123; </span><br><span class=\"line\">  a1.something();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其实这种方法是非常常用的,排除了在不知道存在性情况下,贸然调用的风险.<br><strong>缺陷:</strong> 关于书中提到的缺点,四个字概括就是”以偏概全” .书中关于Promise的例子,就是以偏概全的例子.所以我们在使用时,在if判断a1.something存在时,才会在后面使用something方法.不要直接使用anotherthing,这种没确认过的方法.</p>\n<ul>\n<li><strong>3.如果使用对象关联时:</strong> 则可以比较简单的使用<code>Object.getPrototypeOf(..)</code>进行判断.例如<code>Object.getPrototypeOf(a)===A</code>其中a,A都是对象.如果为true,则说明a的原型链上含有对象A.</li>\n</ul>\n<h3 id=\"6-6-小结\"><a href=\"#6-6-小结\" class=\"headerlink\" title=\"6.6 小结\"></a>6.6 小结</h3><ul>\n<li>除了类和继承设计模式,行为委托其实是更强大,更值得推广的模式(本观点仅代表作者的观点!)</li>\n<li>行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。(我觉得还是父子对象关系.我的解说里也都是父子相称)</li>\n<li>当你只用对象来设计代码时，不仅可以让语法更加简洁，而且可以让代码结构更加清晰。</li>\n<li>对象关联(对象之前互相关联)是一种编码风格，它倡导的是直接创建和关联对象，不把它们抽象成类。对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现   </li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjus5nh9u0000ed106hjqgi3x","category_id":"cjus5nha60004ed109aooda6y","_id":"cjus5nhae000aed10g3bqodwi"},{"post_id":"cjus5nha10002ed10necrew5e","category_id":"cjus5nhad0008ed10qrvxnsjl","_id":"cjus5nhaj000ged109cbsc3y5"},{"post_id":"cjus5nhaa0006ed1000t2itv0","category_id":"cjus5nha60004ed109aooda6y","_id":"cjus5nhal000ied101a0g1i7b"},{"post_id":"cjus5nhac0007ed106tpcc318","category_id":"cjus5nhaj000fed10bn9lfk0o","_id":"cjus5nham000ned10g2e2a7p1"},{"post_id":"cjus5nhhx000sed10xftft5h7","category_id":"cjus5nhhz000ted10sygufgl3","_id":"cjus5nhi0000wed10ktvbkxkr"}],"PostTag":[{"post_id":"cjus5nh9u0000ed106hjqgi3x","tag_id":"cjus5nha90005ed1031eqdpuu","_id":"cjus5nhah000ded106me8gh69"},{"post_id":"cjus5nh9u0000ed106hjqgi3x","tag_id":"cjus5nhad0009ed10l398cx4f","_id":"cjus5nhai000eed103nkanxrq"},{"post_id":"cjus5nha10002ed10necrew5e","tag_id":"cjus5nha90005ed1031eqdpuu","_id":"cjus5nham000ked109cxk7u0m"},{"post_id":"cjus5nha10002ed10necrew5e","tag_id":"cjus5nhad0009ed10l398cx4f","_id":"cjus5nham000led10e4apeaj9"},{"post_id":"cjus5nhaa0006ed1000t2itv0","tag_id":"cjus5nha90005ed1031eqdpuu","_id":"cjus5nhao000ped10jd827k0x"},{"post_id":"cjus5nhaa0006ed1000t2itv0","tag_id":"cjus5nhad0009ed10l398cx4f","_id":"cjus5nhao000qed10aw7zkaoh"},{"post_id":"cjus5nhac0007ed106tpcc318","tag_id":"cjus5nhan000oed10b19qjb6t","_id":"cjus5nhao000red10z8oqr8q2"},{"post_id":"cjus5nhhx000sed10xftft5h7","tag_id":"cjus5nhhz000ued10usr4rkhm","_id":"cjus5nhhz000ved10572j2xxk"}],"Tag":[{"name":"git","_id":"cjus5nha90005ed1031eqdpuu"},{"name":"实战经验","_id":"cjus5nhad0009ed10l398cx4f"},{"name":"Weex","_id":"cjus5nhan000oed10b19qjb6t"},{"name":"学习笔记","_id":"cjus5nhhz000ued10usr4rkhm"}]}}